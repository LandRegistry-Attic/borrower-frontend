{"version":3,"file":"main.js","sources":["../../../../node_modules/jquery/dist/jquery.js","vendor/details.polyfill.js","modules/accept-naa.js","modules/confirming-deed.js","../../../../node_modules/govuk_frontend_toolkit/javascripts/govuk/selection-buttons.js","modules/selection-buttons.js"],"sourcesContent":["/*!\n * jQuery JavaScript Library v1.12.4\n * http://jquery.com/\n *\n * Includes Sizzle.js\n * http://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2016-05-20T17:17Z\n */\n\n(function( global, factory ) {\n\n\tif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n}(typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Support: Firefox 18+\n// Can't be in strict mode, several libs including ASP.NET trace\n// the stack via arguments.caller.callee and Firefox dies if\n// you try to trace through \"use strict\" call chains. (#13335)\n//\"use strict\";\nvar deletedIds = [];\n\nvar document = window.document;\n\nvar slice = deletedIds.slice;\n\nvar concat = deletedIds.concat;\n\nvar push = deletedIds.push;\n\nvar indexOf = deletedIds.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar support = {};\n\n\n\nvar\n\tversion = \"1.12.4\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t},\n\n\t// Support: Android<4.1, IE<9\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n\t// Matches dashed string for camelizing\n\trmsPrefix = /^-ms-/,\n\trdashAlpha = /-([\\da-z])/gi,\n\n\t// Used by jQuery.camelCase as callback to replace()\n\tfcamelCase = function( all, letter ) {\n\t\treturn letter.toUpperCase();\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// Start with an empty selector\n\tselector: \"\",\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\t\treturn num != null ?\n\n\t\t\t// Return just the one element from the set\n\t\t\t( num < 0 ? this[ num + this.length ] : this[ num ] ) :\n\n\t\t\t// Return all the elements in a clean array\n\t\t\tslice.call( this );\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\t\tret.context = this.context;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: deletedIds.sort,\n\tsplice: deletedIds.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar src, copyIsArray, copy, name, options, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !jQuery.isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = jQuery.isArray( copy ) ) ) ) {\n\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && jQuery.isArray( src ) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject( src ) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\t// See test/unit/core.js for details concerning isFunction.\n\t// Since version 1.3, DOM methods and functions like alert\n\t// aren't supported. They return false on IE (#2968).\n\tisFunction: function( obj ) {\n\t\treturn jQuery.type( obj ) === \"function\";\n\t},\n\n\tisArray: Array.isArray || function( obj ) {\n\t\treturn jQuery.type( obj ) === \"array\";\n\t},\n\n\tisWindow: function( obj ) {\n\t\t/* jshint eqeqeq: false */\n\t\treturn obj != null && obj == obj.window;\n\t},\n\n\tisNumeric: function( obj ) {\n\n\t\t// parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t// adding 1 corrects loss of precision from parseFloat (#15100)\n\t\tvar realStringObj = obj && obj.toString();\n\t\treturn !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\tisPlainObject: function( obj ) {\n\t\tvar key;\n\n\t\t// Must be an Object.\n\t\t// Because of IE, we also have to check the presence of the constructor property.\n\t\t// Make sure that DOM nodes and window objects don't pass through, as well\n\t\tif ( !obj || jQuery.type( obj ) !== \"object\" || obj.nodeType || jQuery.isWindow( obj ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\ttry {\n\n\t\t\t// Not own constructor property must be Object\n\t\t\tif ( obj.constructor &&\n\t\t\t\t!hasOwn.call( obj, \"constructor\" ) &&\n\t\t\t\t!hasOwn.call( obj.constructor.prototype, \"isPrototypeOf\" ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} catch ( e ) {\n\n\t\t\t// IE8,9 Will throw exceptions on certain host objects #9897\n\t\t\treturn false;\n\t\t}\n\n\t\t// Support: IE<9\n\t\t// Handle iteration over inherited properties before own properties.\n\t\tif ( !support.ownFirst ) {\n\t\t\tfor ( key in obj ) {\n\t\t\t\treturn hasOwn.call( obj, key );\n\t\t\t}\n\t\t}\n\n\t\t// Own properties are enumerated firstly, so to speed up,\n\t\t// if last one is own, then all properties are own.\n\t\tfor ( key in obj ) {}\n\n\t\treturn key === undefined || hasOwn.call( obj, key );\n\t},\n\n\ttype: function( obj ) {\n\t\tif ( obj == null ) {\n\t\t\treturn obj + \"\";\n\t\t}\n\t\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\t\ttypeof obj;\n\t},\n\n\t// Workarounds based on findings by Jim Driscoll\n\t// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context\n\tglobalEval: function( data ) {\n\t\tif ( data && jQuery.trim( data ) ) {\n\n\t\t\t// We use execScript on Internet Explorer\n\t\t\t// We use an anonymous function so that context is window\n\t\t\t// rather than jQuery in Firefox\n\t\t\t( window.execScript || function( data ) {\n\t\t\t\twindow[ \"eval\" ].call( window, data ); // jscs:ignore requireDotNotation\n\t\t\t} )( data );\n\t\t}\n\t},\n\n\t// Convert dashed to camelCase; used by the css and data modules\n\t// Microsoft forgot to hump their vendor prefix (#9572)\n\tcamelCase: function( string ) {\n\t\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n\t},\n\n\tnodeName: function( elem, name ) {\n\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// Support: Android<4.1, IE<9\n\ttrim: function( text ) {\n\t\treturn text == null ?\n\t\t\t\"\" :\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\tvar len;\n\n\t\tif ( arr ) {\n\t\t\tif ( indexOf ) {\n\t\t\t\treturn indexOf.call( arr, elem, i );\n\t\t\t}\n\n\t\t\tlen = arr.length;\n\t\t\ti = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;\n\n\t\t\tfor ( ; i < len; i++ ) {\n\n\t\t\t\t// Skip accessing in sparse arrays\n\t\t\t\tif ( i in arr && arr[ i ] === elem ) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t},\n\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\twhile ( j < len ) {\n\t\t\tfirst[ i++ ] = second[ j++ ];\n\t\t}\n\n\t\t// Support: IE<9\n\t\t// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)\n\t\tif ( len !== len ) {\n\t\t\twhile ( second[ j ] !== undefined ) {\n\t\t\t\tfirst[ i++ ] = second[ j++ ];\n\t\t\t}\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn concat.apply( [], ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// Bind a function to a context, optionally partially applying any\n\t// arguments.\n\tproxy: function( fn, context ) {\n\t\tvar args, proxy, tmp;\n\n\t\tif ( typeof context === \"string\" ) {\n\t\t\ttmp = fn[ context ];\n\t\t\tcontext = fn;\n\t\t\tfn = tmp;\n\t\t}\n\n\t\t// Quick check to determine if target is callable, in the spec\n\t\t// this throws a TypeError, but we will just return undefined.\n\t\tif ( !jQuery.isFunction( fn ) ) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Simulated bind\n\t\targs = slice.call( arguments, 2 );\n\t\tproxy = function() {\n\t\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t\t};\n\n\t\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\t\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\t\treturn proxy;\n\t},\n\n\tnow: function() {\n\t\treturn +( new Date() );\n\t},\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\n// JSHint would error on this code due to the Symbol not being defined in ES5.\n// Defining this global in .jshintrc would create a danger of using the global\n// unguarded in another place, it seems safer to just disable JSHint for these\n// three lines.\n/* jshint ignore: start */\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = deletedIds[ Symbol.iterator ];\n}\n/* jshint ignore: end */\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\nfunction( i, name ) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: iOS 8.2 (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = jQuery.type( obj );\n\n\tif ( type === \"function\" || jQuery.isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.2.1\n * http://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2015-10-17\n */\n(function( window ) {\n\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// General-purpose constants\n\tMAX_NEGATIVE = 1 << 31,\n\n\t// Instance methods\n\thasOwn = ({}).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpush_native = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\t// Use a stripped-down indexOf as it's faster than native\n\t// http://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[i] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\tidentifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\n\t\t\"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\n\n\trattributeQuotes = new RegExp( \"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\n\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\n\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\n\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\trescape = /'|\\\\/g,\n\n\t// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\n\tfunescape = function( _, escaped, escapedWhitespace ) {\n\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t// NaN means non-codepoint\n\t\t// Support: Firefox<24\n\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\treturn high !== high || escapedWhitespace ?\n\t\t\tescaped :\n\t\t\thigh < 0 ?\n\t\t\t\t// BMP codepoint\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t};\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t(arr = slice.call( preferredDoc.childNodes )),\n\t\tpreferredDoc.childNodes\n\t);\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpush_native.apply( target, slice.call(els) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( (target[j++] = els[i++]) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, nidselect, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\n\t\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n\t\t\tsetDocument( context );\n\t\t}\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( (m = match[1]) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( (elem = context.getElementById( m )) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && (elem = newContext.getElementById( m )) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[2] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!compilerCache[ selector + \" \" ] &&\n\t\t\t\t(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {\n\n\t\t\t\tif ( nodeType !== 1 ) {\n\t\t\t\t\tnewContext = context;\n\t\t\t\t\tnewSelector = selector;\n\n\t\t\t\t// qSA looks outside Element context, which is not what we want\n\t\t\t\t// Thanks to Andrew Dupont for this workaround technique\n\t\t\t\t// Support: IE <=8\n\t\t\t\t// Exclude object elements\n\t\t\t\t} else if ( context.nodeName.toLowerCase() !== \"object\" ) {\n\n\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\tif ( (nid = context.getAttribute( \"id\" )) ) {\n\t\t\t\t\t\tnid = nid.replace( rescape, \"\\\\$&\" );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext.setAttribute( \"id\", (nid = expando) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\tnidselect = ridentifier.test( nid ) ? \"#\" + nid : \"[id='\" + nid + \"']\";\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[i] = nidselect + \" \" + toSelector( groups[i] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\t\t\t\t}\n\n\t\t\t\tif ( newSelector ) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn (cache[ key + \" \" ] = value);\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created div and expects a boolean result\n */\nfunction assert( fn ) {\n\tvar div = document.createElement(\"div\");\n\n\ttry {\n\t\treturn !!fn( div );\n\t} catch (e) {\n\t\treturn false;\n\t} finally {\n\t\t// Remove from its parent by default\n\t\tif ( div.parentNode ) {\n\t\t\tdiv.parentNode.removeChild( div );\n\t\t}\n\t\t// release memory in IE\n\t\tdiv = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split(\"|\"),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[i] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\t( ~b.sourceIndex || MAX_NEGATIVE ) -\n\t\t\t( ~a.sourceIndex || MAX_NEGATIVE );\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( (cur = cur.nextSibling) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction(function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction(function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\t// documentElement is verified for cases where it doesn't yet exist\n\t// (such as loading iframes in IE - #4833)\n\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\n\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, parent,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9-11, Edge\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\tif ( (parent = document.defaultView) && parent.top !== parent ) {\n\t\t// Support: IE 11\n\t\tif ( parent.addEventListener ) {\n\t\t\tparent.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( parent.attachEvent ) {\n\t\t\tparent.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert(function( div ) {\n\t\tdiv.className = \"i\";\n\t\treturn !div.getAttribute(\"className\");\n\t});\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert(function( div ) {\n\t\tdiv.appendChild( document.createComment(\"\") );\n\t\treturn !div.getElementsByTagName(\"*\").length;\n\t});\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert(function( div ) {\n\t\tdocElem.appendChild( div ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t});\n\n\t// ID find and filter\n\tif ( support.getById ) {\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar m = context.getElementById( id );\n\t\t\t\treturn m ? [ m ] : [];\n\t\t\t}\n\t\t};\n\t\tExpr.filter[\"ID\"] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t};\n\t\t};\n\t} else {\n\t\t// Support: IE6/7\n\t\t// getElementById is not reliable as a find shortcut\n\t\tdelete Expr.find[\"ID\"];\n\n\t\tExpr.filter[\"ID\"] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode(\"id\");\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( (elem = results[i++]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See http://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert(function( div ) {\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// http://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( div ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( div.querySelectorAll(\"[msallowcapture^='']\").length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !div.querySelectorAll(\"[selected]\").length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !div.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !div.querySelectorAll(\":checked\").length ) {\n\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibing-combinator selector` fails\n\t\t\tif ( !div.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t}\n\t\t});\n\n\t\tassert(function( div ) {\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement(\"input\");\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tdiv.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( div.querySelectorAll(\"[name=d]\").length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !div.querySelectorAll(\":enabled\").length ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tdiv.querySelectorAll(\"*,:x\");\n\t\t\trbuggyQSA.push(\",.*:\");\n\t\t});\n\t}\n\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector) )) ) {\n\n\t\tassert(function( div ) {\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( div, \"div\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( div, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t});\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t));\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( (b = b.parentNode) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\tif ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\t\t\treturn a === document ? -1 :\n\t\t\t\tb === document ? 1 :\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[i] === bp[i] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[i], bp[i] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\tap[i] === preferredDoc ? -1 :\n\t\t\tbp[i] === preferredDoc ? 1 :\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\t// Make sure that attribute selectors are quoted\n\texpr = expr.replace( rattributeQuotes, \"='$1']\" );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!compilerCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch (e) {}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\t// Set document vars if needed\n\tif ( ( context.ownerDocument || context ) !== document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( (elem = results[i++]) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( (node = elem[i++]) ) {\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[2] === \"~=\" ) {\n\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[3] ) {\n\t\t\t\t\tSizzle.error( match[0] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[3] ) {\n\t\t\t\tSizzle.error( match[0] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[6] && match[2];\n\n\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[3] ) {\n\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t(excess = tokenize( unquoted, true )) &&\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() { return true; } :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\n\t\t\t\t});\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction(function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction(function( selector ) {\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}) :\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[0] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t}),\n\n\t\t\"has\": markFunction(function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t}),\n\n\t\t\"contains\": markFunction(function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t}),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test(lang || \"\") ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": function( elem ) {\n\t\t\treturn elem.disabled === false;\n\t\t},\n\n\t\t\"disabled\": function( elem ) {\n\t\t\treturn elem.disabled === true;\n\t\t},\n\n\t\t\"checked\": function( elem ) {\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[\"empty\"]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo(function() {\n\t\t\treturn [ 0 ];\n\t\t}),\n\n\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t}),\n\n\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t}),\n\n\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t})\n\t}\n};\n\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\n\t\t\tif ( match ) {\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( (tokens = []) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( (match = rcombinators.exec( soFar )) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push({\n\t\t\t\tvalue: matched,\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[0].replace( rtrim, \" \" )\n\t\t\t});\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t});\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[i].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tcheckNonElements = base && dir === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\n\n\t\t\t\t\t\tif ( (oldCache = uniqueCache[ dir ]) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ dir ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[i], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (elem = unmatched[i]) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction(function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( (elem = temp[i]) ) {\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&\n\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t(checkContext = context).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\t\t\t\toutermostContext = context === document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\tif ( !context && elem.ownerDocument !== document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[i] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[0] = match[0].slice( 0 );\n\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\n\t\t\t\tsupport.getById && context.nodeType === 9 && documentIsHTML &&\n\t\t\t\tExpr.relative[ tokens[1].type ] ) {\n\n\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[i];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( (find = Expr.find[ type ]) ) {\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( (seed = find(\n\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n\t\t\t\t)) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( div1 ) {\n\t// Should return 1, but returns 4 (following)\n\treturn div1.compareDocumentPosition( document.createElement(\"div\") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( div ) {\n\tdiv.innerHTML = \"<a href='#'></a>\";\n\treturn div.firstChild.getAttribute(\"href\") === \"#\" ;\n}) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert(function( div ) {\n\tdiv.innerHTML = \"<input/>\";\n\tdiv.firstChild.setAttribute( \"value\", \"\" );\n\treturn div.firstChild.getAttribute( \"value\" ) === \"\";\n}) ) {\n\taddHandle( \"value\", function( elem, name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( div ) {\n\treturn div.getAttribute(\"disabled\") == null;\n}) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\tnull;\n\t\t}\n\t});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\nvar rsingleTag = ( /^<([\\w-]+)\\s*\\/?>(?:<\\/\\1>|)$/ );\n\n\n\nvar risSimple = /^.[^:#\\[\\.,]*$/;\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( jQuery.isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\t/* jshint -W018 */\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\n\t}\n\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\n\t}\n\n\tif ( typeof qualifier === \"string\" ) {\n\t\tif ( risSimple.test( qualifier ) ) {\n\t\t\treturn jQuery.filter( qualifier, elements, not );\n\t\t}\n\n\t\tqualifier = jQuery.filter( qualifier, elements );\n\t}\n\n\treturn jQuery.grep( elements, function( elem ) {\n\t\treturn ( jQuery.inArray( elem, qualifier ) > -1 ) !== not;\n\t} );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\treturn elems.length === 1 && elem.nodeType === 1 ?\n\t\tjQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :\n\t\tjQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\t\treturn elem.nodeType === 1;\n\t\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i,\n\t\t\tret = [],\n\t\t\tself = this,\n\t\t\tlen = self.length;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\t// Needed because $( selector, context ) becomes $( context ).find( selector )\n\t\tret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );\n\t\tret.selector = this.selector ? this.selector + \" \" + selector : selector;\n\t\treturn ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// init accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector.charAt( 0 ) === \"<\" &&\n\t\t\t\tselector.charAt( selector.length - 1 ) === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( jQuery.isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\t// Check parentNode to catch when Blackberry 4.6 returns\n\t\t\t\t\t// nodes that are no longer in the document #6963\n\t\t\t\t\tif ( elem && elem.parentNode ) {\n\n\t\t\t\t\t\t// Handle the case where IE and Opera return items\n\t\t\t\t\t\t// by name instead of ID\n\t\t\t\t\t\tif ( elem.id !== match[ 2 ] ) {\n\t\t\t\t\t\t\treturn rootjQuery.find( selector );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Otherwise, we inject the element directly into the jQuery object\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.context = document;\n\t\t\t\t\tthis.selector = selector;\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis.context = this[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( jQuery.isFunction( selector ) ) {\n\t\t\treturn typeof root.ready !== \"undefined\" ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\tif ( selector.selector !== undefined ) {\n\t\t\tthis.selector = selector.selector;\n\t\t\tthis.context = selector.context;\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar i,\n\t\t\ttargets = jQuery( target, this ),\n\t\t\tlen = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\tpos = rneedsContext.test( selectors ) || typeof selectors !== \"string\" ?\n\t\t\t\tjQuery( selectors, context || this.context ) :\n\t\t\t\t0;\n\n\t\tfor ( ; i < l; i++ ) {\n\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t// Always skip document fragments\n\t\t\t\tif ( cur.nodeType < 11 && ( pos ?\n\t\t\t\t\tpos.index( cur ) > -1 :\n\n\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within\n\t// the matched set of elements\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn jQuery.inArray( this[ 0 ], jQuery( elem ) );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn jQuery.inArray(\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem, this );\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\tdo {\n\t\tcur = cur[ dir ];\n\t} while ( cur && cur.nodeType !== 1 );\n\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\treturn jQuery.nodeName( elem, \"iframe\" ) ?\n\t\t\telem.contentDocument || elem.contentWindow.document :\n\t\t\tjQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar ret = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tret = jQuery.filter( selector, ret );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tret = jQuery.uniqueSort( ret );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tret = ret.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rnotwhite = ( /\\S+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( jQuery.isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && jQuery.type( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = true;\n\t\t\t\tif ( !memory ) {\n\t\t\t\t\tself.disable();\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, listener list, final state\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ), \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ), \"rejected\" ],\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ) ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\tthen: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\t\t\t\t\tvar fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];\n\n\t\t\t\t\t\t\t// deferred[ done | fail | progress ] for forwarding actions to newDefer\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && jQuery.isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis === promise ? newDefer.promise() : this,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Keep pipe for back-compat\n\t\tpromise.pipe = promise.then;\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 3 ];\n\n\t\t\t// promise[ done | fail | progress ] = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add( function() {\n\n\t\t\t\t\t// state = [ resolved | rejected ]\n\t\t\t\t\tstate = stateString;\n\n\t\t\t\t// [ reject_list | resolve_list ].disable; progress_list.lock\n\t\t\t\t}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );\n\t\t\t}\n\n\t\t\t// deferred[ resolve | reject | notify ]\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? promise : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( subordinate /* , ..., subordinateN */ ) {\n\t\tvar i = 0,\n\t\t\tresolveValues = slice.call( arguments ),\n\t\t\tlength = resolveValues.length,\n\n\t\t\t// the count of uncompleted subordinates\n\t\t\tremaining = length !== 1 ||\n\t\t\t\t( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,\n\n\t\t\t// the master Deferred.\n\t\t\t// If resolveValues consist of only a single Deferred, just use that.\n\t\t\tdeferred = remaining === 1 ? subordinate : jQuery.Deferred(),\n\n\t\t\t// Update function for both resolve and progress values\n\t\t\tupdateFunc = function( i, contexts, values ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tcontexts[ i ] = this;\n\t\t\t\t\tvalues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( values === progressValues ) {\n\t\t\t\t\t\tdeferred.notifyWith( contexts, values );\n\n\t\t\t\t\t} else if ( !( --remaining ) ) {\n\t\t\t\t\t\tdeferred.resolveWith( contexts, values );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tprogressValues, progressContexts, resolveContexts;\n\n\t\t// add listeners to Deferred subordinates; treat others as resolved\n\t\tif ( length > 1 ) {\n\t\t\tprogressValues = new Array( length );\n\t\t\tprogressContexts = new Array( length );\n\t\t\tresolveContexts = new Array( length );\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {\n\t\t\t\t\tresolveValues[ i ].promise()\n\t\t\t\t\t\t.progress( updateFunc( i, progressContexts, progressValues ) )\n\t\t\t\t\t\t.done( updateFunc( i, resolveContexts, resolveValues ) )\n\t\t\t\t\t\t.fail( deferred.reject );\n\t\t\t\t} else {\n\t\t\t\t\t--remaining;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// if we're not waiting on anything, resolve the master\n\t\tif ( !remaining ) {\n\t\t\tdeferred.resolveWith( resolveContexts, resolveValues );\n\t\t}\n\n\t\treturn deferred.promise();\n\t}\n} );\n\n\n// The deferred used on DOM ready\nvar readyList;\n\njQuery.fn.ready = function( fn ) {\n\n\t// Add the callback\n\tjQuery.ready.promise().done( fn );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Hold (or release) the ready event\n\tholdReady: function( hold ) {\n\t\tif ( hold ) {\n\t\t\tjQuery.readyWait++;\n\t\t} else {\n\t\t\tjQuery.ready( true );\n\t\t}\n\t},\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\n\t\t// Trigger any bound ready events\n\t\tif ( jQuery.fn.triggerHandler ) {\n\t\t\tjQuery( document ).triggerHandler( \"ready\" );\n\t\t\tjQuery( document ).off( \"ready\" );\n\t\t}\n\t}\n} );\n\n/**\n * Clean-up method for dom ready events\n */\nfunction detach() {\n\tif ( document.addEventListener ) {\n\t\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\t\twindow.removeEventListener( \"load\", completed );\n\n\t} else {\n\t\tdocument.detachEvent( \"onreadystatechange\", completed );\n\t\twindow.detachEvent( \"onload\", completed );\n\t}\n}\n\n/**\n * The ready event handler and self cleanup method\n */\nfunction completed() {\n\n\t// readyState === \"complete\" is good enough for us to call the dom ready in oldIE\n\tif ( document.addEventListener ||\n\t\twindow.event.type === \"load\" ||\n\t\tdocument.readyState === \"complete\" ) {\n\n\t\tdetach();\n\t\tjQuery.ready();\n\t}\n}\n\njQuery.ready.promise = function( obj ) {\n\tif ( !readyList ) {\n\n\t\treadyList = jQuery.Deferred();\n\n\t\t// Catch cases where $(document).ready() is called\n\t\t// after the browser event has already occurred.\n\t\t// Support: IE6-10\n\t\t// Older IE sometimes signals \"interactive\" too soon\n\t\tif ( document.readyState === \"complete\" ||\n\t\t\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t\t\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\t\t\twindow.setTimeout( jQuery.ready );\n\n\t\t// Standards-based browsers support DOMContentLoaded\n\t\t} else if ( document.addEventListener ) {\n\n\t\t\t// Use the handy event callback\n\t\t\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t\t\t// A fallback to window.onload, that will always work\n\t\t\twindow.addEventListener( \"load\", completed );\n\n\t\t// If IE event model is used\n\t\t} else {\n\n\t\t\t// Ensure firing before onload, maybe late but safe also for iframes\n\t\t\tdocument.attachEvent( \"onreadystatechange\", completed );\n\n\t\t\t// A fallback to window.onload, that will always work\n\t\t\twindow.attachEvent( \"onload\", completed );\n\n\t\t\t// If IE and not a frame\n\t\t\t// continually check to see if the document is ready\n\t\t\tvar top = false;\n\n\t\t\ttry {\n\t\t\t\ttop = window.frameElement == null && document.documentElement;\n\t\t\t} catch ( e ) {}\n\n\t\t\tif ( top && top.doScroll ) {\n\t\t\t\t( function doScrollCheck() {\n\t\t\t\t\tif ( !jQuery.isReady ) {\n\n\t\t\t\t\t\ttry {\n\n\t\t\t\t\t\t\t// Use the trick by Diego Perini\n\t\t\t\t\t\t\t// http://javascript.nwbox.com/IEContentLoaded/\n\t\t\t\t\t\t\ttop.doScroll( \"left\" );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn window.setTimeout( doScrollCheck, 50 );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// detach all dom ready events\n\t\t\t\t\t\tdetach();\n\n\t\t\t\t\t\t// and execute any waiting functions\n\t\t\t\t\t\tjQuery.ready();\n\t\t\t\t\t}\n\t\t\t\t} )();\n\t\t\t}\n\t\t}\n\t}\n\treturn readyList.promise( obj );\n};\n\n// Kick off the DOM ready check even if the user does not\njQuery.ready.promise();\n\n\n\n\n// Support: IE<9\n// Iteration over object's inherited properties before its own\nvar i;\nfor ( i in jQuery( support ) ) {\n\tbreak;\n}\nsupport.ownFirst = i === \"0\";\n\n// Note: most support tests are defined in their respective modules.\n// false until the test is run\nsupport.inlineBlockNeedsLayout = false;\n\n// Execute ASAP in case we need to set body.style.zoom\njQuery( function() {\n\n\t// Minified: var a,b,c,d\n\tvar val, div, body, container;\n\n\tbody = document.getElementsByTagName( \"body\" )[ 0 ];\n\tif ( !body || !body.style ) {\n\n\t\t// Return for frameset docs that don't have a body\n\t\treturn;\n\t}\n\n\t// Setup\n\tdiv = document.createElement( \"div\" );\n\tcontainer = document.createElement( \"div\" );\n\tcontainer.style.cssText = \"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\";\n\tbody.appendChild( container ).appendChild( div );\n\n\tif ( typeof div.style.zoom !== \"undefined\" ) {\n\n\t\t// Support: IE<8\n\t\t// Check if natively block-level elements act like inline-block\n\t\t// elements when setting their display to 'inline' and giving\n\t\t// them layout\n\t\tdiv.style.cssText = \"display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1\";\n\n\t\tsupport.inlineBlockNeedsLayout = val = div.offsetWidth === 3;\n\t\tif ( val ) {\n\n\t\t\t// Prevent IE 6 from affecting layout for positioned elements #11048\n\t\t\t// Prevent IE from shrinking the body in IE 7 mode #12869\n\t\t\t// Support: IE<8\n\t\t\tbody.style.zoom = 1;\n\t\t}\n\t}\n\n\tbody.removeChild( container );\n} );\n\n\n( function() {\n\tvar div = document.createElement( \"div\" );\n\n\t// Support: IE<9\n\tsupport.deleteExpando = true;\n\ttry {\n\t\tdelete div.test;\n\t} catch ( e ) {\n\t\tsupport.deleteExpando = false;\n\t}\n\n\t// Null elements to avoid leaks in IE.\n\tdiv = null;\n} )();\nvar acceptData = function( elem ) {\n\tvar noData = jQuery.noData[ ( elem.nodeName + \" \" ).toLowerCase() ],\n\t\tnodeType = +elem.nodeType || 1;\n\n\t// Do not set data on non-element DOM nodes because it will not be cleared (#8335).\n\treturn nodeType !== 1 && nodeType !== 9 ?\n\t\tfalse :\n\n\t\t// Nodes accept data unless otherwise specified; rejection can be conditional\n\t\t!noData || noData !== true && elem.getAttribute( \"classid\" ) === noData;\n};\n\n\n\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /([A-Z])/g;\n\nfunction dataAttr( elem, key, data ) {\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\n\t\tvar name = \"data-\" + key.replace( rmultiDash, \"-$1\" ).toLowerCase();\n\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = data === \"true\" ? true :\n\t\t\t\t\tdata === \"false\" ? false :\n\t\t\t\t\tdata === \"null\" ? null :\n\n\t\t\t\t\t// Only convert to a number if it doesn't change the string\n\t\t\t\t\t+data + \"\" === data ? +data :\n\t\t\t\t\trbrace.test( data ) ? jQuery.parseJSON( data ) :\n\t\t\t\t\tdata;\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tjQuery.data( elem, key, data );\n\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\n\treturn data;\n}\n\n// checks a cache object for emptiness\nfunction isEmptyDataObject( obj ) {\n\tvar name;\n\tfor ( name in obj ) {\n\n\t\t// if the public data object is empty, the private is still empty\n\t\tif ( name === \"data\" && jQuery.isEmptyObject( obj[ name ] ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( name !== \"toJSON\" ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nfunction internalData( elem, name, data, pvt /* Internal Use Only */ ) {\n\tif ( !acceptData( elem ) ) {\n\t\treturn;\n\t}\n\n\tvar ret, thisCache,\n\t\tinternalKey = jQuery.expando,\n\n\t\t// We have to handle DOM nodes and JS objects differently because IE6-7\n\t\t// can't GC object references properly across the DOM-JS boundary\n\t\tisNode = elem.nodeType,\n\n\t\t// Only DOM nodes need the global jQuery cache; JS object data is\n\t\t// attached directly to the object so GC can occur automatically\n\t\tcache = isNode ? jQuery.cache : elem,\n\n\t\t// Only defining an ID for JS objects if its cache already exists allows\n\t\t// the code to shortcut on the same path as a DOM node with no cache\n\t\tid = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;\n\n\t// Avoid doing any more work than we need to when trying to get data on an\n\t// object that has no data at all\n\tif ( ( !id || !cache[ id ] || ( !pvt && !cache[ id ].data ) ) &&\n\t\tdata === undefined && typeof name === \"string\" ) {\n\t\treturn;\n\t}\n\n\tif ( !id ) {\n\n\t\t// Only DOM nodes need a new unique ID for each element since their data\n\t\t// ends up in the global cache\n\t\tif ( isNode ) {\n\t\t\tid = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;\n\t\t} else {\n\t\t\tid = internalKey;\n\t\t}\n\t}\n\n\tif ( !cache[ id ] ) {\n\n\t\t// Avoid exposing jQuery metadata on plain JS objects when the object\n\t\t// is serialized using JSON.stringify\n\t\tcache[ id ] = isNode ? {} : { toJSON: jQuery.noop };\n\t}\n\n\t// An object can be passed to jQuery.data instead of a key/value pair; this gets\n\t// shallow copied over onto the existing cache\n\tif ( typeof name === \"object\" || typeof name === \"function\" ) {\n\t\tif ( pvt ) {\n\t\t\tcache[ id ] = jQuery.extend( cache[ id ], name );\n\t\t} else {\n\t\t\tcache[ id ].data = jQuery.extend( cache[ id ].data, name );\n\t\t}\n\t}\n\n\tthisCache = cache[ id ];\n\n\t// jQuery data() is stored in a separate object inside the object's internal data\n\t// cache in order to avoid key collisions between internal data and user-defined\n\t// data.\n\tif ( !pvt ) {\n\t\tif ( !thisCache.data ) {\n\t\t\tthisCache.data = {};\n\t\t}\n\n\t\tthisCache = thisCache.data;\n\t}\n\n\tif ( data !== undefined ) {\n\t\tthisCache[ jQuery.camelCase( name ) ] = data;\n\t}\n\n\t// Check for both converted-to-camel and non-converted data property names\n\t// If a data property was specified\n\tif ( typeof name === \"string\" ) {\n\n\t\t// First Try to find as-is property data\n\t\tret = thisCache[ name ];\n\n\t\t// Test for null|undefined property data\n\t\tif ( ret == null ) {\n\n\t\t\t// Try to find the camelCased property\n\t\t\tret = thisCache[ jQuery.camelCase( name ) ];\n\t\t}\n\t} else {\n\t\tret = thisCache;\n\t}\n\n\treturn ret;\n}\n\nfunction internalRemoveData( elem, name, pvt ) {\n\tif ( !acceptData( elem ) ) {\n\t\treturn;\n\t}\n\n\tvar thisCache, i,\n\t\tisNode = elem.nodeType,\n\n\t\t// See jQuery.data for more information\n\t\tcache = isNode ? jQuery.cache : elem,\n\t\tid = isNode ? elem[ jQuery.expando ] : jQuery.expando;\n\n\t// If there is already no cache entry for this object, there is no\n\t// purpose in continuing\n\tif ( !cache[ id ] ) {\n\t\treturn;\n\t}\n\n\tif ( name ) {\n\n\t\tthisCache = pvt ? cache[ id ] : cache[ id ].data;\n\n\t\tif ( thisCache ) {\n\n\t\t\t// Support array or space separated string names for data keys\n\t\t\tif ( !jQuery.isArray( name ) ) {\n\n\t\t\t\t// try the string as a key before any manipulation\n\t\t\t\tif ( name in thisCache ) {\n\t\t\t\t\tname = [ name ];\n\t\t\t\t} else {\n\n\t\t\t\t\t// split the camel cased version by spaces unless a key with the spaces exists\n\t\t\t\t\tname = jQuery.camelCase( name );\n\t\t\t\t\tif ( name in thisCache ) {\n\t\t\t\t\t\tname = [ name ];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tname = name.split( \" \" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// If \"name\" is an array of keys...\n\t\t\t\t// When data is initially created, via (\"key\", \"val\") signature,\n\t\t\t\t// keys will be converted to camelCase.\n\t\t\t\t// Since there is no way to tell _how_ a key was added, remove\n\t\t\t\t// both plain key and camelCase key. #12786\n\t\t\t\t// This will only penalize the array argument path.\n\t\t\t\tname = name.concat( jQuery.map( name, jQuery.camelCase ) );\n\t\t\t}\n\n\t\t\ti = name.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete thisCache[ name[ i ] ];\n\t\t\t}\n\n\t\t\t// If there is no data left in the cache, we want to continue\n\t\t\t// and let the cache object itself get destroyed\n\t\t\tif ( pvt ? !isEmptyDataObject( thisCache ) : !jQuery.isEmptyObject( thisCache ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\t// See jQuery.data for more information\n\tif ( !pvt ) {\n\t\tdelete cache[ id ].data;\n\n\t\t// Don't destroy the parent cache unless the internal data object\n\t\t// had been the only thing left in it\n\t\tif ( !isEmptyDataObject( cache[ id ] ) ) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\t// Destroy the cache\n\tif ( isNode ) {\n\t\tjQuery.cleanData( [ elem ], true );\n\n\t// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)\n\t/* jshint eqeqeq: false */\n\t} else if ( support.deleteExpando || cache != cache.window ) {\n\t\t/* jshint eqeqeq: true */\n\t\tdelete cache[ id ];\n\n\t// When all else fails, undefined\n\t} else {\n\t\tcache[ id ] = undefined;\n\t}\n}\n\njQuery.extend( {\n\tcache: {},\n\n\t// The following elements (space-suffixed to avoid Object.prototype collisions)\n\t// throw uncatchable exceptions if you attempt to set expando properties\n\tnoData: {\n\t\t\"applet \": true,\n\t\t\"embed \": true,\n\n\t\t// ...but Flash objects (which have this classid) *can* handle expandos\n\t\t\"object \": \"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"\n\t},\n\n\thasData: function( elem ) {\n\t\telem = elem.nodeType ? jQuery.cache[ elem[ jQuery.expando ] ] : elem[ jQuery.expando ];\n\t\treturn !!elem && !isEmptyDataObject( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn internalData( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\treturn internalRemoveData( elem, name );\n\t},\n\n\t// For internal use only.\n\t_data: function( elem, name, data ) {\n\t\treturn internalData( elem, name, data, true );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\treturn internalRemoveData( elem, name, true );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Special expections of .data basically thwart jQuery.access,\n\t\t// so implement the relevant behavior ourselves\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = jQuery.data( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !jQuery._data( elem, \"parsedAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE11+\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = jQuery.camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tjQuery._data( elem, \"parsedAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tjQuery.data( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn arguments.length > 1 ?\n\n\t\t\t// Sets one value\n\t\t\tthis.each( function() {\n\t\t\t\tjQuery.data( this, key, value );\n\t\t\t} ) :\n\n\t\t\t// Gets one value\n\t\t\t// Try to fetch any internally stored data first\n\t\t\telem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeData( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = jQuery._data( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || jQuery.isArray( data ) ) {\n\t\t\t\t\tqueue = jQuery._data( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// not intended for public consumption - generates a queueHooks object,\n\t// or returns the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn jQuery._data( elem, key ) || jQuery._data( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tjQuery._removeData( elem, type + \"queue\" );\n\t\t\t\tjQuery._removeData( elem, key );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = jQuery._data( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\n\n\n( function() {\n\tvar shrinkWrapBlocksVal;\n\n\tsupport.shrinkWrapBlocks = function() {\n\t\tif ( shrinkWrapBlocksVal != null ) {\n\t\t\treturn shrinkWrapBlocksVal;\n\t\t}\n\n\t\t// Will be changed later if needed.\n\t\tshrinkWrapBlocksVal = false;\n\n\t\t// Minified: var b,c,d\n\t\tvar div, body, container;\n\n\t\tbody = document.getElementsByTagName( \"body\" )[ 0 ];\n\t\tif ( !body || !body.style ) {\n\n\t\t\t// Test fired too early or in an unsupported environment, exit.\n\t\t\treturn;\n\t\t}\n\n\t\t// Setup\n\t\tdiv = document.createElement( \"div\" );\n\t\tcontainer = document.createElement( \"div\" );\n\t\tcontainer.style.cssText = \"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\";\n\t\tbody.appendChild( container ).appendChild( div );\n\n\t\t// Support: IE6\n\t\t// Check if elements with layout shrink-wrap their children\n\t\tif ( typeof div.style.zoom !== \"undefined\" ) {\n\n\t\t\t// Reset CSS: box-sizing; display; margin; border\n\t\t\tdiv.style.cssText =\n\n\t\t\t\t// Support: Firefox<29, Android 2.3\n\t\t\t\t// Vendor-prefix box-sizing\n\t\t\t\t\"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;\" +\n\t\t\t\t\"box-sizing:content-box;display:block;margin:0;border:0;\" +\n\t\t\t\t\"padding:1px;width:1px;zoom:1\";\n\t\t\tdiv.appendChild( document.createElement( \"div\" ) ).style.width = \"5px\";\n\t\t\tshrinkWrapBlocksVal = div.offsetWidth !== 3;\n\t\t}\n\n\t\tbody.removeChild( container );\n\n\t\treturn shrinkWrapBlocksVal;\n\t};\n\n} )();\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar isHidden = function( elem, el ) {\n\n\t\t// isHidden might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\t\treturn jQuery.css( elem, \"display\" ) === \"none\" ||\n\t\t\t!jQuery.contains( elem.ownerDocument, elem );\n\t};\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted,\n\t\tscale = 1,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() { return tween.cur(); } :\n\t\t\tfunction() { return jQuery.css( elem, prop, \"\" ); },\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = ( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\tdo {\n\n\t\t\t// If previous iteration zeroed out, double until we get *something*.\n\t\t\t// Use string for doubling so we don't accidentally see scale as unchanged below\n\t\t\tscale = scale || \".5\";\n\n\t\t\t// Adjust and apply\n\t\t\tinitialInUnit = initialInUnit / scale;\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Update scale, tolerating zero or NaN from tween.cur()\n\t\t// Break the loop if scale is unchanged or perfect, or if we've just had enough.\n\t\t} while (\n\t\t\tscale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations\n\t\t);\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlength = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( jQuery.type( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !jQuery.isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ],\n\t\t\t\t\tkey,\n\t\t\t\t\traw ? value : value.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn chainable ?\n\t\telems :\n\n\t\t// Gets\n\t\tbulk ?\n\t\t\tfn.call( elems ) :\n\t\t\tlength ? fn( elems[ 0 ], key ) : emptyGet;\n};\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([\\w:-]+)/ );\n\nvar rscriptType = ( /^$|\\/(?:java|ecma)script/i );\n\nvar rleadingWhitespace = ( /^\\s+/ );\n\nvar nodeNames = \"abbr|article|aside|audio|bdi|canvas|data|datalist|\" +\n\t\t\"details|dialog|figcaption|figure|footer|header|hgroup|main|\" +\n\t\t\"mark|meter|nav|output|picture|progress|section|summary|template|time|video\";\n\n\n\nfunction createSafeFragment( document ) {\n\tvar list = nodeNames.split( \"|\" ),\n\t\tsafeFrag = document.createDocumentFragment();\n\n\tif ( safeFrag.createElement ) {\n\t\twhile ( list.length ) {\n\t\t\tsafeFrag.createElement(\n\t\t\t\tlist.pop()\n\t\t\t);\n\t\t}\n\t}\n\treturn safeFrag;\n}\n\n\n( function() {\n\tvar div = document.createElement( \"div\" ),\n\t\tfragment = document.createDocumentFragment(),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Setup\n\tdiv.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\";\n\n\t// IE strips leading whitespace when .innerHTML is used\n\tsupport.leadingWhitespace = div.firstChild.nodeType === 3;\n\n\t// Make sure that tbody elements aren't automatically inserted\n\t// IE will insert them into empty tables\n\tsupport.tbody = !div.getElementsByTagName( \"tbody\" ).length;\n\n\t// Make sure that link elements get serialized correctly by innerHTML\n\t// This requires a wrapper element in IE\n\tsupport.htmlSerialize = !!div.getElementsByTagName( \"link\" ).length;\n\n\t// Makes sure cloning an html5 element does not cause problems\n\t// Where outerHTML is undefined, this still works\n\tsupport.html5Clone =\n\t\tdocument.createElement( \"nav\" ).cloneNode( true ).outerHTML !== \"<:nav></:nav>\";\n\n\t// Check if a disconnected checkbox will retain its checked\n\t// value of true after appended to the DOM (IE6/7)\n\tinput.type = \"checkbox\";\n\tinput.checked = true;\n\tfragment.appendChild( input );\n\tsupport.appendChecked = input.checked;\n\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\t// Support: IE6-IE11+\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n\n\t// #11217 - WebKit loses check when the name is after the checked attribute\n\tfragment.appendChild( div );\n\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput = document.createElement( \"input\" );\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3\n\t// old WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE<9\n\t// Cloned elements keep attachEvent handlers, we use addEventListener on IE9+\n\tsupport.noCloneEvent = !!div.addEventListener;\n\n\t// Support: IE<9\n\t// Since attributes and properties are the same in IE,\n\t// cleanData must set properties to undefined rather than use removeAttribute\n\tdiv[ jQuery.expando ] = 1;\n\tsupport.attributes = !div.getAttribute( jQuery.expando );\n} )();\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\n\tlegend: [ 1, \"<fieldset>\", \"</fieldset>\" ],\n\tarea: [ 1, \"<map>\", \"</map>\" ],\n\n\t// Support: IE8\n\tparam: [ 1, \"<object>\", \"</object>\" ],\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\tcol: [ 2, \"<table><tbody></tbody><colgroup>\", \"</colgroup></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,\n\t// unless wrapped in a div with non-breaking characters in front of it.\n\t_default: support.htmlSerialize ? [ 0, \"\", \"\" ] : [ 1, \"X<div>\", \"</div>\" ]\n};\n\n// Support: IE8-IE9\nwrapMap.optgroup = wrapMap.option;\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction getAll( context, tag ) {\n\tvar elems, elem,\n\t\ti = 0,\n\t\tfound = typeof context.getElementsByTagName !== \"undefined\" ?\n\t\t\tcontext.getElementsByTagName( tag || \"*\" ) :\n\t\t\ttypeof context.querySelectorAll !== \"undefined\" ?\n\t\t\t\tcontext.querySelectorAll( tag || \"*\" ) :\n\t\t\t\tundefined;\n\n\tif ( !found ) {\n\t\tfor ( found = [], elems = context.childNodes || context;\n\t\t\t( elem = elems[ i ] ) != null;\n\t\t\ti++\n\t\t) {\n\t\t\tif ( !tag || jQuery.nodeName( elem, tag ) ) {\n\t\t\t\tfound.push( elem );\n\t\t\t} else {\n\t\t\t\tjQuery.merge( found, getAll( elem, tag ) );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn tag === undefined || tag && jQuery.nodeName( context, tag ) ?\n\t\tjQuery.merge( [ context ], found ) :\n\t\tfound;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar elem,\n\t\ti = 0;\n\tfor ( ; ( elem = elems[ i ] ) != null; i++ ) {\n\t\tjQuery._data(\n\t\t\telem,\n\t\t\t\"globalEval\",\n\t\t\t!refElements || jQuery._data( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/,\n\trtbody = /<tbody/i;\n\nfunction fixDefaultChecked( elem ) {\n\tif ( rcheckableType.test( elem.type ) ) {\n\t\telem.defaultChecked = elem.checked;\n\t}\n}\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar j, elem, contains,\n\t\ttmp, tag, tbody, wrap,\n\t\tl = elems.length,\n\n\t\t// Ensure a safe fragment\n\t\tsafe = createSafeFragment( context ),\n\n\t\tnodes = [],\n\t\ti = 0;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( jQuery.type( elem ) === \"object\" ) {\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || safe.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Manually add leading whitespace removed by IE\n\t\t\t\tif ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {\n\t\t\t\t\tnodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[ 0 ] ) );\n\t\t\t\t}\n\n\t\t\t\t// Remove IE's autoinserted <tbody> from table fragments\n\t\t\t\tif ( !support.tbody ) {\n\n\t\t\t\t\t// String was a <table>, *may* have spurious <tbody>\n\t\t\t\t\telem = tag === \"table\" && !rtbody.test( elem ) ?\n\t\t\t\t\t\ttmp.firstChild :\n\n\t\t\t\t\t\t// String was a bare <thead> or <tfoot>\n\t\t\t\t\t\twrap[ 1 ] === \"<table>\" && !rtbody.test( elem ) ?\n\t\t\t\t\t\t\ttmp :\n\t\t\t\t\t\t\t0;\n\n\t\t\t\t\tj = elem && elem.childNodes.length;\n\t\t\t\t\twhile ( j-- ) {\n\t\t\t\t\t\tif ( jQuery.nodeName( ( tbody = elem.childNodes[ j ] ), \"tbody\" ) &&\n\t\t\t\t\t\t\t!tbody.childNodes.length ) {\n\n\t\t\t\t\t\t\telem.removeChild( tbody );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Fix #12392 for WebKit and IE > 9\n\t\t\t\ttmp.textContent = \"\";\n\n\t\t\t\t// Fix #12392 for oldIE\n\t\t\t\twhile ( tmp.firstChild ) {\n\t\t\t\t\ttmp.removeChild( tmp.firstChild );\n\t\t\t\t}\n\n\t\t\t\t// Remember the top-level container for proper cleanup\n\t\t\t\ttmp = safe.lastChild;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Fix #11356: Clear elements from fragment\n\tif ( tmp ) {\n\t\tsafe.removeChild( tmp );\n\t}\n\n\t// Reset defaultChecked for any radios and checkboxes\n\t// about to be appended to the DOM in IE 6/7 (#8060)\n\tif ( !support.appendChecked ) {\n\t\tjQuery.grep( getAll( nodes, \"input\" ), fixDefaultChecked );\n\t}\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tcontains = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( safe.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( contains ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\ttmp = null;\n\n\treturn safe;\n}\n\n\n( function() {\n\tvar i, eventName,\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Support: IE<9 (lack submit/change bubble), Firefox (lack focus(in | out) events)\n\tfor ( i in { submit: true, change: true, focusin: true } ) {\n\t\teventName = \"on\" + i;\n\n\t\tif ( !( support[ i ] = eventName in window ) ) {\n\n\t\t\t// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)\n\t\t\tdiv.setAttribute( eventName, \"t\" );\n\t\t\tsupport[ i ] = div.attributes[ eventName ].expando === false;\n\t\t}\n\t}\n\n\t// Null elements to avoid leaks in IE.\n\tdiv = null;\n} )();\n\n\nvar rformElems = /^(?:input|select|textarea)$/i,\n\trkeyEvent = /^key/,\n\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n\trfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE9\n// See #13393 for more info\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\t\tvar tmp, events, t, handleObjIn,\n\t\t\tspecial, eventHandle, handleObj,\n\t\t\thandlers, type, namespaces, origType,\n\t\t\telemData = jQuery._data( elem );\n\n\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\tif ( !elemData ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = {};\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" &&\n\t\t\t\t\t( !e || jQuery.event.triggered !== e.type ) ?\n\t\t\t\t\tjQuery.event.dispatch.apply( eventHandle.elem, arguments ) :\n\t\t\t\t\tundefined;\n\t\t\t};\n\n\t\t\t// Add elem as a property of the handle fn to prevent a memory leak\n\t\t\t// with IE non-native events\n\t\t\teventHandle.elem = elem;\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnotwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener/attachEvent if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\t// Bind the global event handler to the element\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle, false );\n\n\t\t\t\t\t} else if ( elem.attachEvent ) {\n\t\t\t\t\t\telem.attachEvent( \"on\" + type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t\t// Nullify elem to prevent memory leaks in IE\n\t\telem = null;\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\t\tvar j, handleObj, tmp,\n\t\t\torigCount, t, events,\n\t\t\tspecial, handlers, type,\n\t\t\tnamespaces, origType,\n\t\t\telemData = jQuery.hasData( elem ) && jQuery._data( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnotwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdelete elemData.handle;\n\n\t\t\t// removeData also checks for emptiness and clears the expando if empty\n\t\t\t// so use it instead of delete\n\t\t\tjQuery._removeData( elem, \"events\" );\n\t\t}\n\t},\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\t\tvar handle, ontype, cur,\n\t\t\tbubbleType, special, tmp, i,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( jQuery._data( cur, \"events\" ) || {} )[ event.type ] &&\n\t\t\t\tjQuery._data( cur, \"handle\" );\n\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif (\n\t\t\t\t( !special._default ||\n\t\t\t\t special._default.apply( eventPath.pop(), data ) === false\n\t\t\t\t) && acceptData( elem )\n\t\t\t) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name name as the event.\n\t\t\t\t// Can't use an .isFunction() check here because IE6/7 fails that test.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\t\t\t\t\ttry {\n\t\t\t\t\t\telem[ type ]();\n\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t// IE<9 dies on focus/blur to hidden element (#1486,#12518)\n\t\t\t\t\t\t// only reproducible on winXP IE8 native, not IE9 in IE8 mode\n\t\t\t\t\t}\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\tdispatch: function( event ) {\n\n\t\t// Make a writable jQuery.Event from the native event object\n\t\tevent = jQuery.event.fix( event );\n\n\t\tvar i, j, ret, matched, handleObj,\n\t\t\thandlerQueue = [],\n\t\t\targs = slice.call( arguments ),\n\t\t\thandlers = ( jQuery._data( this, \"events\" ) || {} )[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// Triggered event must either 1) have no namespace, or 2) have namespace(s)\n\t\t\t\t// a subset or equal to those in the bound event (both can have no namespace).\n\t\t\t\tif ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, matches, sel, handleObj,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Support (at least): Chrome, IE9\n\t\t// Find delegate handlers\n\t\t// Black-hole SVG <use> instance trees (#13180)\n\t\t//\n\t\t// Support: Firefox<=42+\n\t\t// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)\n\t\tif ( delegateCount && cur.nodeType &&\n\t\t\t( event.type !== \"click\" || isNaN( event.button ) || event.button < 1 ) ) {\n\n\t\t\t/* jshint eqeqeq: false */\n\t\t\tfor ( ; cur != this; cur = cur.parentNode || this ) {\n\t\t\t\t/* jshint eqeqeq: true */\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== \"click\" ) ) {\n\t\t\t\t\tmatches = [];\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matches[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatches[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matches[ sel ] ) {\n\t\t\t\t\t\t\tmatches.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matches.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matches } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\tfix: function( event ) {\n\t\tif ( event[ jQuery.expando ] ) {\n\t\t\treturn event;\n\t\t}\n\n\t\t// Create a writable copy of the event object and normalize some properties\n\t\tvar i, prop, copy,\n\t\t\ttype = event.type,\n\t\t\toriginalEvent = event,\n\t\t\tfixHook = this.fixHooks[ type ];\n\n\t\tif ( !fixHook ) {\n\t\t\tthis.fixHooks[ type ] = fixHook =\n\t\t\t\trmouseEvent.test( type ) ? this.mouseHooks :\n\t\t\t\trkeyEvent.test( type ) ? this.keyHooks :\n\t\t\t\t{};\n\t\t}\n\t\tcopy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;\n\n\t\tevent = new jQuery.Event( originalEvent );\n\n\t\ti = copy.length;\n\t\twhile ( i-- ) {\n\t\t\tprop = copy[ i ];\n\t\t\tevent[ prop ] = originalEvent[ prop ];\n\t\t}\n\n\t\t// Support: IE<9\n\t\t// Fix target property (#1925)\n\t\tif ( !event.target ) {\n\t\t\tevent.target = originalEvent.srcElement || document;\n\t\t}\n\n\t\t// Support: Safari 6-8+\n\t\t// Target should not be a text node (#504, #13143)\n\t\tif ( event.target.nodeType === 3 ) {\n\t\t\tevent.target = event.target.parentNode;\n\t\t}\n\n\t\t// Support: IE<9\n\t\t// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)\n\t\tevent.metaKey = !!event.metaKey;\n\n\t\treturn fixHook.filter ? fixHook.filter( event, originalEvent ) : event;\n\t},\n\n\t// Includes some event props shared by KeyEvent and MouseEvent\n\tprops: ( \"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase \" +\n\t\t\"metaKey relatedTarget shiftKey target timeStamp view which\" ).split( \" \" ),\n\n\tfixHooks: {},\n\n\tkeyHooks: {\n\t\tprops: \"char charCode key keyCode\".split( \" \" ),\n\t\tfilter: function( event, original ) {\n\n\t\t\t// Add which for key events\n\t\t\tif ( event.which == null ) {\n\t\t\t\tevent.which = original.charCode != null ? original.charCode : original.keyCode;\n\t\t\t}\n\n\t\t\treturn event;\n\t\t}\n\t},\n\n\tmouseHooks: {\n\t\tprops: ( \"button buttons clientX clientY fromElement offsetX offsetY \" +\n\t\t\t\"pageX pageY screenX screenY toElement\" ).split( \" \" ),\n\t\tfilter: function( event, original ) {\n\t\t\tvar body, eventDoc, doc,\n\t\t\t\tbutton = original.button,\n\t\t\t\tfromElement = original.fromElement;\n\n\t\t\t// Calculate pageX/Y if missing and clientX/Y available\n\t\t\tif ( event.pageX == null && original.clientX != null ) {\n\t\t\t\teventDoc = event.target.ownerDocument || document;\n\t\t\t\tdoc = eventDoc.documentElement;\n\t\t\t\tbody = eventDoc.body;\n\n\t\t\t\tevent.pageX = original.clientX +\n\t\t\t\t\t( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -\n\t\t\t\t\t( doc && doc.clientLeft || body && body.clientLeft || 0 );\n\t\t\t\tevent.pageY = original.clientY +\n\t\t\t\t\t( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -\n\t\t\t\t\t( doc && doc.clientTop  || body && body.clientTop  || 0 );\n\t\t\t}\n\n\t\t\t// Add relatedTarget, if necessary\n\t\t\tif ( !event.relatedTarget && fromElement ) {\n\t\t\t\tevent.relatedTarget = fromElement === event.target ?\n\t\t\t\t\toriginal.toElement :\n\t\t\t\t\tfromElement;\n\t\t\t}\n\n\t\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\t\t// Note: button is not normalized, so don't use it\n\t\t\tif ( !event.which && button !== undefined ) {\n\t\t\t\tevent.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );\n\t\t\t}\n\n\t\t\treturn event;\n\t\t}\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tfocus: {\n\n\t\t\t// Fire native event if possible so blur/focus sequence is correct\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this !== safeActiveElement() && this.focus ) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis.focus();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t// Support: IE<9\n\t\t\t\t\t\t// If we error on focus to hidden element (#1486, #12518),\n\t\t\t\t\t\t// let .trigger() run the handlers\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusin\"\n\t\t},\n\t\tblur: {\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this === safeActiveElement() && this.blur ) {\n\t\t\t\t\tthis.blur();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusout\"\n\t\t},\n\t\tclick: {\n\n\t\t\t// For checkbox, fire native event so checked state will be right\n\t\t\ttrigger: function() {\n\t\t\t\tif ( jQuery.nodeName( this, \"input\" ) && this.type === \"checkbox\" && this.click ) {\n\t\t\t\t\tthis.click();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, don't fire native .click() on links\n\t\t\t_default: function( event ) {\n\t\t\t\treturn jQuery.nodeName( event.target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\n\t\t\t\t// Previously, `originalEvent: {}` was set here, so stopPropagation call\n\t\t\t\t// would not be triggered on donor event, since in our own\n\t\t\t\t// jQuery.event.stopPropagation function we had a check for existence of\n\t\t\t\t// originalEvent.stopPropagation method, so, consequently it would be a noop.\n\t\t\t\t//\n\t\t\t\t// Guard for simulated events was moved to jQuery.event.stopPropagation function\n\t\t\t\t// since `originalEvent` should point to the original event for the\n\t\t\t\t// constancy with other events and for more focused logic\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\n\t\tif ( e.isDefaultPrevented() ) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n};\n\njQuery.removeEvent = document.removeEventListener ?\n\tfunction( elem, type, handle ) {\n\n\t\t// This \"if\" is needed for plain objects\n\t\tif ( elem.removeEventListener ) {\n\t\t\telem.removeEventListener( type, handle );\n\t\t}\n\t} :\n\tfunction( elem, type, handle ) {\n\t\tvar name = \"on\" + type;\n\n\t\tif ( elem.detachEvent ) {\n\n\t\t\t// #8545, #7054, preventing memory leaks for custom events in IE6-8\n\t\t\t// detachEvent needed property on element, by name of that event,\n\t\t\t// to properly expose it to GC\n\t\t\tif ( typeof elem[ name ] === \"undefined\" ) {\n\t\t\t\telem[ name ] = null;\n\t\t\t}\n\n\t\t\telem.detachEvent( name, handle );\n\t\t}\n\t};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: IE < 9, Android < 4.0\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || jQuery.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\t\tif ( !e ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If preventDefault exists, run it on the original event\n\t\tif ( e.preventDefault ) {\n\t\t\te.preventDefault();\n\n\t\t// Support: IE\n\t\t// Otherwise set the returnValue property of the original event to false\n\t\t} else {\n\t\t\te.returnValue = false;\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( !e || this.isSimulated ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If stopPropagation exists, run it on the original event\n\t\tif ( e.stopPropagation ) {\n\t\t\te.stopPropagation();\n\t\t}\n\n\t\t// Support: IE\n\t\t// Set the cancelBubble property of the original event to true\n\t\te.cancelBubble = true;\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && e.stopImmediatePropagation ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://code.google.com/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\n// IE submit delegation\nif ( !support.submit ) {\n\n\tjQuery.event.special.submit = {\n\t\tsetup: function() {\n\n\t\t\t// Only need this for delegated form submit events\n\t\t\tif ( jQuery.nodeName( this, \"form\" ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Lazy-add a submit handler when a descendant form may potentially be submitted\n\t\t\tjQuery.event.add( this, \"click._submit keypress._submit\", function( e ) {\n\n\t\t\t\t// Node name check avoids a VML-related crash in IE (#9807)\n\t\t\t\tvar elem = e.target,\n\t\t\t\t\tform = jQuery.nodeName( elem, \"input\" ) || jQuery.nodeName( elem, \"button\" ) ?\n\n\t\t\t\t\t\t// Support: IE <=8\n\t\t\t\t\t\t// We use jQuery.prop instead of elem.form\n\t\t\t\t\t\t// to allow fixing the IE8 delegated submit issue (gh-2332)\n\t\t\t\t\t\t// by 3rd party polyfills/workarounds.\n\t\t\t\t\t\tjQuery.prop( elem, \"form\" ) :\n\t\t\t\t\t\tundefined;\n\n\t\t\t\tif ( form && !jQuery._data( form, \"submit\" ) ) {\n\t\t\t\t\tjQuery.event.add( form, \"submit._submit\", function( event ) {\n\t\t\t\t\t\tevent._submitBubble = true;\n\t\t\t\t\t} );\n\t\t\t\t\tjQuery._data( form, \"submit\", true );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t// return undefined since we don't need an event listener\n\t\t},\n\n\t\tpostDispatch: function( event ) {\n\n\t\t\t// If form was submitted by the user, bubble the event up the tree\n\t\t\tif ( event._submitBubble ) {\n\t\t\t\tdelete event._submitBubble;\n\t\t\t\tif ( this.parentNode && !event.isTrigger ) {\n\t\t\t\t\tjQuery.event.simulate( \"submit\", this.parentNode, event );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tteardown: function() {\n\n\t\t\t// Only need this for delegated form submit events\n\t\t\tif ( jQuery.nodeName( this, \"form\" ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Remove delegated handlers; cleanData eventually reaps submit handlers attached above\n\t\t\tjQuery.event.remove( this, \"._submit\" );\n\t\t}\n\t};\n}\n\n// IE change delegation and checkbox/radio fix\nif ( !support.change ) {\n\n\tjQuery.event.special.change = {\n\n\t\tsetup: function() {\n\n\t\t\tif ( rformElems.test( this.nodeName ) ) {\n\n\t\t\t\t// IE doesn't fire change on a check/radio until blur; trigger it on click\n\t\t\t\t// after a propertychange. Eat the blur-change in special.change.handle.\n\t\t\t\t// This still fires onchange a second time for check/radio after blur.\n\t\t\t\tif ( this.type === \"checkbox\" || this.type === \"radio\" ) {\n\t\t\t\t\tjQuery.event.add( this, \"propertychange._change\", function( event ) {\n\t\t\t\t\t\tif ( event.originalEvent.propertyName === \"checked\" ) {\n\t\t\t\t\t\t\tthis._justChanged = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t\tjQuery.event.add( this, \"click._change\", function( event ) {\n\t\t\t\t\t\tif ( this._justChanged && !event.isTrigger ) {\n\t\t\t\t\t\t\tthis._justChanged = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Allow triggered, simulated change events (#11500)\n\t\t\t\t\t\tjQuery.event.simulate( \"change\", this, event );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Delegated event; lazy-add a change handler on descendant inputs\n\t\t\tjQuery.event.add( this, \"beforeactivate._change\", function( e ) {\n\t\t\t\tvar elem = e.target;\n\n\t\t\t\tif ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, \"change\" ) ) {\n\t\t\t\t\tjQuery.event.add( elem, \"change._change\", function( event ) {\n\t\t\t\t\t\tif ( this.parentNode && !event.isSimulated && !event.isTrigger ) {\n\t\t\t\t\t\t\tjQuery.event.simulate( \"change\", this.parentNode, event );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t\tjQuery._data( elem, \"change\", true );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\thandle: function( event ) {\n\t\t\tvar elem = event.target;\n\n\t\t\t// Swallow native change events from checkbox/radio, we already triggered them above\n\t\t\tif ( this !== elem || event.isSimulated || event.isTrigger ||\n\t\t\t\t( elem.type !== \"radio\" && elem.type !== \"checkbox\" ) ) {\n\n\t\t\t\treturn event.handleObj.handler.apply( this, arguments );\n\t\t\t}\n\t\t},\n\n\t\tteardown: function() {\n\t\t\tjQuery.event.remove( this, \"._change\" );\n\n\t\t\treturn !rformElems.test( this.nodeName );\n\t\t}\n\t};\n}\n\n// Support: Firefox\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome, Safari\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = jQuery._data( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tjQuery._data( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = jQuery._data( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tjQuery._removeData( doc, fix );\n\t\t\t\t} else {\n\t\t\t\t\tjQuery._data( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t},\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\nvar rinlinejQuery = / jQuery\\d+=\"(?:null|\\d+)\"/g,\n\trnoshimcache = new RegExp( \"<(?:\" + nodeNames + \")[\\\\s/>]\", \"i\" ),\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:-]+)[^>]*)\\/>/gi,\n\n\t// Support: IE 10-11, Edge 10240+\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trscriptTypeMasked = /^true\\/(.*)/,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,\n\tsafeFragment = createSafeFragment( document ),\n\tfragmentDiv = safeFragment.appendChild( document.createElement( \"div\" ) );\n\n// Support: IE<8\n// Manipulating tables requires a tbody\nfunction manipulationTarget( elem, content ) {\n\treturn jQuery.nodeName( elem, \"table\" ) &&\n\t\tjQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ?\n\n\t\telem.getElementsByTagName( \"tbody\" )[ 0 ] ||\n\t\t\telem.appendChild( elem.ownerDocument.createElement( \"tbody\" ) ) :\n\t\telem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( jQuery.find.attr( elem, \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tvar match = rscriptTypeMasked.exec( elem.type );\n\tif ( match ) {\n\t\telem.type = match[ 1 ];\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tif ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {\n\t\treturn;\n\t}\n\n\tvar type, i, l,\n\t\toldData = jQuery._data( src ),\n\t\tcurData = jQuery._data( dest, oldData ),\n\t\tevents = oldData.events;\n\n\tif ( events ) {\n\t\tdelete curData.handle;\n\t\tcurData.events = {};\n\n\t\tfor ( type in events ) {\n\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t// make the cloned public data object a copy from the original\n\tif ( curData.data ) {\n\t\tcurData.data = jQuery.extend( {}, curData.data );\n\t}\n}\n\nfunction fixCloneNodeIssues( src, dest ) {\n\tvar nodeName, e, data;\n\n\t// We do not need to do anything for non-Elements\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\tnodeName = dest.nodeName.toLowerCase();\n\n\t// IE6-8 copies events bound via attachEvent when using cloneNode.\n\tif ( !support.noCloneEvent && dest[ jQuery.expando ] ) {\n\t\tdata = jQuery._data( dest );\n\n\t\tfor ( e in data.events ) {\n\t\t\tjQuery.removeEvent( dest, e, data.handle );\n\t\t}\n\n\t\t// Event data gets referenced instead of copied if the expando gets copied too\n\t\tdest.removeAttribute( jQuery.expando );\n\t}\n\n\t// IE blanks contents when cloning scripts, and tries to evaluate newly-set text\n\tif ( nodeName === \"script\" && dest.text !== src.text ) {\n\t\tdisableScript( dest ).text = src.text;\n\t\trestoreScript( dest );\n\n\t// IE6-10 improperly clones children of object elements using classid.\n\t// IE10 throws NoModificationAllowedError if parent is null, #12132.\n\t} else if ( nodeName === \"object\" ) {\n\t\tif ( dest.parentNode ) {\n\t\t\tdest.outerHTML = src.outerHTML;\n\t\t}\n\n\t\t// This path appears unavoidable for IE9. When cloning an object\n\t\t// element in IE9, the outerHTML strategy above is not sufficient.\n\t\t// If the src has innerHTML and the destination does not,\n\t\t// copy the src.innerHTML into the dest.innerHTML. #10324\n\t\tif ( support.html5Clone && ( src.innerHTML && !jQuery.trim( dest.innerHTML ) ) ) {\n\t\t\tdest.innerHTML = src.innerHTML;\n\t\t}\n\n\t} else if ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\n\t\t// IE6-8 fails to persist the checked state of a cloned checkbox\n\t\t// or radio button. Worse, IE6-7 fail to give the cloned element\n\t\t// a checked appearance if the defaultChecked value isn't also set\n\n\t\tdest.defaultChecked = dest.checked = src.checked;\n\n\t\t// IE6-7 get confused and end up setting the value of a cloned\n\t\t// checkbox/radio button to an empty string instead of \"on\"\n\t\tif ( dest.value !== src.value ) {\n\t\t\tdest.value = src.value;\n\t\t}\n\n\t// IE6-8 fails to return the selected option to the default selected\n\t// state when cloning options\n\t} else if ( nodeName === \"option\" ) {\n\t\tdest.defaultSelected = dest.selected = src.defaultSelected;\n\n\t// IE6-8 fails to set the defaultValue to the correct value when\n\t// cloning other types of input fields\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = concat.apply( [], args );\n\n\tvar first, node, hasScripts,\n\t\tscripts, doc, fragment,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tisFunction = jQuery.isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( isFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( isFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android<4.1, PhantomJS<2\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!jQuery._data( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjQuery.globalEval(\n\t\t\t\t\t\t\t\t( node.text || node.textContent || node.innerHTML || \"\" )\n\t\t\t\t\t\t\t\t\t.replace( rcleanScript, \"\" )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Fix #11809: Avoid leaking memory\n\t\t\tfragment = first = null;\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\telems = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = elems[ i ] ) != null; i++ ) {\n\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && jQuery.contains( node.ownerDocument, node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html.replace( rxhtmlTag, \"<$1></$2>\" );\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar destElements, node, clone, i, srcElements,\n\t\t\tinPage = jQuery.contains( elem.ownerDocument, elem );\n\n\t\tif ( support.html5Clone || jQuery.isXMLDoc( elem ) ||\n\t\t\t!rnoshimcache.test( \"<\" + elem.nodeName + \">\" ) ) {\n\n\t\t\tclone = elem.cloneNode( true );\n\n\t\t// IE<=8 does not properly clone detached, unknown element nodes\n\t\t} else {\n\t\t\tfragmentDiv.innerHTML = elem.outerHTML;\n\t\t\tfragmentDiv.removeChild( clone = fragmentDiv.firstChild );\n\t\t}\n\n\t\tif ( ( !support.noCloneEvent || !support.noCloneChecked ) &&\n\t\t\t\t( elem.nodeType === 1 || elem.nodeType === 11 ) && !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\t// Fix all IE cloning issues\n\t\t\tfor ( i = 0; ( node = srcElements[ i ] ) != null; ++i ) {\n\n\t\t\t\t// Ensure that the destination node is not null; Fixes #9587\n\t\t\t\tif ( destElements[ i ] ) {\n\t\t\t\t\tfixCloneNodeIssues( node, destElements[ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0; ( node = srcElements[ i ] ) != null; i++ ) {\n\t\t\t\t\tcloneCopyEvent( node, destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\tdestElements = srcElements = node = null;\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems, /* internal */ forceAcceptData ) {\n\t\tvar elem, type, id, data,\n\t\t\ti = 0,\n\t\t\tinternalKey = jQuery.expando,\n\t\t\tcache = jQuery.cache,\n\t\t\tattributes = support.attributes,\n\t\t\tspecial = jQuery.event.special;\n\n\t\tfor ( ; ( elem = elems[ i ] ) != null; i++ ) {\n\t\t\tif ( forceAcceptData || acceptData( elem ) ) {\n\n\t\t\t\tid = elem[ internalKey ];\n\t\t\t\tdata = id && cache[ id ];\n\n\t\t\t\tif ( data ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Remove cache only if it was not already removed by jQuery.event.remove\n\t\t\t\t\tif ( cache[ id ] ) {\n\n\t\t\t\t\t\tdelete cache[ id ];\n\n\t\t\t\t\t\t// Support: IE<9\n\t\t\t\t\t\t// IE does not allow us to delete expando properties from nodes\n\t\t\t\t\t\t// IE creates expando attributes along with the property\n\t\t\t\t\t\t// IE does not have a removeAttribute function on Document nodes\n\t\t\t\t\t\tif ( !attributes && typeof elem.removeAttribute !== \"undefined\" ) {\n\t\t\t\t\t\t\telem.removeAttribute( internalKey );\n\n\t\t\t\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t\t\t\t// https://code.google.com/p/chromium/issues/detail?id=378607\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\telem[ internalKey ] = undefined;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdeletedIds.push( id );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\n\t// Keep domManip exposed until 3.0 (gh-2225)\n\tdomManip: domManip,\n\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().append(\n\t\t\t\t\t( this[ 0 ] && this[ 0 ].ownerDocument || document ).createTextNode( value )\n\t\t\t\t);\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\n\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t}\n\n\t\t\t// Remove any remaining nodes\n\t\t\twhile ( elem.firstChild ) {\n\t\t\t\telem.removeChild( elem.firstChild );\n\t\t\t}\n\n\t\t\t// If this is a select, ensure that it displays empty (#12336)\n\t\t\t// Support: IE<9\n\t\t\tif ( elem.options && jQuery.nodeName( elem, \"select\" ) ) {\n\t\t\t\telem.options.length = 0;\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined ) {\n\t\t\t\treturn elem.nodeType === 1 ?\n\t\t\t\t\telem.innerHTML.replace( rinlinejQuery, \"\" ) :\n\t\t\t\t\tundefined;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t( support.htmlSerialize || !rnoshimcache.test( value )  ) &&\n\t\t\t\t( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\telem = this[ i ] || {};\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\ti = 0,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\n\n\nvar iframe,\n\telemdisplay = {\n\n\t\t// Support: Firefox\n\t\t// We have to pre-define these values for FF (#10227)\n\t\tHTML: \"block\",\n\t\tBODY: \"block\"\n\t};\n\n/**\n * Retrieve the actual display of a element\n * @param {String} name nodeName of the element\n * @param {Object} doc Document object\n */\n\n// Called only from within defaultDisplay\nfunction actualDisplay( name, doc ) {\n\tvar elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),\n\n\t\tdisplay = jQuery.css( elem[ 0 ], \"display\" );\n\n\t// We don't have any data stored on the element,\n\t// so use \"detach\" method as fast way to get rid of the element\n\telem.detach();\n\n\treturn display;\n}\n\n/**\n * Try to determine the default display value of an element\n * @param {String} nodeName\n */\nfunction defaultDisplay( nodeName ) {\n\tvar doc = document,\n\t\tdisplay = elemdisplay[ nodeName ];\n\n\tif ( !display ) {\n\t\tdisplay = actualDisplay( nodeName, doc );\n\n\t\t// If the simple way fails, read from inside an iframe\n\t\tif ( display === \"none\" || !display ) {\n\n\t\t\t// Use the already-created iframe if possible\n\t\t\tiframe = ( iframe || jQuery( \"<iframe frameborder='0' width='0' height='0'/>\" ) )\n\t\t\t\t.appendTo( doc.documentElement );\n\n\t\t\t// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse\n\t\t\tdoc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;\n\n\t\t\t// Support: IE\n\t\t\tdoc.write();\n\t\t\tdoc.close();\n\n\t\t\tdisplay = actualDisplay( nodeName, doc );\n\t\t\tiframe.detach();\n\t\t}\n\n\t\t// Store the correct default display\n\t\telemdisplay[ nodeName ] = display;\n\t}\n\n\treturn display;\n}\nvar rmargin = ( /^margin/ );\n\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar swap = function( elem, options, callback, args ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.apply( elem, args || [] );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\nvar documentElement = document.documentElement;\n\n\n\n( function() {\n\tvar pixelPositionVal, pixelMarginRightVal, boxSizingReliableVal,\n\t\treliableHiddenOffsetsVal, reliableMarginRightVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\tdiv.style.cssText = \"float:left;opacity:.5\";\n\n\t// Support: IE<9\n\t// Make sure that element opacity exists (as opposed to filter)\n\tsupport.opacity = div.style.opacity === \"0.5\";\n\n\t// Verify style float existence\n\t// (IE uses styleFloat instead of cssFloat)\n\tsupport.cssFloat = !!div.style.cssFloat;\n\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tcontainer = document.createElement( \"div\" );\n\tcontainer.style.cssText = \"border:0;width:8px;height:0;top:0;left:-9999px;\" +\n\t\t\"padding:0;margin-top:1px;position:absolute\";\n\tdiv.innerHTML = \"\";\n\tcontainer.appendChild( div );\n\n\t// Support: Firefox<29, Android 2.3\n\t// Vendor-prefix box-sizing\n\tsupport.boxSizing = div.style.boxSizing === \"\" || div.style.MozBoxSizing === \"\" ||\n\t\tdiv.style.WebkitBoxSizing === \"\";\n\n\tjQuery.extend( support, {\n\t\treliableHiddenOffsets: function() {\n\t\t\tif ( pixelPositionVal == null ) {\n\t\t\t\tcomputeStyleTests();\n\t\t\t}\n\t\t\treturn reliableHiddenOffsetsVal;\n\t\t},\n\n\t\tboxSizingReliable: function() {\n\n\t\t\t// We're checking for pixelPositionVal here instead of boxSizingReliableVal\n\t\t\t// since that compresses better and they're computed together anyway.\n\t\t\tif ( pixelPositionVal == null ) {\n\t\t\t\tcomputeStyleTests();\n\t\t\t}\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\n\t\tpixelMarginRight: function() {\n\n\t\t\t// Support: Android 4.0-4.3\n\t\t\tif ( pixelPositionVal == null ) {\n\t\t\t\tcomputeStyleTests();\n\t\t\t}\n\t\t\treturn pixelMarginRightVal;\n\t\t},\n\n\t\tpixelPosition: function() {\n\t\t\tif ( pixelPositionVal == null ) {\n\t\t\t\tcomputeStyleTests();\n\t\t\t}\n\t\t\treturn pixelPositionVal;\n\t\t},\n\n\t\treliableMarginRight: function() {\n\n\t\t\t// Support: Android 2.3\n\t\t\tif ( pixelPositionVal == null ) {\n\t\t\t\tcomputeStyleTests();\n\t\t\t}\n\t\t\treturn reliableMarginRightVal;\n\t\t},\n\n\t\treliableMarginLeft: function() {\n\n\t\t\t// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37\n\t\t\tif ( pixelPositionVal == null ) {\n\t\t\t\tcomputeStyleTests();\n\t\t\t}\n\t\t\treturn reliableMarginLeftVal;\n\t\t}\n\t} );\n\n\tfunction computeStyleTests() {\n\t\tvar contents, divStyle,\n\t\t\tdocumentElement = document.documentElement;\n\n\t\t// Setup\n\t\tdocumentElement.appendChild( container );\n\n\t\tdiv.style.cssText =\n\n\t\t\t// Support: Android 2.3\n\t\t\t// Vendor-prefix box-sizing\n\t\t\t\"-webkit-box-sizing:border-box;box-sizing:border-box;\" +\n\t\t\t\"position:relative;display:block;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"top:1%;width:50%\";\n\n\t\t// Support: IE<9\n\t\t// Assume reasonable values in the absence of getComputedStyle\n\t\tpixelPositionVal = boxSizingReliableVal = reliableMarginLeftVal = false;\n\t\tpixelMarginRightVal = reliableMarginRightVal = true;\n\n\t\t// Check for getComputedStyle so that this code is not run in IE<9.\n\t\tif ( window.getComputedStyle ) {\n\t\t\tdivStyle = window.getComputedStyle( div );\n\t\t\tpixelPositionVal = ( divStyle || {} ).top !== \"1%\";\n\t\t\treliableMarginLeftVal = ( divStyle || {} ).marginLeft === \"2px\";\n\t\t\tboxSizingReliableVal = ( divStyle || { width: \"4px\" } ).width === \"4px\";\n\n\t\t\t// Support: Android 4.0 - 4.3 only\n\t\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\t\tdiv.style.marginRight = \"50%\";\n\t\t\tpixelMarginRightVal = ( divStyle || { marginRight: \"4px\" } ).marginRight === \"4px\";\n\n\t\t\t// Support: Android 2.3 only\n\t\t\t// Div with explicit width and no margin-right incorrectly\n\t\t\t// gets computed margin-right based on width of container (#3333)\n\t\t\t// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\n\t\t\tcontents = div.appendChild( document.createElement( \"div\" ) );\n\n\t\t\t// Reset CSS: box-sizing; display; margin; border; padding\n\t\t\tcontents.style.cssText = div.style.cssText =\n\n\t\t\t\t// Support: Android 2.3\n\t\t\t\t// Vendor-prefix box-sizing\n\t\t\t\t\"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;\" +\n\t\t\t\t\"box-sizing:content-box;display:block;margin:0;border:0;padding:0\";\n\t\t\tcontents.style.marginRight = contents.style.width = \"0\";\n\t\t\tdiv.style.width = \"1px\";\n\n\t\t\treliableMarginRightVal =\n\t\t\t\t!parseFloat( ( window.getComputedStyle( contents ) || {} ).marginRight );\n\n\t\t\tdiv.removeChild( contents );\n\t\t}\n\n\t\t// Support: IE6-8\n\t\t// First check that getClientRects works as expected\n\t\t// Check if table cells still have offsetWidth/Height when they are set\n\t\t// to display:none and there are still other visible table cells in a\n\t\t// table row; if so, offsetWidth/Height are not reliable for use when\n\t\t// determining if an element has been hidden directly using\n\t\t// display:none (it is still safe to use offsets if a parent element is\n\t\t// hidden; don safety goggles and see bug #4512 for more information).\n\t\tdiv.style.display = \"none\";\n\t\treliableHiddenOffsetsVal = div.getClientRects().length === 0;\n\t\tif ( reliableHiddenOffsetsVal ) {\n\t\t\tdiv.style.display = \"\";\n\t\t\tdiv.innerHTML = \"<table><tr><td></td><td>t</td></tr></table>\";\n\t\t\tdiv.childNodes[ 0 ].style.borderCollapse = \"separate\";\n\t\t\tcontents = div.getElementsByTagName( \"td\" );\n\t\t\tcontents[ 0 ].style.cssText = \"margin:0;border:0;padding:0;display:none\";\n\t\t\treliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;\n\t\t\tif ( reliableHiddenOffsetsVal ) {\n\t\t\t\tcontents[ 0 ].style.display = \"\";\n\t\t\t\tcontents[ 1 ].style.display = \"none\";\n\t\t\t\treliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;\n\t\t\t}\n\t\t}\n\n\t\t// Teardown\n\t\tdocumentElement.removeChild( container );\n\t}\n\n} )();\n\n\nvar getStyles, curCSS,\n\trposition = /^(top|right|bottom|left)$/;\n\nif ( window.getComputedStyle ) {\n\tgetStyles = function( elem ) {\n\n\t\t// Support: IE<=11+, Firefox<=30+ (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\n\tcurCSS = function( elem, name, computed ) {\n\t\tvar width, minWidth, maxWidth, ret,\n\t\t\tstyle = elem.style;\n\n\t\tcomputed = computed || getStyles( elem );\n\n\t\t// getPropertyValue is only needed for .css('filter') in IE9, see #12537\n\t\tret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;\n\n\t\t// Support: Opera 12.1x only\n\t\t// Fall back to style even without computed\n\t\t// computed is undefined for elems on document fragments\n\t\tif ( ( ret === \"\" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\tif ( computed ) {\n\n\t\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t\t// Chrome < 17 and Safari 5.0 uses \"computed value\"\n\t\t\t// instead of \"used value\" for margin-right\n\t\t\t// Safari 5.1.7 (at least) returns percentage for a larger set of values,\n\t\t\t// but width seems to be reliably pixels\n\t\t\t// this is against the CSSOM draft spec:\n\t\t\t// http://dev.w3.org/csswg/cssom/#resolved-values\n\t\t\tif ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {\n\n\t\t\t\t// Remember the original values\n\t\t\t\twidth = style.width;\n\t\t\t\tminWidth = style.minWidth;\n\t\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t\t// Put in the new values to get a computed value out\n\t\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\t\tret = computed.width;\n\n\t\t\t\t// Revert the changed values\n\t\t\t\tstyle.width = width;\n\t\t\t\tstyle.minWidth = minWidth;\n\t\t\t\tstyle.maxWidth = maxWidth;\n\t\t\t}\n\t\t}\n\n\t\t// Support: IE\n\t\t// IE returns zIndex value as an integer.\n\t\treturn ret === undefined ?\n\t\t\tret :\n\t\t\tret + \"\";\n\t};\n} else if ( documentElement.currentStyle ) {\n\tgetStyles = function( elem ) {\n\t\treturn elem.currentStyle;\n\t};\n\n\tcurCSS = function( elem, name, computed ) {\n\t\tvar left, rs, rsLeft, ret,\n\t\t\tstyle = elem.style;\n\n\t\tcomputed = computed || getStyles( elem );\n\t\tret = computed ? computed[ name ] : undefined;\n\n\t\t// Avoid setting ret to empty string here\n\t\t// so we don't default to auto\n\t\tif ( ret == null && style && style[ name ] ) {\n\t\t\tret = style[ name ];\n\t\t}\n\n\t\t// From the awesome hack by Dean Edwards\n\t\t// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291\n\n\t\t// If we're not dealing with a regular pixel number\n\t\t// but a number that has a weird ending, we need to convert it to pixels\n\t\t// but not position css attributes, as those are\n\t\t// proportional to the parent element instead\n\t\t// and we can't measure the parent instead because it\n\t\t// might trigger a \"stacking dolls\" problem\n\t\tif ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\tleft = style.left;\n\t\t\trs = elem.runtimeStyle;\n\t\t\trsLeft = rs && rs.left;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tif ( rsLeft ) {\n\t\t\t\trs.left = elem.currentStyle.left;\n\t\t\t}\n\t\t\tstyle.left = name === \"fontSize\" ? \"1em\" : ret;\n\t\t\tret = style.pixelLeft + \"px\";\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.left = left;\n\t\t\tif ( rsLeft ) {\n\t\t\t\trs.left = rsLeft;\n\t\t\t}\n\t\t}\n\n\t\t// Support: IE\n\t\t// IE returns zIndex value as an integer.\n\t\treturn ret === undefined ?\n\t\t\tret :\n\t\t\tret + \"\" || \"auto\";\n\t};\n}\n\n\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar\n\n\t\tralpha = /alpha\\([^)]*\\)/i,\n\tropacity = /opacity\\s*=\\s*([^)]*)/i,\n\n\t// swappable if display is none or starts with table except\n\t// \"table\", \"table-cell\", or \"table-caption\"\n\t// see here for display values:\n\t// https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\trnumsplit = new RegExp( \"^(\" + pnum + \")(.*)$\", \"i\" ),\n\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t},\n\n\tcssPrefixes = [ \"Webkit\", \"O\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style;\n\n\n// return a css property mapped to a potentially vendor prefixed property\nfunction vendorPropName( name ) {\n\n\t// shortcut for names that are not vendor prefixed\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\n\t// check for vendor prefixed names\n\tvar capName = name.charAt( 0 ).toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem, hidden,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tvalues[ index ] = jQuery._data( elem, \"olddisplay\" );\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Reset the inline display of this element to learn if it is\n\t\t\t// being hidden by cascaded rules or not\n\t\t\tif ( !values[ index ] && display === \"none\" ) {\n\t\t\t\telem.style.display = \"\";\n\t\t\t}\n\n\t\t\t// Set elements which have been overridden with display: none\n\t\t\t// in a stylesheet to whatever the default browser style is\n\t\t\t// for such an element\n\t\t\tif ( elem.style.display === \"\" && isHidden( elem ) ) {\n\t\t\t\tvalues[ index ] =\n\t\t\t\t\tjQuery._data( elem, \"olddisplay\", defaultDisplay( elem.nodeName ) );\n\t\t\t}\n\t\t} else {\n\t\t\thidden = isHidden( elem );\n\n\t\t\tif ( display && display !== \"none\" || !hidden ) {\n\t\t\t\tjQuery._data(\n\t\t\t\t\telem,\n\t\t\t\t\t\"olddisplay\",\n\t\t\t\t\thidden ? display : jQuery.css( elem, \"display\" )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of most of the elements in a second loop\n\t// to avoid the constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( !show || elem.style.display === \"none\" || elem.style.display === \"\" ) {\n\t\t\telem.style.display = show ? values[ index ] || \"\" : \"none\";\n\t\t}\n\t}\n\n\treturn elements;\n}\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\tvar matches = rnumsplit.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {\n\tvar i = extra === ( isBorderBox ? \"border\" : \"content\" ) ?\n\n\t\t// If we already have the right measurement, avoid augmentation\n\t\t4 :\n\n\t\t// Otherwise initialize for horizontal or vertical properties\n\t\tname === \"width\" ? 1 : 0,\n\n\t\tval = 0;\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// both box models exclude margin, so add it if we want it\n\t\tif ( extra === \"margin\" ) {\n\t\t\tval += jQuery.css( elem, extra + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\tif ( isBorderBox ) {\n\n\t\t\t// border-box includes padding, so remove it if we want content\n\t\t\tif ( extra === \"content\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// at this point, extra isn't border nor margin, so remove border\n\t\t\tif ( extra !== \"margin\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t} else {\n\n\t\t\t// at this point, extra isn't content, so add padding\n\t\t\tval += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// at this point, extra isn't content nor padding, so add border\n\t\t\tif ( extra !== \"padding\" ) {\n\t\t\t\tval += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn val;\n}\n\nfunction getWidthOrHeight( elem, name, extra ) {\n\n\t// Start with offset property, which is equivalent to the border-box value\n\tvar valueIsBorderBox = true,\n\t\tval = name === \"width\" ? elem.offsetWidth : elem.offsetHeight,\n\t\tstyles = getStyles( elem ),\n\t\tisBorderBox = support.boxSizing &&\n\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t// some non-html elements return undefined for offsetWidth, so check for null/undefined\n\t// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285\n\t// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668\n\tif ( val <= 0 || val == null ) {\n\n\t\t// Fall back to computed then uncomputed css if necessary\n\t\tval = curCSS( elem, name, styles );\n\t\tif ( val < 0 || val == null ) {\n\t\t\tval = elem.style[ name ];\n\t\t}\n\n\t\t// Computed unit is not pixels. Stop here and return.\n\t\tif ( rnumnonpx.test( val ) ) {\n\t\t\treturn val;\n\t\t}\n\n\t\t// we need the check for style in case a browser which returns unreliable values\n\t\t// for getComputedStyle silently falls back to the reliable elem.style\n\t\tvalueIsBorderBox = isBorderBox &&\n\t\t\t( support.boxSizingReliable() || val === elem.style[ name ] );\n\n\t\t// Normalize \"\", auto, and prepare for extra\n\t\tval = parseFloat( val ) || 0;\n\t}\n\n\t// use the active box-sizing model to add/subtract irrelevant styles\n\treturn ( val +\n\t\taugmentWidthOrHeight(\n\t\t\telem,\n\t\t\tname,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {\n\n\t\t// normalize float css property\n\t\t\"float\": support.cssFloat ? \"cssFloat\" : \"styleFloat\"\n\t},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = jQuery.camelCase( name ),\n\t\t\tstyle = elem.style;\n\n\t\tname = jQuery.cssProps[ origName ] ||\n\t\t\t( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );\n\n\t\t// gets hook for the prefixed version\n\t\t// followed by the unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set. See: #7116\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\tif ( type === \"number\" ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,\n\t\t\t// but it would mean to define eight\n\t\t\t// (for every problematic property) identical functions\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\t// Support: IE\n\t\t\t\t// Swallow errors from 'invalid' CSS values (#5509)\n\t\t\t\ttry {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar num, val, hooks,\n\t\t\torigName = jQuery.camelCase( name );\n\n\t\t// Make sure that we're working with the right name\n\t\tname = jQuery.cssProps[ origName ] ||\n\t\t\t( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );\n\n\t\t// gets hook for the prefixed version\n\t\t// followed by the unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t//convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Return, converting to number if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( i, name ) {\n\tjQuery.cssHooks[ name ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// certain elements can have dimension info if we invisibly show them\n\t\t\t\t// however, it must have a current display style that would benefit from this\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\t\t\t\t\telem.offsetWidth === 0 ?\n\t\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\t\treturn getWidthOrHeight( elem, name, extra );\n\t\t\t\t\t\t} ) :\n\t\t\t\t\t\tgetWidthOrHeight( elem, name, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar styles = extra && getStyles( elem );\n\t\t\treturn setPositiveNumber( elem, value, extra ?\n\t\t\t\taugmentWidthOrHeight(\n\t\t\t\t\telem,\n\t\t\t\t\tname,\n\t\t\t\t\textra,\n\t\t\t\t\tsupport.boxSizing &&\n\t\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\t\tstyles\n\t\t\t\t) : 0\n\t\t\t);\n\t\t}\n\t};\n} );\n\nif ( !support.opacity ) {\n\tjQuery.cssHooks.opacity = {\n\t\tget: function( elem, computed ) {\n\n\t\t\t// IE uses filters for opacity\n\t\t\treturn ropacity.test( ( computed && elem.currentStyle ?\n\t\t\t\telem.currentStyle.filter :\n\t\t\t\telem.style.filter ) || \"\" ) ?\n\t\t\t\t\t( 0.01 * parseFloat( RegExp.$1 ) ) + \"\" :\n\t\t\t\t\tcomputed ? \"1\" : \"\";\n\t\t},\n\n\t\tset: function( elem, value ) {\n\t\t\tvar style = elem.style,\n\t\t\t\tcurrentStyle = elem.currentStyle,\n\t\t\t\topacity = jQuery.isNumeric( value ) ? \"alpha(opacity=\" + value * 100 + \")\" : \"\",\n\t\t\t\tfilter = currentStyle && currentStyle.filter || style.filter || \"\";\n\n\t\t\t// IE has trouble with opacity if it does not have layout\n\t\t\t// Force it by setting the zoom level\n\t\t\tstyle.zoom = 1;\n\n\t\t\t// if setting opacity to 1, and no other filters exist -\n\t\t\t// attempt to remove filter attribute #6652\n\t\t\t// if value === \"\", then remove inline opacity #12685\n\t\t\tif ( ( value >= 1 || value === \"\" ) &&\n\t\t\t\t\tjQuery.trim( filter.replace( ralpha, \"\" ) ) === \"\" &&\n\t\t\t\t\tstyle.removeAttribute ) {\n\n\t\t\t\t// Setting style.filter to null, \"\" & \" \" still leave \"filter:\" in the cssText\n\t\t\t\t// if \"filter:\" is present at all, clearType is disabled, we want to avoid this\n\t\t\t\t// style.removeAttribute is IE Only, but so apparently is this code path...\n\t\t\t\tstyle.removeAttribute( \"filter\" );\n\n\t\t\t\t// if there is no filter style applied in a css rule\n\t\t\t\t// or unset inline opacity, we are done\n\t\t\t\tif ( value === \"\" || currentStyle && !currentStyle.filter ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// otherwise, set new filter values\n\t\t\tstyle.filter = ralpha.test( filter ) ?\n\t\t\t\tfilter.replace( ralpha, opacity ) :\n\t\t\t\tfilter + \" \" + opacity;\n\t\t}\n\t};\n}\n\njQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn swap( elem, { \"display\": \"inline-block\" },\n\t\t\t\tcurCSS, [ elem, \"marginRight\" ] );\n\t\t}\n\t}\n);\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn (\n\t\t\t\tparseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\n\t\t\t\t// Support: IE<=11+\n\t\t\t\t// Running getBoundingClientRect on a disconnected node in IE throws an error\n\t\t\t\t// Support: IE8 only\n\t\t\t\t// getClientRects() errors on disconnected elems\n\t\t\t\t( jQuery.contains( elem.ownerDocument, elem ) ?\n\t\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t\t} ) :\n\t\t\t\t\t0\n\t\t\t\t)\n\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( !rmargin.test( prefix ) ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( jQuery.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t},\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHidden( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails\n\t\t\t// so, simple values such as \"10px\" are parsed to Float.\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// use step hook for back compat - use cssHook if its there - use .style if its\n\t\t\t// available and use plain properties where available\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 &&\n\t\t\t\t( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||\n\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9\n// Panic based approach to setting things on disconnected nodes\n\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back Compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, timerId,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = jQuery.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\tattrs = { height: type },\n\t\ti = 0;\n\n\t// if we include width, step value is 1 to do all cssExpand values,\n\t// if we don't include width, step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4 ; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// we're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\t/* jshint validthis: true */\n\tvar prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHidden( elem ),\n\t\tdataShow = jQuery._data( elem, \"fxshow\" );\n\n\t// handle queue: false promises\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// doing this makes sure that the complete handler will be called\n\t\t\t// before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// height/width overflow pass\n\tif ( elem.nodeType === 1 && ( \"height\" in props || \"width\" in props ) ) {\n\n\t\t// Make sure that nothing sneaks out\n\t\t// Record all 3 overflow attributes because IE does not\n\t\t// change the overflow attribute when overflowX and\n\t\t// overflowY are set to the same value\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Set display property to inline-block for height/width\n\t\t// animations on inline elements that are having width/height animated\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\n\t\t// Test default display if display is currently \"none\"\n\t\tcheckDisplay = display === \"none\" ?\n\t\t\tjQuery._data( elem, \"olddisplay\" ) || defaultDisplay( elem.nodeName ) : display;\n\n\t\tif ( checkDisplay === \"inline\" && jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t// inline-level elements accept inline-block;\n\t\t\t// block-level elements need to be inline with layout\n\t\t\tif ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === \"inline\" ) {\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t} else {\n\t\t\t\tstyle.zoom = 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tif ( !support.shrinkWrapBlocks() ) {\n\t\t\tanim.always( function() {\n\t\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t\t} );\n\t\t}\n\t}\n\n\t// show/hide pass\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.exec( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// If there is dataShow left over from a stopped hide or show\n\t\t\t\t// and we are going to proceed with show, we should pretend to be hidden\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\n\t\t// Any non-fx value stops us from restoring the original display value\n\t\t} else {\n\t\t\tdisplay = undefined;\n\t\t}\n\t}\n\n\tif ( !jQuery.isEmptyObject( orig ) ) {\n\t\tif ( dataShow ) {\n\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\thidden = dataShow.hidden;\n\t\t\t}\n\t\t} else {\n\t\t\tdataShow = jQuery._data( elem, \"fxshow\", {} );\n\t\t}\n\n\t\t// store state if its toggle - enables .stop().toggle() to \"reverse\"\n\t\tif ( toggle ) {\n\t\t\tdataShow.hidden = !hidden;\n\t\t}\n\t\tif ( hidden ) {\n\t\t\tjQuery( elem ).show();\n\t\t} else {\n\t\t\tanim.done( function() {\n\t\t\t\tjQuery( elem ).hide();\n\t\t\t} );\n\t\t}\n\t\tanim.done( function() {\n\t\t\tvar prop;\n\t\t\tjQuery._removeData( elem, \"fxshow\" );\n\t\t\tfor ( prop in orig ) {\n\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t}\n\t\t} );\n\t\tfor ( prop in orig ) {\n\t\t\ttween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\n\t\t\tif ( !( prop in dataShow ) ) {\n\t\t\t\tdataShow[ prop ] = tween.start;\n\t\t\t\tif ( hidden ) {\n\t\t\t\t\ttween.end = tween.start;\n\t\t\t\t\ttween.start = prop === \"width\" || prop === \"height\" ? 1 : 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t// If this is a noop like .hide().hide(), restore an overwritten display value\n\t} else if ( ( display === \"none\" ? defaultDisplay( elem.nodeName ) : display ) === \"inline\" ) {\n\t\tstyle.display = display;\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = jQuery.camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( jQuery.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// not quite $.extend, this wont overwrite keys already present.\n\t\t\t// also - reusing 'index' from above because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length ; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t} else {\n\t\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// if we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length ; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// resolve when we played the last frame\n\t\t\t\t// otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length ; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( jQuery.isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tjQuery.proxy( result.stop, result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( jQuery.isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\t// attach callbacks from options\n\treturn animation.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( jQuery.isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnotwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length ; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tjQuery.isFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !jQuery.isFunction( easing ) && easing\n\t};\n\n\topt.duration = jQuery.fx.off ? 0 : typeof opt.duration === \"number\" ? opt.duration :\n\t\topt.duration in jQuery.fx.speeds ?\n\t\t\tjQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;\n\n\t// normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( jQuery.isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHidden ).css( \"opacity\", 0 ).show()\n\n\t\t\t// animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || jQuery._data( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue && type !== false ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = jQuery._data( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// start the next in the queue if the last step wasn't forced\n\t\t\t// timers currently will call their complete callbacks, which will dequeue\n\t\t\t// but only if they were gotoEnd\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = jQuery._data( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ttimers = jQuery.timers,\n\t\ti = 0;\n\n\tfxNow = jQuery.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Checks the timer has not already been removed\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tif ( timer() ) {\n\t\tjQuery.fx.start();\n\t} else {\n\t\tjQuery.timers.pop();\n\t}\n};\n\njQuery.fx.interval = 13;\n\njQuery.fx.start = function() {\n\tif ( !timerId ) {\n\t\ttimerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );\n\t}\n};\n\njQuery.fx.stop = function() {\n\twindow.clearInterval( timerId );\n\ttimerId = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar a,\n\t\tinput = document.createElement( \"input\" ),\n\t\tdiv = document.createElement( \"div\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\t// Setup\n\tdiv = document.createElement( \"div\" );\n\tdiv.setAttribute( \"className\", \"t\" );\n\tdiv.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\";\n\ta = div.getElementsByTagName( \"a\" )[ 0 ];\n\n\t// Support: Windows Web Apps (WWA)\n\t// `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"checkbox\" );\n\tdiv.appendChild( input );\n\n\ta = div.getElementsByTagName( \"a\" )[ 0 ];\n\n\t// First batch of tests.\n\ta.style.cssText = \"top:1px\";\n\n\t// Test setAttribute on camelCase class.\n\t// If it works, we need attrFixes when doing get/setAttribute (ie6/7)\n\tsupport.getSetAttribute = div.className !== \"t\";\n\n\t// Get the style information from getAttribute\n\t// (IE uses .cssText instead)\n\tsupport.style = /top/.test( a.getAttribute( \"style\" ) );\n\n\t// Make sure that URLs aren't manipulated\n\t// (IE normalizes it by default)\n\tsupport.hrefNormalized = a.getAttribute( \"href\" ) === \"/a\";\n\n\t// Check the default checkbox/radio value (\"\" on WebKit; \"on\" elsewhere)\n\tsupport.checkOn = !!input.value;\n\n\t// Make sure that a selected-by-default option has a working selected property.\n\t// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)\n\tsupport.optSelected = opt.selected;\n\n\t// Tests for enctype support on a form (#6743)\n\tsupport.enctype = !!document.createElement( \"form\" ).enctype;\n\n\t// Make sure that the options inside disabled selects aren't marked as disabled\n\t// (WebKit marks them as disabled)\n\tselect.disabled = true;\n\tsupport.optDisabled = !opt.disabled;\n\n\t// Support: IE8 only\n\t// Check if we can trust getAttribute(\"value\")\n\tinput = document.createElement( \"input\" );\n\tinput.setAttribute( \"value\", \"\" );\n\tsupport.input = input.getAttribute( \"value\" ) === \"\";\n\n\t// Check if an input maintains its value after becoming a radio\n\tinput.value = \"t\";\n\tinput.setAttribute( \"type\", \"radio\" );\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar rreturn = /\\r/g,\n\trspaces = /[\\x20\\t\\r\\n\\f]+/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, isFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif (\n\t\t\t\t\thooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\treturn typeof ret === \"string\" ?\n\n\t\t\t\t\t// handle most common string cases\n\t\t\t\t\tret.replace( rreturn, \"\" ) :\n\n\t\t\t\t\t// handle cases where value is null/undef or number\n\t\t\t\t\tret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tisFunction = jQuery.isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\t\t\t} else if ( jQuery.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE10-11+\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tjQuery.trim( jQuery.text( elem ) ).replace( rspaces, \" \" );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\" || index < 0,\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length,\n\t\t\t\t\ti = index < 0 ?\n\t\t\t\t\t\tmax :\n\t\t\t\t\t\tone ? index : 0;\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// oldIE doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t( support.optDisabled ?\n\t\t\t\t\t\t\t\t!option.disabled :\n\t\t\t\t\t\t\t\toption.getAttribute( \"disabled\" ) === null ) &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!jQuery.nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\tif ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1 ) {\n\n\t\t\t\t\t\t// Support: IE6\n\t\t\t\t\t\t// When new option element is added to select box we need to\n\t\t\t\t\t\t// force reflow of newly added node in order to workaround delay\n\t\t\t\t\t\t// of initialization properties\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\toption.selected = optionSet = true;\n\n\t\t\t\t\t\t} catch ( _ ) {\n\n\t\t\t\t\t\t\t// Will be executed only in IE6\n\t\t\t\t\t\t\toption.scrollHeight;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\toption.selected = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\n\t\t\t\treturn options;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( jQuery.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\nvar nodeHook, boolHook,\n\tattrHandle = jQuery.expr.attrHandle,\n\truseDefault = /^(?:checked|selected)$/i,\n\tgetSetAttribute = support.getSetAttribute,\n\tgetSetInput = support.input;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// All attributes are lowercase\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\tname = name.toLowerCase();\n\t\t\thooks = jQuery.attrHooks[ name ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tjQuery.nodeName( elem, \"input\" ) ) {\n\n\t\t\t\t\t// Setting the type on a radio button after the value resets the value in IE8-9\n\t\t\t\t\t// Reset value to default in case type is set after value during creation\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name, propName,\n\t\t\ti = 0,\n\t\t\tattrNames = value && value.match( rnotwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\tpropName = jQuery.propFix[ name ] || name;\n\n\t\t\t\t// Boolean attributes get special treatment (#10870)\n\t\t\t\tif ( jQuery.expr.match.bool.test( name ) ) {\n\n\t\t\t\t\t// Set corresponding property to false\n\t\t\t\t\tif ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {\n\t\t\t\t\t\telem[ propName ] = false;\n\n\t\t\t\t\t// Support: IE<9\n\t\t\t\t\t// Also clear defaultChecked/defaultSelected (if appropriate)\n\t\t\t\t\t} else {\n\t\t\t\t\t\telem[ jQuery.camelCase( \"default-\" + name ) ] =\n\t\t\t\t\t\t\telem[ propName ] = false;\n\t\t\t\t\t}\n\n\t\t\t\t// See #9699 for explanation of this approach (setting first, then removal)\n\t\t\t\t} else {\n\t\t\t\t\tjQuery.attr( elem, name, \"\" );\n\t\t\t\t}\n\n\t\t\t\telem.removeAttribute( getSetAttribute ? name : propName );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {\n\n\t\t\t// IE<8 needs the *property* name\n\t\t\telem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );\n\n\t\t} else {\n\n\t\t\t// Support: IE<9\n\t\t\t// Use defaultChecked and defaultSelected for oldIE\n\t\t\telem[ jQuery.camelCase( \"default-\" + name ) ] = elem[ name ] = true;\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tif ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {\n\t\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\t\tvar ret, handle;\n\t\t\tif ( !isXML ) {\n\n\t\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\t\thandle = attrHandle[ name ];\n\t\t\t\tattrHandle[ name ] = ret;\n\t\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\t\tname.toLowerCase() :\n\t\t\t\t\tnull;\n\t\t\t\tattrHandle[ name ] = handle;\n\t\t\t}\n\t\t\treturn ret;\n\t\t};\n\t} else {\n\t\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\t\tif ( !isXML ) {\n\t\t\t\treturn elem[ jQuery.camelCase( \"default-\" + name ) ] ?\n\t\t\t\t\tname.toLowerCase() :\n\t\t\t\t\tnull;\n\t\t\t}\n\t\t};\n\t}\n} );\n\n// fix oldIE attroperties\nif ( !getSetInput || !getSetAttribute ) {\n\tjQuery.attrHooks.value = {\n\t\tset: function( elem, value, name ) {\n\t\t\tif ( jQuery.nodeName( elem, \"input\" ) ) {\n\n\t\t\t\t// Does not return so that setAttribute is also used\n\t\t\t\telem.defaultValue = value;\n\t\t\t} else {\n\n\t\t\t\t// Use nodeHook if defined (#1954); otherwise setAttribute is fine\n\t\t\t\treturn nodeHook && nodeHook.set( elem, value, name );\n\t\t\t}\n\t\t}\n\t};\n}\n\n// IE6/7 do not support getting/setting some attributes with get/setAttribute\nif ( !getSetAttribute ) {\n\n\t// Use this for any attribute in IE6/7\n\t// This fixes almost every IE6/7 issue\n\tnodeHook = {\n\t\tset: function( elem, value, name ) {\n\n\t\t\t// Set the existing or create a new attribute node\n\t\t\tvar ret = elem.getAttributeNode( name );\n\t\t\tif ( !ret ) {\n\t\t\t\telem.setAttributeNode(\n\t\t\t\t\t( ret = elem.ownerDocument.createAttribute( name ) )\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tret.value = value += \"\";\n\n\t\t\t// Break association with cloned elements by also using setAttribute (#9646)\n\t\t\tif ( name === \"value\" || value === elem.getAttribute( name ) ) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t};\n\n\t// Some attributes are constructed with empty-string values when not defined\n\tattrHandle.id = attrHandle.name = attrHandle.coords =\n\t\tfunction( elem, name, isXML ) {\n\t\t\tvar ret;\n\t\t\tif ( !isXML ) {\n\t\t\t\treturn ( ret = elem.getAttributeNode( name ) ) && ret.value !== \"\" ?\n\t\t\t\t\tret.value :\n\t\t\t\t\tnull;\n\t\t\t}\n\t\t};\n\n\t// Fixing value retrieval on a button requires this module\n\tjQuery.valHooks.button = {\n\t\tget: function( elem, name ) {\n\t\t\tvar ret = elem.getAttributeNode( name );\n\t\t\tif ( ret && ret.specified ) {\n\t\t\t\treturn ret.value;\n\t\t\t}\n\t\t},\n\t\tset: nodeHook.set\n\t};\n\n\t// Set contenteditable to false on removals(#10429)\n\t// Setting to empty string throws an error as an invalid value\n\tjQuery.attrHooks.contenteditable = {\n\t\tset: function( elem, value, name ) {\n\t\t\tnodeHook.set( elem, value === \"\" ? false : value, name );\n\t\t}\n\t};\n\n\t// Set width and height to auto instead of 0 on empty string( Bug #8150 )\n\t// This is for removals\n\tjQuery.each( [ \"width\", \"height\" ], function( i, name ) {\n\t\tjQuery.attrHooks[ name ] = {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( value === \"\" ) {\n\t\t\t\t\telem.setAttribute( name, \"auto\" );\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\n\nif ( !support.style ) {\n\tjQuery.attrHooks.style = {\n\t\tget: function( elem ) {\n\n\t\t\t// Return undefined in the case of empty string\n\t\t\t// Note: IE uppercases css property names, but if we were to .toLowerCase()\n\t\t\t// .cssText, that would destroy case sensitivity in URL's, like in \"background\"\n\t\t\treturn elem.style.cssText || undefined;\n\t\t},\n\t\tset: function( elem, value ) {\n\t\t\treturn ( elem.style.cssText = value + \"\" );\n\t\t}\n\t};\n}\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button|object)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\tname = jQuery.propFix[ name ] || name;\n\t\treturn this.each( function() {\n\n\t\t\t// try/catch handles cases where IE balks (such as removing a property on window)\n\t\t\ttry {\n\t\t\t\tthis[ name ] = undefined;\n\t\t\t\tdelete this[ name ];\n\t\t\t} catch ( e ) {}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\treturn tabindex ?\n\t\t\t\t\tparseInt( tabindex, 10 ) :\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\t\trclickable.test( elem.nodeName ) && elem.href ?\n\t\t\t\t\t\t\t0 :\n\t\t\t\t\t\t\t-1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Some attributes require a special call on IE\n// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !support.hrefNormalized ) {\n\n\t// href/src property should get the full normalized URL (#10299/#12915)\n\tjQuery.each( [ \"href\", \"src\" ], function( i, name ) {\n\t\tjQuery.propHooks[ name ] = {\n\t\t\tget: function( elem ) {\n\t\t\t\treturn elem.getAttribute( name, 4 );\n\t\t\t}\n\t\t};\n\t} );\n}\n\n// Support: Safari, IE9+\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\t\t\tvar parent = elem.parentNode;\n\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\t// Make sure that it also works with optgroups, see #5701\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n// IE6/7 call enctype encoding\nif ( !support.enctype ) {\n\tjQuery.propFix.enctype = \"encoding\";\n}\n\n\n\n\nvar rclass = /[\\t\\r\\n\\f]/g;\n\nfunction getClass( elem ) {\n\treturn jQuery.attr( elem, \"class\" ) || \"\";\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof value === \"string\" && value ) {\n\t\t\tclasses = value.match( rnotwhite ) || [];\n\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 &&\n\t\t\t\t\t( \" \" + curValue + \" \" ).replace( rclass, \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = jQuery.trim( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\tjQuery.attr( elem, \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tif ( typeof value === \"string\" && value ) {\n\t\t\tclasses = value.match( rnotwhite ) || [];\n\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 &&\n\t\t\t\t\t( \" \" + curValue + \" \" ).replace( rclass, \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = jQuery.trim( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\tjQuery.attr( elem, \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value;\n\n\t\tif ( typeof stateVal === \"boolean\" && type === \"string\" ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( type === \"string\" ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = value.match( rnotwhite ) || [];\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// store className if set\n\t\t\t\t\tjQuery._data( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed \"false\",\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tjQuery.attr( this, \"class\",\n\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\"\" :\n\t\t\t\t\tjQuery._data( this, \"__className__\" ) || \"\"\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + getClass( elem ) + \" \" ).replace( rclass, \" \" )\n\t\t\t\t\t.indexOf( className ) > -1\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\njQuery.each( ( \"blur focus focusin focusout load resize scroll unload click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup error contextmenu\" ).split( \" \" ),\n\tfunction( i, name ) {\n\n\t// Handle event binding\n\tjQuery.fn[ name ] = function( data, fn ) {\n\t\treturn arguments.length > 0 ?\n\t\t\tthis.on( name, null, data, fn ) :\n\t\t\tthis.trigger( name );\n\t};\n} );\n\njQuery.fn.extend( {\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\n\nvar location = window.location;\n\nvar nonce = jQuery.now();\n\nvar rquery = ( /\\?/ );\n\n\n\nvar rvalidtokens = /(,)|(\\[|{)|(}|])|\"(?:[^\"\\\\\\r\\n]|\\\\[\"\\\\\\/bfnrt]|\\\\u[\\da-fA-F]{4})*\"\\s*:?|true|false|null|-?(?!0\\d)\\d+(?:\\.\\d+|)(?:[eE][+-]?\\d+|)/g;\n\njQuery.parseJSON = function( data ) {\n\n\t// Attempt to parse using the native JSON parser first\n\tif ( window.JSON && window.JSON.parse ) {\n\n\t\t// Support: Android 2.3\n\t\t// Workaround failure to string-cast null input\n\t\treturn window.JSON.parse( data + \"\" );\n\t}\n\n\tvar requireNonComma,\n\t\tdepth = null,\n\t\tstr = jQuery.trim( data + \"\" );\n\n\t// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains\n\t// after removing valid tokens\n\treturn str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {\n\n\t\t// Force termination if we see a misplaced comma\n\t\tif ( requireNonComma && comma ) {\n\t\t\tdepth = 0;\n\t\t}\n\n\t\t// Perform no more replacements after returning to outermost depth\n\t\tif ( depth === 0 ) {\n\t\t\treturn token;\n\t\t}\n\n\t\t// Commas must not follow \"[\", \"{\", or \",\"\n\t\trequireNonComma = open || comma;\n\n\t\t// Determine new depth\n\t\t// array/object open (\"[\" or \"{\"): depth += true - false (increment)\n\t\t// array/object close (\"]\" or \"}\"): depth += false - true (decrement)\n\t\t// other cases (\",\" or primitive): depth += true - true (numeric cast)\n\t\tdepth += !close - !open;\n\n\t\t// Remove this token\n\t\treturn \"\";\n\t} ) ) ?\n\t\t( Function( \"return \" + str ) )() :\n\t\tjQuery.error( \"Invalid JSON: \" + data );\n};\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml, tmp;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tif ( window.DOMParser ) { // Standard\n\t\t\ttmp = new window.DOMParser();\n\t\t\txml = tmp.parseFromString( data, \"text/xml\" );\n\t\t} else { // IE\n\t\t\txml = new window.ActiveXObject( \"Microsoft.XMLDOM\" );\n\t\t\txml.async = \"false\";\n\t\t\txml.loadXML( data );\n\t\t}\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\tif ( !xml || !xml.documentElement || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trhash = /#.*$/,\n\trts = /([?&])_=[^&]*/,\n\n\t// IE leaves an \\r character at EOL\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)\\r?$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\trurl = /^([\\w.+-]+:)(?:\\/\\/(?:[^\\/?#]*@|)([^\\/?#:]*)(?::(\\d+)|)|)/,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Document location\n\tajaxLocation = location.href,\n\n\t// Segment location into parts\n\tajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];\n\n\t\tif ( jQuery.isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType.charAt( 0 ) === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar deep, key,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\tvar firstDataType, ct, finalDataType, type,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s[ \"throws\" ] ) { // jscs:ignore requireDotNotation\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: ajaxLocation,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": jQuery.parseJSON,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar\n\n\t\t\t// Cross-domain detection vars\n\t\t\tparts,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers as string\n\t\t\tresponseHeadersString,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\ttransport,\n\n\t\t\t// Response headers\n\t\t\tresponseHeaders,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// The jqXHR state\n\t\t\tstate = 0,\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( state === 2 ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match;\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn state === 2 ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tvar lname = name.toLowerCase();\n\t\t\t\t\tif ( !state ) {\n\t\t\t\t\t\tname = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( !state ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( state < 2 ) {\n\t\t\t\t\t\t\tfor ( code in map ) {\n\n\t\t\t\t\t\t\t\t// Lazy-add the new callback in a way that preserves old ones\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR ).complete = completeDeferred.add;\n\t\tjqXHR.success = jqXHR.done;\n\t\tjqXHR.error = jqXHR.fail;\n\n\t\t// Remove hash character (#7531: and string promotion)\n\t\t// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || ajaxLocation ) + \"\" )\n\t\t\t.replace( rhash, \"\" )\n\t\t\t.replace( rprotocol, ajaxLocParts[ 1 ] + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = jQuery.trim( s.dataType || \"*\" ).toLowerCase().match( rnotwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when we have a protocol:host:port mismatch\n\t\tif ( s.crossDomain == null ) {\n\t\t\tparts = rurl.exec( s.url.toLowerCase() );\n\t\t\ts.crossDomain = !!( parts &&\n\t\t\t\t( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||\n\t\t\t\t\t( parts[ 3 ] || ( parts[ 1 ] === \"http:\" ? \"80\" : \"443\" ) ) !==\n\t\t\t\t\t\t( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === \"http:\" ? \"80\" : \"443\" ) ) )\n\t\t\t);\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( state === 2 ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\tcacheURL = s.url;\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// If data is available, append data to url\n\t\t\tif ( s.data ) {\n\t\t\t\tcacheURL = ( s.url += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data );\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add anti-cache in url if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\ts.url = rts.test( cacheURL ) ?\n\n\t\t\t\t\t// If there is already a '_' parameter, set its value\n\t\t\t\t\tcacheURL.replace( rts, \"$1_=\" + nonce++ ) :\n\n\t\t\t\t\t// Otherwise add one to the end\n\t\t\t\t\tcacheURL + ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + nonce++;\n\t\t\t}\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tfor ( i in { success: 1, error: 1, complete: 1 } ) {\n\t\t\tjqXHR[ i ]( s[ i ] );\n\t\t}\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( state === 2 ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tstate = 1;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Propagate exception as error if not done\n\t\t\t\tif ( state < 2 ) {\n\t\t\t\t\tdone( -1, e );\n\n\t\t\t\t// Simply rethrow otherwise\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Called once\n\t\t\tif ( state === 2 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// State is \"done\" now\n\t\t\tstate = 2;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// We extract error from statusText\n\t\t\t\t// then normalize statusText and status for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// shift arguments if data argument was omitted\n\t\tif ( jQuery.isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\n\njQuery._evalUrl = function( url ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\t\t\"throws\": true\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapAll( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( this[ 0 ] ) {\n\n\t\t\t// The elements to wrap the target around\n\t\t\tvar wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstChild && elem.firstChild.nodeType === 1 ) {\n\t\t\t\t\telem = elem.firstChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar isFunction = jQuery.isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function() {\n\t\treturn this.parent().each( function() {\n\t\t\tif ( !jQuery.nodeName( this, \"body\" ) ) {\n\t\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t\t}\n\t\t} ).end();\n\t}\n} );\n\n\nfunction getDisplay( elem ) {\n\treturn elem.style && elem.style.display || jQuery.css( elem, \"display\" );\n}\n\nfunction filterHidden( elem ) {\n\n\t// Disconnected elements are considered hidden\n\tif ( !jQuery.contains( elem.ownerDocument || document, elem ) ) {\n\t\treturn true;\n\t}\n\twhile ( elem && elem.nodeType === 1 ) {\n\t\tif ( getDisplay( elem ) === \"none\" || elem.type === \"hidden\" ) {\n\t\t\treturn true;\n\t\t}\n\t\telem = elem.parentNode;\n\t}\n\treturn false;\n}\n\njQuery.expr.filters.hidden = function( elem ) {\n\n\t// Support: Opera <= 12.12\n\t// Opera reports offsetWidths and offsetHeights less than zero on some elements\n\treturn support.reliableHiddenOffsets() ?\n\t\t( elem.offsetWidth <= 0 && elem.offsetHeight <= 0 &&\n\t\t\t!elem.getClientRects().length ) :\n\t\t\tfilterHidden( elem );\n};\n\njQuery.expr.filters.visible = function( elem ) {\n\treturn !jQuery.expr.filters.hidden( elem );\n};\n\n\n\n\nvar r20 = /%20/g,\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( jQuery.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && jQuery.type( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, value ) {\n\n\t\t\t// If value is a function, invoke it and return its value\n\t\t\tvalue = jQuery.isFunction( value ) ? value() : ( value == null ? \"\" : value );\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" + encodeURIComponent( value );\n\t\t};\n\n\t// Set traditional to true for jQuery <= 1.3.2 behavior.\n\tif ( traditional === undefined ) {\n\t\ttraditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;\n\t}\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" ).replace( r20, \"+\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} )\n\t\t.filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is(\":disabled\") so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} )\n\t\t.map( function( i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\treturn val == null ?\n\t\t\t\tnull :\n\t\t\t\tjQuery.isArray( val ) ?\n\t\t\t\t\tjQuery.map( val, function( val ) {\n\t\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t\t} ) :\n\t\t\t\t\t{ name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\n// Create the request object\n// (This is still attached to ajaxSettings for backward compatibility)\njQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?\n\n\t// Support: IE6-IE8\n\tfunction() {\n\n\t\t// XHR cannot access local files, always use ActiveX for that case\n\t\tif ( this.isLocal ) {\n\t\t\treturn createActiveXHR();\n\t\t}\n\n\t\t// Support: IE 9-11\n\t\t// IE seems to error on cross-domain PATCH requests when ActiveX XHR\n\t\t// is used. In IE 9+ always use the native XHR.\n\t\t// Note: this condition won't catch Edge as it doesn't define\n\t\t// document.documentMode but it also doesn't support ActiveX so it won't\n\t\t// reach this code.\n\t\tif ( document.documentMode > 8 ) {\n\t\t\treturn createStandardXHR();\n\t\t}\n\n\t\t// Support: IE<9\n\t\t// oldIE XHR does not support non-RFC2616 methods (#13240)\n\t\t// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx\n\t\t// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9\n\t\t// Although this check for six methods instead of eight\n\t\t// since IE also does not support \"trace\" and \"connect\"\n\t\treturn /^(get|post|head|put|delete|options)$/i.test( this.type ) &&\n\t\t\tcreateStandardXHR() || createActiveXHR();\n\t} :\n\n\t// For all other browsers, use the standard XMLHttpRequest object\n\tcreateStandardXHR;\n\nvar xhrId = 0,\n\txhrCallbacks = {},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\n// Support: IE<10\n// Open requests must be manually aborted on unload (#5280)\n// See https://support.microsoft.com/kb/2856746 for more info\nif ( window.attachEvent ) {\n\twindow.attachEvent( \"onunload\", function() {\n\t\tfor ( var key in xhrCallbacks ) {\n\t\t\txhrCallbacks[ key ]( undefined, true );\n\t\t}\n\t} );\n}\n\n// Determine support properties\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nxhrSupported = support.ajax = !!xhrSupported;\n\n// Create transport if the browser can provide an xhr\nif ( xhrSupported ) {\n\n\tjQuery.ajaxTransport( function( options ) {\n\n\t\t// Cross domain only allowed if supported through XMLHttpRequest\n\t\tif ( !options.crossDomain || support.cors ) {\n\n\t\t\tvar callback;\n\n\t\t\treturn {\n\t\t\t\tsend: function( headers, complete ) {\n\t\t\t\t\tvar i,\n\t\t\t\t\t\txhr = options.xhr(),\n\t\t\t\t\t\tid = ++xhrId;\n\n\t\t\t\t\t// Open the socket\n\t\t\t\t\txhr.open(\n\t\t\t\t\t\toptions.type,\n\t\t\t\t\t\toptions.url,\n\t\t\t\t\t\toptions.async,\n\t\t\t\t\t\toptions.username,\n\t\t\t\t\t\toptions.password\n\t\t\t\t\t);\n\n\t\t\t\t\t// Apply custom fields if provided\n\t\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Override mime type if needed\n\t\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t\t}\n\n\t\t\t\t\t// X-Requested-With header\n\t\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t\t}\n\n\t\t\t\t\t// Set headers\n\t\t\t\t\tfor ( i in headers ) {\n\n\t\t\t\t\t\t// Support: IE<9\n\t\t\t\t\t\t// IE's ActiveXObject throws a 'Type Mismatch' exception when setting\n\t\t\t\t\t\t// request header to a null-value.\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// To keep consistent with other XHR implementations, cast the value\n\t\t\t\t\t\t// to string and ignore `undefined`.\n\t\t\t\t\t\tif ( headers[ i ] !== undefined ) {\n\t\t\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] + \"\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Do send the request\n\t\t\t\t\t// This may raise an exception which is actually\n\t\t\t\t\t// handled in jQuery.ajax (so no try/catch here)\n\t\t\t\t\txhr.send( ( options.hasContent && options.data ) || null );\n\n\t\t\t\t\t// Listener\n\t\t\t\t\tcallback = function( _, isAbort ) {\n\t\t\t\t\t\tvar status, statusText, responses;\n\n\t\t\t\t\t\t// Was never called and is aborted or complete\n\t\t\t\t\t\tif ( callback && ( isAbort || xhr.readyState === 4 ) ) {\n\n\t\t\t\t\t\t\t// Clean up\n\t\t\t\t\t\t\tdelete xhrCallbacks[ id ];\n\t\t\t\t\t\t\tcallback = undefined;\n\t\t\t\t\t\t\txhr.onreadystatechange = jQuery.noop;\n\n\t\t\t\t\t\t\t// Abort manually if needed\n\t\t\t\t\t\t\tif ( isAbort ) {\n\t\t\t\t\t\t\t\tif ( xhr.readyState !== 4 ) {\n\t\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresponses = {};\n\t\t\t\t\t\t\t\tstatus = xhr.status;\n\n\t\t\t\t\t\t\t\t// Support: IE<10\n\t\t\t\t\t\t\t\t// Accessing binary-data responseText throws an exception\n\t\t\t\t\t\t\t\t// (#11426)\n\t\t\t\t\t\t\t\tif ( typeof xhr.responseText === \"string\" ) {\n\t\t\t\t\t\t\t\t\tresponses.text = xhr.responseText;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Firefox throws an exception when accessing\n\t\t\t\t\t\t\t\t// statusText for faulty cross-domain requests\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tstatusText = xhr.statusText;\n\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t// We normalize with Webkit giving an empty statusText\n\t\t\t\t\t\t\t\t\tstatusText = \"\";\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Filter status for non standard behaviors\n\n\t\t\t\t\t\t\t\t// If the request is local and we have data: assume a success\n\t\t\t\t\t\t\t\t// (success with no data won't get notified, that's the best we\n\t\t\t\t\t\t\t\t// can do given current implementations)\n\t\t\t\t\t\t\t\tif ( !status && options.isLocal && !options.crossDomain ) {\n\t\t\t\t\t\t\t\t\tstatus = responses.text ? 200 : 404;\n\n\t\t\t\t\t\t\t\t// IE - #1450: sometimes returns 1223 when it should be 204\n\t\t\t\t\t\t\t\t} else if ( status === 1223 ) {\n\t\t\t\t\t\t\t\t\tstatus = 204;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Call complete if needed\n\t\t\t\t\t\tif ( responses ) {\n\t\t\t\t\t\t\tcomplete( status, statusText, responses, xhr.getAllResponseHeaders() );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Do send the request\n\t\t\t\t\t// `xhr.send` may raise an exception, but it will be\n\t\t\t\t\t// handled in jQuery.ajax (so no try/catch here)\n\t\t\t\t\tif ( !options.async ) {\n\n\t\t\t\t\t\t// If we're in sync mode we fire the callback\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t} else if ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t// (IE6 & IE7) if it's in cache and has been\n\t\t\t\t\t\t// retrieved directly we need to fire the callback\n\t\t\t\t\t\twindow.setTimeout( callback );\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Register the callback, but delay it in case `xhr.send` throws\n\t\t\t\t\t\t// Add to the list of active xhr callbacks\n\t\t\t\t\t\txhr.onreadystatechange = xhrCallbacks[ id ] = callback;\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tabort: function() {\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tcallback( undefined, true );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t} );\n}\n\n// Functions to create xhrs\nfunction createStandardXHR() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n}\n\nfunction createActiveXHR() {\n\ttry {\n\t\treturn new window.ActiveXObject( \"Microsoft.XMLHTTP\" );\n\t} catch ( e ) {}\n}\n\n\n\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and global\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t\ts.global = false;\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain requests\n\tif ( s.crossDomain ) {\n\n\t\tvar script,\n\t\t\thead = document.head || jQuery( \"head\" )[ 0 ] || document.documentElement;\n\n\t\treturn {\n\n\t\t\tsend: function( _, callback ) {\n\n\t\t\t\tscript = document.createElement( \"script\" );\n\n\t\t\t\tscript.async = true;\n\n\t\t\t\tif ( s.scriptCharset ) {\n\t\t\t\t\tscript.charset = s.scriptCharset;\n\t\t\t\t}\n\n\t\t\t\tscript.src = s.url;\n\n\t\t\t\t// Attach handlers for all browsers\n\t\t\t\tscript.onload = script.onreadystatechange = function( _, isAbort ) {\n\n\t\t\t\t\tif ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {\n\n\t\t\t\t\t\t// Handle memory leak in IE\n\t\t\t\t\t\tscript.onload = script.onreadystatechange = null;\n\n\t\t\t\t\t\t// Remove the script\n\t\t\t\t\t\tif ( script.parentNode ) {\n\t\t\t\t\t\t\tscript.parentNode.removeChild( script );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Dereference the script\n\t\t\t\t\t\tscript = null;\n\n\t\t\t\t\t\t// Callback if not abort\n\t\t\t\t\t\tif ( !isAbort ) {\n\t\t\t\t\t\t\tcallback( 200, \"success\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\thead.insertBefore( script, head.firstChild );\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( script ) {\n\t\t\t\t\tscript.onload( undefined, true );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && jQuery.isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// data: string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\tcontext = context || document;\n\n\tvar parsed = rsingleTag.exec( data ),\n\t\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n// Keep a copy of the old load method\nvar _load = jQuery.fn.load;\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tif ( typeof url !== \"string\" && _load ) {\n\t\treturn _load.apply( this, arguments );\n\t}\n\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = jQuery.trim( url.slice( off, url.length ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( jQuery.isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.expr.filters.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\n\n/**\n * Gets a window from an element\n */\nfunction getWindow( elem ) {\n\treturn jQuery.isWindow( elem ) ?\n\t\telem :\n\t\telem.nodeType === 9 ?\n\t\t\telem.defaultView || elem.parentWindow :\n\t\t\tfalse;\n}\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\tjQuery.inArray( \"auto\", [ curCSSTop, curCSSLeft ] ) > -1;\n\n\t\t// need to be able to calculate position if either top or left\n\t\t// is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( jQuery.isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\toffset: function( options ) {\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar docElem, win,\n\t\t\tbox = { top: 0, left: 0 },\n\t\t\telem = this[ 0 ],\n\t\t\tdoc = elem && elem.ownerDocument;\n\n\t\tif ( !doc ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdocElem = doc.documentElement;\n\n\t\t// Make sure it's not a disconnected DOM node\n\t\tif ( !jQuery.contains( docElem, elem ) ) {\n\t\t\treturn box;\n\t\t}\n\n\t\t// If we don't have gBCR, just use 0,0 rather than error\n\t\t// BlackBerry 5, iOS 3 (original iPhone)\n\t\tif ( typeof elem.getBoundingClientRect !== \"undefined\" ) {\n\t\t\tbox = elem.getBoundingClientRect();\n\t\t}\n\t\twin = getWindow( doc );\n\t\treturn {\n\t\t\ttop: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),\n\t\t\tleft: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )\n\t\t};\n\t},\n\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset,\n\t\t\tparentOffset = { top: 0, left: 0 },\n\t\t\telem = this[ 0 ];\n\n\t\t// Fixed elements are offset from window (parentOffset = {top:0, left: 0},\n\t\t// because it is its only offset parent\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// we assume that getBoundingClientRect is available when computed position is fixed\n\t\t\toffset = elem.getBoundingClientRect();\n\t\t} else {\n\n\t\t\t// Get *real* offsetParent\n\t\t\toffsetParent = this.offsetParent();\n\n\t\t\t// Get correct offsets\n\t\t\toffset = this.offset();\n\t\t\tif ( !jQuery.nodeName( offsetParent[ 0 ], \"html\" ) ) {\n\t\t\t\tparentOffset = offsetParent.offset();\n\t\t\t}\n\n\t\t\t// Add offsetParent borders\n\t\t\tparentOffset.top  += jQuery.css( offsetParent[ 0 ], \"borderTopWidth\", true );\n\t\t\tparentOffset.left += jQuery.css( offsetParent[ 0 ], \"borderLeftWidth\", true );\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\t// note: when an element has margin: auto the offsetLeft and marginLeft\n\t\t// are the same in Safari causing offset.left to incorrectly be 0\n\t\treturn {\n\t\t\ttop:  offset.top  - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && ( !jQuery.nodeName( offsetParent, \"html\" ) &&\n\t\t\t\tjQuery.css( offsetParent, \"position\" ) === \"static\" ) ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = /Y/.test( prop );\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\t\t\tvar win = getWindow( elem );\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? ( prop in win ) ? win[ prop ] :\n\t\t\t\t\twin.document.documentElement[ method ] :\n\t\t\t\t\telem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : jQuery( win ).scrollLeft(),\n\t\t\t\t\ttop ? val : jQuery( win ).scrollTop()\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length, null );\n\t};\n} );\n\n// Support: Safari<7-8+, Chrome<37-44+\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// getComputedStyle returns percent when specified for top/left/bottom/right\n// rather than make the css module depend on the offset module, we just check for it here\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// if curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\n\tfunction( defaultExtra, funcName ) {\n\n\t\t// margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there\n\t\t\t\t\t// isn't a whole lot we can do. See pull request at this URL for discussion:\n\t\t\t\t\t// https://github.com/jquery/jquery/pull/764\n\t\t\t\t\treturn elem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\t// unfortunately, this causes bug #3838 in IE6/8 only,\n\t\t\t\t\t// but there is currently no good, small way to fix it.\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable, null );\n\t\t};\n\t} );\n} );\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t}\n} );\n\n// The number of elements contained in the matched element set\njQuery.fn.size = function() {\n\treturn this.length;\n};\n\njQuery.fn.andSelf = jQuery.fn.addBack;\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( typeof define === \"function\" && define.amd ) {\n\tdefine( \"jquery\", [], function() {\n\t\treturn jQuery;\n\t} );\n}\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in\n// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( !noGlobal ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\nreturn jQuery;\n}));\n","// <details> polyfill\n// http://caniuse.com/#feat=details\n\n// FF Support for HTML5's <details> and <summary>\n// https://bugzilla.mozilla.org/show_bug.cgi?id=591737\n\n// http://www.sitepoint.com/fixing-the-details-element/\n\n(function () {\n  'use strict'\n\n  var NATIVE_DETAILS = typeof document.createElement('details').open === 'boolean'\n\n  // Add event construct for modern browsers or IE\n  // which fires the callback with a pre-converted target reference\n  function addEvent (node, type, callback) {\n    if (node.addEventListener) {\n      node.addEventListener(type, function (e) {\n        callback(e, e.target)\n      }, false)\n    } else if (node.attachEvent) {\n      node.attachEvent('on' + type, function (e) {\n        callback(e, e.srcElement)\n      })\n    }\n  }\n\n  // Handle cross-modal click events\n  function addClickEvent (node, callback) {\n    // Prevent space(32) from scrolling the page\n    addEvent(node, 'keypress', function (e, target) {\n      if (target.nodeName === 'SUMMARY') {\n        if (e.keyCode === 32) {\n          if (e.preventDefault) {\n            e.preventDefault()\n          } else {\n            e.returnValue = false\n          }\n        }\n      }\n    })\n    // When the key comes up - check if it is enter(13) or space(32)\n    addEvent(node, 'keyup', function (e, target) {\n      if (e.keyCode === 13 || e.keyCode === 32) { callback(e, target) }\n    })\n    addEvent(node, 'mouseup', function (e, target) {\n      callback(e, target)\n    })\n  }\n\n  // Get the nearest ancestor element of a node that matches a given tag name\n  function getAncestor (node, match) {\n    do {\n      if (!node || node.nodeName.toLowerCase() === match) {\n        break\n      }\n      node = node.parentNode\n    } while (node)\n\n    return node\n  }\n\n  // Create a started flag so we can prevent the initialisation\n  // function firing from both DOMContentLoaded and window.onload\n  var started = false\n\n  // Initialisation function\n  function addDetailsPolyfill (list) {\n    // If this has already happened, just return\n    // else set the flag so it doesn't happen again\n    if (started) {\n      return\n    }\n    started = true\n\n    // Get the collection of details elements, but if that's empty\n    // then we don't need to bother with the rest of the scripting\n    if ((list = document.getElementsByTagName('details')).length === 0) {\n      return\n    }\n\n    // else iterate through them to apply their initial state\n    var n = list.length\n    var i = 0\n    for (i; i < n; i++) {\n      var details = list[i]\n\n      // Save shortcuts to the inner summary and content elements\n      details.__summary = details.getElementsByTagName('summary').item(0)\n      details.__content = details.getElementsByTagName('div').item(0)\n\n      // If the content doesn't have an ID, assign it one now\n      // which we'll need for the summary's aria-controls assignment\n      if (!details.__content.id) {\n        details.__content.id = 'details-content-' + i\n      }\n\n      // Add ARIA role=\"group\" to details\n      details.setAttribute('role', 'group')\n\n      // Add role=button to summary\n      details.__summary.setAttribute('role', 'button')\n\n      // Add aria-controls\n      details.__summary.setAttribute('aria-controls', details.__content.id)\n\n      // Set tabIndex so the summary is keyboard accessible for non-native elements\n      // http://www.saliences.com/browserBugs/tabIndex.html\n      if (!NATIVE_DETAILS) {\n        details.__summary.tabIndex = 0\n      }\n\n      // Detect initial open state\n      var openAttr = details.getAttribute('open') !== null\n      if (openAttr === true) {\n        details.__summary.setAttribute('aria-expanded', 'true')\n        details.__content.setAttribute('aria-hidden', 'false')\n      } else {\n        details.__summary.setAttribute('aria-expanded', 'false')\n        details.__content.setAttribute('aria-hidden', 'true')\n        if (!NATIVE_DETAILS) {\n          details.__content.style.display = 'none'\n        }\n      }\n\n      // Create a circular reference from the summary back to its\n      // parent details element, for convenience in the click handler\n      details.__summary.__details = details\n\n      // If this is not a native implementation, create an arrow\n      // inside the summary\n      if (!NATIVE_DETAILS) {\n        var twisty = document.createElement('i')\n\n        if (openAttr === true) {\n          twisty.className = 'arrow arrow-open'\n          twisty.appendChild(document.createTextNode('\\u25bc'))\n        } else {\n          twisty.className = 'arrow arrow-closed'\n          twisty.appendChild(document.createTextNode('\\u25ba'))\n        }\n\n        details.__summary.__twisty = details.__summary.insertBefore(twisty, details.__summary.firstChild)\n        details.__summary.__twisty.setAttribute('aria-hidden', 'true')\n      }\n    }\n\n    // Define a statechange function that updates aria-expanded and style.display\n    // Also update the arrow position\n    function statechange (summary) {\n      var expanded = summary.__details.__summary.getAttribute('aria-expanded') === 'true'\n      var hidden = summary.__details.__content.getAttribute('aria-hidden') === 'true'\n\n      summary.__details.__summary.setAttribute('aria-expanded', (expanded ? 'false' : 'true'))\n      summary.__details.__content.setAttribute('aria-hidden', (hidden ? 'false' : 'true'))\n\n      if (!NATIVE_DETAILS) {\n        summary.__details.__content.style.display = (expanded ? 'none' : '')\n\n        var hasOpenAttr = summary.__details.getAttribute('open') !== null\n        if (!hasOpenAttr) {\n          summary.__details.setAttribute('open', 'open')\n        } else {\n          summary.__details.removeAttribute('open')\n        }\n      }\n\n      if (summary.__twisty) {\n        summary.__twisty.firstChild.nodeValue = (expanded ? '\\u25ba' : '\\u25bc')\n        summary.__twisty.setAttribute('class', (expanded ? 'arrow arrow-closed' : 'arrow arrow-open'))\n      }\n\n      return true\n    }\n\n    // Bind a click event to handle summary elements\n    addClickEvent(document, function (e, summary) {\n      if (!(summary = getAncestor(summary, 'summary'))) {\n        return true\n      }\n      return statechange(summary)\n    })\n  }\n\n  // Bind two load events for modern and older browsers\n  // If the first one fires it will set a flag to block the second one\n  // but if it's not supported then the second one will fire\n  addEvent(document, 'DOMContentLoaded', addDetailsPolyfill)\n  addEvent(window, 'load', addDetailsPolyfill)\n})()\n","(function ($) {\n  var $submit = $('#submit')\n  var $naa = $('#accept-naa')\n  var $agreeNaa = $('#agree-naa')\n  var $errorMessageNaa = $('<p role=\"alert\" class=\"error-message\">Please indicate that you agree to the terms of use set out in the Network Access Agreement</p>')\n\n  var dirty = false\n\n  function resetForm () {\n    $agreeNaa\n        .closest('.form-group')\n        .removeClass('error')\n        .find('.error-message')\n        .remove()\n  }\n\n  function updateButton () {\n    if ($naa.is(':checked')) {\n      $submit.removeAttr('disabled')\n      $errorMessageNaa.remove()\n      $agreeNaa.closest('.form-group').removeClass('error')\n    } else {\n      $submit.attr('disabled', true)\n\n      if (dirty) {\n        $agreeNaa.closest('.form-group').append($errorMessageNaa)\n\n        $agreeNaa.closest('.form-group').addClass('error')\n      } else {\n        dirty = true\n      }\n    }\n  }\n\n  $naa.on('change', updateButton)\n  $(document).ready(function () {\n    resetForm()\n    updateButton()\n  })\n})(window.jQuery)\n","(function ($) {\n  var count = 0\n  var interval = 5000\n  var maxTries = 12\n\n  // The behaviour is bound to this data attribute. If it's not present, bail out\n  if (!$('[data-confirming-deed]').length) {\n    return\n  }\n\n  // Call our main endpoint via ajax\n  // This kicks off the call to deed api\n  $.ajax({\n    dataType: 'json',\n    method: 'POST',\n    cache: false,\n    data: {\n      auth_code: $('input[name=\"auth_code\"]').val()\n    },\n    url: 'verify-auth-code',\n    timeout: interval * maxTries, // Make it wait for the full duration\n    success: function (data) {\n      if (data.error) {\n        window.location = data.redirect\n      }\n    }\n  })\n\n  // Function to check the status of the request periodically\n  function checkDeedIsSigned () {\n    count++\n\n    // Call our checking endpoint via ajax\n    $.ajax({\n      dataType: 'json',\n      method: 'GET',\n      cache: false,\n      url: 'confirm-mortgage-is-signed',\n      success: function (data) {\n        // If it's ready, redirect, otherwise go round again\n        if (data.result) {\n          window.location = data.redirect\n        }\n        // If error occurs redirect to error page\n        if (data.error) {\n          window.location = data.redirect\n        }\n      }\n    })\n\n    if (count < maxTries) {\n      setTimeout(checkDeedIsSigned, interval)\n    } else {\n      window.location = 'service-unavailable/deed-not-confirmed'\n    }\n  }\n\n  // Every 5 seconds check again\n  setTimeout(checkDeedIsSigned, interval)\n})(window.jQuery)\n",";(function (global) {\n  'use strict'\n\n  var $ = global.jQuery\n  var GOVUK = global.GOVUK || {}\n\n  var SelectionButtons = function (elmsOrSelector, opts) {\n    this.selectedClass = 'selected'\n    this.focusedClass = 'focused'\n    this.radioClass = 'selection-button-radio'\n    this.checkboxClass = 'selection-button-checkbox'\n    if (opts !== undefined) {\n      $.each(opts, function (optionName, optionObj) {\n        this[optionName] = optionObj\n      }.bind(this))\n    }\n    if (typeof elmsOrSelector === 'string') {\n      this.selector = elmsOrSelector\n      this.setInitialState($(this.selector))\n    } else if (elmsOrSelector !== undefined) {\n      this.$elms = elmsOrSelector\n      this.setInitialState(this.$elms)\n    }\n    this.addEvents()\n  }\n  SelectionButtons.prototype.addEvents = function () {\n    if (typeof this.$elms !== 'undefined') {\n      this.addElementLevelEvents()\n    } else {\n      this.addDocumentLevelEvents()\n    }\n  }\n  SelectionButtons.prototype.setInitialState = function ($elms) {\n    $elms.each(function (idx, elm) {\n      var $elm = $(elm)\n\n      var labelClass = $elm.attr('type') === 'radio' ? this.radioClass : this.checkboxClass\n      $elm.parent('label').addClass(labelClass)\n      if ($elm.is(':checked')) {\n        this.markSelected($elm)\n      }\n    }.bind(this))\n  }\n  SelectionButtons.prototype.markFocused = function ($elm, state) {\n    if (state === 'focused') {\n      $elm.parent('label').addClass(this.focusedClass)\n    } else {\n      $elm.parent('label').removeClass(this.focusedClass)\n    }\n  }\n  SelectionButtons.prototype.markSelected = function ($elm) {\n    var radioName\n\n    if ($elm.attr('type') === 'radio') {\n      radioName = $elm.attr('name')\n      $($elm[0].form).find('input[name=\"' + radioName + '\"]')\n        .parent('label')\n        .removeClass(this.selectedClass)\n      $elm.parent('label').addClass(this.selectedClass)\n    } else { // checkbox\n      if ($elm.is(':checked')) {\n        $elm.parent('label').addClass(this.selectedClass)\n      } else {\n        $elm.parent('label').removeClass(this.selectedClass)\n      }\n    }\n  }\n  SelectionButtons.prototype.addElementLevelEvents = function () {\n    this.clickHandler = this.getClickHandler()\n    this.focusHandler = this.getFocusHandler({ 'level': 'element' })\n\n    this.$elms\n      .on('click', this.clickHandler)\n      .on('focus blur', this.focusHandler)\n  }\n  SelectionButtons.prototype.addDocumentLevelEvents = function () {\n    this.clickHandler = this.getClickHandler()\n    this.focusHandler = this.getFocusHandler({ 'level': 'document' })\n\n    $(document)\n      .on('click', this.selector, this.clickHandler)\n      .on('focus blur', this.selector, this.focusHandler)\n  }\n  SelectionButtons.prototype.getClickHandler = function () {\n    return function (e) {\n      this.markSelected($(e.target))\n    }.bind(this)\n  }\n  SelectionButtons.prototype.getFocusHandler = function (opts) {\n    var focusEvent = (opts.level === 'document') ? 'focusin' : 'focus'\n\n    return function (e) {\n      var state = (e.type === focusEvent) ? 'focused' : 'blurred'\n\n      this.markFocused($(e.target), state)\n    }.bind(this)\n  }\n  SelectionButtons.prototype.destroy = function () {\n    if (typeof this.selector !== 'undefined') {\n      $(document)\n        .off('click', this.selector, this.clickHandler)\n        .off('focus blur', this.selector, this.focusHandler)\n    } else {\n      this.$elms\n        .off('click', this.clickHandler)\n        .off('focus blur', this.focusHandler)\n    }\n  }\n\n  GOVUK.SelectionButtons = SelectionButtons\n  global.GOVUK = GOVUK\n})(window)\n","import 'govuk_frontend_toolkit/javascripts/govuk/selection-buttons'\n\nnew GOVUK.SelectionButtons('.block-label input[type=\"radio\"], .block-label input[type=\"checkbox\"]') // eslint-disable-line no-new,no-undef"],"names":["global","factory","module","exports","document","w","Error","window","this","noGlobal","isArrayLike","obj","length","type","jQuery","isWindow","winnow","elements","qualifier","not","isFunction","grep","elem","i","call","nodeType","risSimple","test","filter","inArray","sibling","cur","dir","createOptions","options","object","each","match","rnotwhite","_","flag","detach","addEventListener","removeEventListener","completed","detachEvent","event","readyState","ready","dataAttr","key","data","undefined","name","replace","rmultiDash","toLowerCase","getAttribute","rbrace","parseJSON","e","isEmptyDataObject","isEmptyObject","internalData","pvt","acceptData","ret","thisCache","internalKey","expando","isNode","cache","id","deletedIds","pop","guid","toJSON","noop","extend","camelCase","internalRemoveData","isArray","concat","map","split","cleanData","support","deleteExpando","adjustCSS","prop","valueParts","tween","adjusted","scale","maxIterations","currentValue","css","initial","unit","cssNumber","initialInUnit","rcssNum","exec","style","start","end","createSafeFragment","list","nodeNames","safeFrag","createDocumentFragment","createElement","getAll","context","tag","elems","found","getElementsByTagName","querySelectorAll","childNodes","nodeName","push","merge","setGlobalEval","refElements","_data","fixDefaultChecked","rcheckableType","defaultChecked","checked","buildFragment","scripts","selection","ignored","j","contains","tmp","tbody","wrap","l","safe","nodes","rhtml","appendChild","rtagName","wrapMap","_default","innerHTML","htmlPrefilter","lastChild","leadingWhitespace","rleadingWhitespace","createTextNode","rtbody","firstChild","removeChild","textContent","appendChecked","ownerDocument","rscriptType","returnTrue","returnFalse","safeActiveElement","activeElement","err","on","types","selector","fn","one","origFn","off","apply","arguments","add","manipulationTarget","content","disableScript","find","attr","restoreScript","rscriptTypeMasked","removeAttribute","cloneCopyEvent","src","dest","hasData","oldData","curData","events","handle","fixCloneNodeIssues","noCloneEvent","removeEvent","text","parentNode","outerHTML","html5Clone","trim","value","defaultSelected","selected","defaultValue","domManip","collection","args","callback","first","node","hasScripts","doc","fragment","iNoClone","checkClone","rchecked","index","self","eq","html","clone","_evalUrl","globalEval","rcleanScript","remove","keepData","actualDisplay","appendTo","body","display","defaultDisplay","elemdisplay","iframe","documentElement","contentWindow","contentDocument","write","close","addGetHookIf","conditionFn","hookFn","get","vendorPropName","emptyStyle","capName","charAt","toUpperCase","slice","cssPrefixes","showHide","show","hidden","values","isHidden","setPositiveNumber","subtract","matches","rnumsplit","Math","max","augmentWidthOrHeight","extra","isBorderBox","styles","val","cssExpand","getWidthOrHeight","valueIsBorderBox","offsetWidth","offsetHeight","getStyles","boxSizing","curCSS","rnumnonpx","boxSizingReliable","parseFloat","Tween","easing","prototype","init","createFxNow","setTimeout","fxNow","now","genFx","includeWidth","which","attrs","height","opacity","width","createTween","animation","Animation","tweeners","defaultPrefilter","props","opts","toggle","hooks","oldfire","checkDisplay","anim","orig","dataShow","queue","_queueHooks","unqueued","empty","fire","always","overflow","overflowX","overflowY","inlineBlockNeedsLayout","zoom","shrinkWrapBlocks","rfxtypes","done","hide","_removeData","propFilter","specialEasing","cssHooks","expand","properties","result","stopped","prefilters","deferred","Deferred","tick","currentTime","remaining","startTime","duration","temp","percent","tweens","run","notifyWith","resolveWith","promise","originalProperties","originalOptions","stop","gotoEnd","rejectWith","proxy","fx","timer","progress","complete","fail","getClass","addToPrefiltersOrTransports","structure","dataTypeExpression","func","dataType","dataTypes","unshift","inspectPrefiltersOrTransports","jqXHR","inspect","inspected","prefilterOrFactory","dataTypeOrTransport","seekingTransport","transports","ajaxExtend","target","deep","flatOptions","ajaxSettings","ajaxHandleResponses","s","responses","firstDataType","ct","finalDataType","contents","shift","mimeType","getResponseHeader","converters","ajaxConvert","response","isSuccess","conv2","current","conv","prev","responseFields","dataFilter","state","error","getDisplay","filterHidden","buildParams","prefix","traditional","v","rbracket","createStandardXHR","XMLHttpRequest","createActiveXHR","ActiveXObject","getWindow","defaultView","parentWindow","indexOf","class2type","toString","hasOwn","hasOwnProperty","version","rtrim","rmsPrefix","rdashAlpha","fcamelCase","all","letter","jquery","constructor","toArray","num","pushStack","prevObject","last","len","sort","splice","copyIsArray","copy","isPlainObject","random","isReady","msg","Array","isNumeric","realStringObj","ownFirst","execScript","string","makeArray","arr","results","Object","second","invert","callbackInverse","callbackExpect","arg","Date","Symbol","iterator","Sizzle","seed","m","nid","nidselect","groups","newSelector","newContext","preferredDoc","setDocument","documentIsHTML","rquickExpr","getElementById","getElementsByClassName","qsa","compilerCache","rbuggyQSA","rescape","setAttribute","tokenize","ridentifier","toSelector","join","rsibling","testContext","qsaError","select","createCache","keys","Expr","cacheLength","markFunction","assert","div","addHandle","handler","attrHandle","siblingCheck","a","b","diff","sourceIndex","MAX_NEGATIVE","nextSibling","createInputPseudo","createButtonPseudo","createPositionalPseudo","argument","matchIndexes","setFilters","tokens","addCombinator","matcher","combinator","base","checkNonElements","doneName","xml","oldCache","uniqueCache","outerCache","newCache","dirruns","uniqueID","elementMatcher","matchers","multipleContexts","contexts","condense","unmatched","newUnmatched","mapped","setMatcher","preFilter","postFilter","postFinder","postSelector","preMap","postMap","preexisting","matcherIn","matcherOut","matcherFromTokens","checkContext","leadingRelative","relative","implicitRelative","matchContext","matchAnyContext","outermostContext","matcherFromGroupMatchers","elementMatchers","setMatchers","bySet","byElement","superMatcher","outermost","matchedCount","setMatched","contextBackup","dirrunsUnique","uniqueSort","getText","isXML","compile","sortInput","hasDuplicate","docElem","rbuggyMatches","classCache","tokenCache","sortOrder","push_native","booleans","whitespace","identifier","attributes","pseudos","rwhitespace","RegExp","rcomma","rcombinators","rattributeQuotes","rpseudo","matchExpr","ID","CLASS","TAG","ATTR","PSEUDO","CHILD","bool","needsContext","rinputs","rheader","rnative","runescape","funescape","escaped","escapedWhitespace","high","String","fromCharCode","unloadHandler","els","hasCompare","parent","top","attachEvent","className","createComment","getById","getElementsByName","attrId","getAttributeNode","input","matchesSelector","webkitMatchesSelector","mozMatchesSelector","oMatchesSelector","msMatchesSelector","disconnectedMatch","compareDocumentPosition","adown","bup","compare","sortDetached","aup","ap","bp","expr","specified","duplicates","detectDuplicates","sortStable","nodeValue","selectors","createPseudo",">"," ","+","~","excess","unquoted","nodeNameSelector","pattern","operator","check","what","simple","forward","ofType","nodeIndex","useCache","pseudo","idx","matched","has","innerText","lang","elemLang","hash","location","root","focus","hasFocus","href","tabIndex","enabled","disabled","selectedIndex","header","button","even","odd","lt","gt","radio","checkbox","file","password","image","submit","reset","filters","parseOnly","soFar","preFilters","cached","token","compiled","div1","unique","isXMLDoc","until","truncate","is","siblings","n","rneedsContext","rsingleTag","rootjQuery","parseHTML","rparentsprev","guaranteedUnique","children","next","targets","closest","pos","prevAll","addBack","parents","parentsUntil","nextAll","nextUntil","prevUntil","reverse","Callbacks","firing","memory","fired","locked","firingIndex","once","stopOnFalse","disable","lock","fireWith","tuples","then","fns","newDefer","tuple","returned","notify","resolve","reject","pipe","stateString","when","subordinate","progressValues","progressContexts","resolveContexts","resolveValues","updateFunc","readyList","readyWait","holdReady","hold","wait","triggerHandler","doScroll","frameElement","doScrollCheck","container","cssText","noData","applet ","embed ","object ","removeData","dequeue","startLength","setter","clearQueue","count","defer","shrinkWrapBlocksVal","pnum","source","el","access","chainable","emptyGet","raw","bulk","htmlSerialize","cloneNode","noCloneChecked","option","legend","area","param","thead","tr","col","td","optgroup","tfoot","colgroup","caption","th","eventName","change","focusin","rformElems","rkeyEvent","rmouseEvent","rfocusMorph","rtypenamespace","t","handleObjIn","special","eventHandle","handleObj","handlers","namespaces","origType","elemData","triggered","dispatch","delegateType","bindType","namespace","delegateCount","setup","mappedTypes","origCount","teardown","trigger","onlyHandlers","ontype","bubbleType","eventPath","Event","isTrigger","rnamespace","noBubble","isPropagationStopped","preventDefault","isDefaultPrevented","fix","handlerQueue","delegateTarget","preDispatch","currentTarget","isImmediatePropagationStopped","stopPropagation","postDispatch","sel","isNaN","originalEvent","fixHook","fixHooks","mouseHooks","keyHooks","srcElement","metaKey","original","charCode","keyCode","eventDoc","fromElement","pageX","clientX","scrollLeft","clientLeft","pageY","clientY","scrollTop","clientTop","relatedTarget","toElement","load","blur","click","beforeunload","returnValue","simulate","isSimulated","defaultPrevented","timeStamp","cancelBubble","stopImmediatePropagation","mouseenter","mouseleave","pointerenter","pointerleave","related","form","_submitBubble","propertyName","_justChanged","attaches","rinlinejQuery","rnoshimcache","rxhtmlTag","rnoInnerhtml","safeFragment","fragmentDiv","dataAndEvents","deepDataAndEvents","destElements","srcElements","inPage","forceAcceptData","append","prepend","insertBefore","before","after","replaceWith","replaceChild","prependTo","insertAfter","replaceAll","insert","HTML","BODY","rmargin","swap","old","computeStyleTests","divStyle","pixelPositionVal","boxSizingReliableVal","reliableMarginLeftVal","pixelMarginRightVal","reliableMarginRightVal","getComputedStyle","marginLeft","marginRight","reliableHiddenOffsetsVal","getClientRects","borderCollapse","cssFloat","backgroundClip","clearCloneStyle","MozBoxSizing","WebkitBoxSizing","reliableHiddenOffsets","pixelMarginRight","pixelPosition","reliableMarginRight","reliableMarginLeft","rposition","view","opener","computed","minWidth","maxWidth","getPropertyValue","currentStyle","left","rs","rsLeft","runtimeStyle","pixelLeft","ralpha","ropacity","rdisplayswap","cssShow","position","visibility","cssNormalTransform","letterSpacing","fontWeight","animationIterationCount","columnCount","fillOpacity","flexGrow","flexShrink","lineHeight","order","orphans","widows","zIndex","cssProps","float","origName","set","isFinite","$1","getBoundingClientRect","margin","padding","border","suffix","expanded","parts","propHooks","eased","step","linear","p","swing","cos","PI","timerId","rrun","*","tweener","prefilter","speed","opt","speeds","fadeTo","to","animate","optall","doAnimation","finish","stopQueue","timers","cssFn","slideDown","slideUp","slideToggle","fadeIn","fadeOut","fadeToggle","interval","setInterval","clearInterval","slow","fast","delay","time","timeout","clearTimeout","getSetAttribute","hrefNormalized","checkOn","optSelected","enctype","optDisabled","radioValue","rreturn","rspaces","valHooks","optionSet","scrollHeight","nodeHook","boolHook","ruseDefault","getSetInput","removeAttr","nType","attrHooks","propName","attrNames","propFix","getter","setAttributeNode","createAttribute","coords","contenteditable","rfocusable","rclickable","removeProp","tabindex","parseInt","for","class","rclass","addClass","classes","curValue","clazz","finalValue","removeClass","toggleClass","stateVal","classNames","hasClass","hover","fnOver","fnOut","nonce","rquery","rvalidtokens","JSON","parse","requireNonComma","depth","str","comma","open","Function","parseXML","DOMParser","parseFromString","async","loadXML","rhash","rts","rheaders","rlocalProtocol","rnoContent","rprotocol","rurl","allTypes","ajaxLocation","ajaxLocParts","active","lastModified","etag","url","isLocal","processData","contentType","accepts","json","* text","text html","text json","text xml","ajaxSetup","settings","ajaxPrefilter","ajaxTransport","ajax","status","nativeStatusText","headers","success","modified","statusText","timeoutTimer","transport","responseHeadersString","ifModified","cacheURL","callbackContext","statusCode","fireGlobals","globalEventContext","completeDeferred","responseHeaders","requestHeaders","requestHeadersNames","strAbort","getAllResponseHeaders","setRequestHeader","lname","overrideMimeType","code","abort","finalText","method","crossDomain","hasContent","beforeSend","send","getJSON","getScript","throws","wrapAll","wrapInner","unwrap","visible","r20","rCRLF","rsubmitterTypes","rsubmittable","encodeURIComponent","serialize","serializeArray","xhr","documentMode","xhrId","xhrCallbacks","xhrSupported","cors","username","xhrFields","isAbort","onreadystatechange","responseText","script","text script","head","scriptCharset","charset","onload","oldCallbacks","rjsonp","jsonp","jsonpCallback","originalSettings","callbackName","overwritten","responseContainer","jsonProp","keepScripts","parsed","_load","params","animated","offset","setOffset","curPosition","curLeft","curCSSTop","curTop","curOffset","curCSSLeft","calculatePosition","curElem","using","win","box","pageYOffset","pageXOffset","offsetParent","parentOffset","scrollTo","Height","Width","defaultExtra","funcName","bind","unbind","delegate","undelegate","size","andSelf","define","amd","_jQuery","_$","$","noConflict","addEvent","addClickEvent","getAncestor","addDetailsPolyfill","statechange","summary","__details","__summary","__content","NATIVE_DETAILS","hasOpenAttr","__twisty","started","details","item","openAttr","twisty","resetForm","$agreeNaa","updateButton","$naa","$submit","$errorMessageNaa","dirty","checkDeedIsSigned","redirect","maxTries","auth_code","GOVUK","SelectionButtons","elmsOrSelector","selectedClass","focusedClass","radioClass","checkboxClass","optionName","optionObj","setInitialState","$elms","addEvents","addElementLevelEvents","addDocumentLevelEvents","elm","$elm","labelClass","markSelected","markFocused","radioName","clickHandler","getClickHandler","focusHandler","getFocusHandler","level","focusEvent","destroy"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy9Vc2VyMS93b3JrLXJlcG8vZGV2LWVudi9hcHBzL2JvcnJvd2VyLWZyb250ZW5kL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCIvVXNlcnMvVXNlcjEvd29yay1yZXBvL2Rldi1lbnYvYXBwcy9ib3Jyb3dlci1mcm9udGVuZC9hcHBsaWNhdGlvbi9hc3NldHMvc3JjL2phdmFzY3JpcHRzL3ZlbmRvci9kZXRhaWxzLnBvbHlmaWxsLmpzIiwiL1VzZXJzL1VzZXIxL3dvcmstcmVwby9kZXYtZW52L2FwcHMvYm9ycm93ZXItZnJvbnRlbmQvYXBwbGljYXRpb24vYXNzZXRzL3NyYy9qYXZhc2NyaXB0cy9tb2R1bGVzL2FjY2VwdC1uYWEuanMiLCIvVXNlcnMvVXNlcjEvd29yay1yZXBvL2Rldi1lbnYvYXBwcy9ib3Jyb3dlci1mcm9udGVuZC9hcHBsaWNhdGlvbi9hc3NldHMvc3JjL2phdmFzY3JpcHRzL21vZHVsZXMvY29uZmlybWluZy1kZWVkLmpzIiwiL1VzZXJzL1VzZXIxL3dvcmstcmVwby9kZXYtZW52L2FwcHMvYm9ycm93ZXItZnJvbnRlbmQvbm9kZV9tb2R1bGVzL2dvdnVrX2Zyb250ZW5kX3Rvb2xraXQvamF2YXNjcmlwdHMvZ292dWsvc2VsZWN0aW9uLWJ1dHRvbnMuanMiLCIvVXNlcnMvVXNlcjEvd29yay1yZXBvL2Rldi1lbnYvYXBwcy9ib3Jyb3dlci1mcm9udGVuZC9hcHBsaWNhdGlvbi9hc3NldHMvc3JjL2phdmFzY3JpcHRzL21vZHVsZXMvc2VsZWN0aW9uLWJ1dHRvbnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYxLjEyLjRcbiAqIGh0dHA6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cDovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNi0wNS0yMFQxNzoxN1pcbiAqL1xuXG4oZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0odHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDE4K1xuLy8gQ2FuJ3QgYmUgaW4gc3RyaWN0IG1vZGUsIHNldmVyYWwgbGlicyBpbmNsdWRpbmcgQVNQLk5FVCB0cmFjZVxuLy8gdGhlIHN0YWNrIHZpYSBhcmd1bWVudHMuY2FsbGVyLmNhbGxlZSBhbmQgRmlyZWZveCBkaWVzIGlmXG4vLyB5b3UgdHJ5IHRvIHRyYWNlIHRocm91Z2ggXCJ1c2Ugc3RyaWN0XCIgY2FsbCBjaGFpbnMuICgjMTMzMzUpXG4vL1widXNlIHN0cmljdFwiO1xudmFyIGRlbGV0ZWRJZHMgPSBbXTtcblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG52YXIgc2xpY2UgPSBkZWxldGVkSWRzLnNsaWNlO1xuXG52YXIgY29uY2F0ID0gZGVsZXRlZElkcy5jb25jYXQ7XG5cbnZhciBwdXNoID0gZGVsZXRlZElkcy5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGRlbGV0ZWRJZHMuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMS4xMi40XCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xLCBJRTw5XG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxcblxuXHQvLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcblx0cm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFtcXGRhLXpdKS9naSxcblxuXHQvLyBVc2VkIGJ5IGpRdWVyeS5jYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5cdGZjYW1lbENhc2UgPSBmdW5jdGlvbiggYWxsLCBsZXR0ZXIgKSB7XG5cdFx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gU3RhcnQgd2l0aCBhbiBlbXB0eSBzZWxlY3RvclxuXHRzZWxlY3RvcjogXCJcIixcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cdFx0cmV0dXJuIG51bSAhPSBudWxsID9cblxuXHRcdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdFx0KCBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdICkgOlxuXG5cdFx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0XHRzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXHRcdHJldC5jb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogZGVsZXRlZElkcy5zb3J0LFxuXHRzcGxpY2U6IGRlbGV0ZWRJZHMuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgc3JjLCBjb3B5SXNBcnJheSwgY29weSwgbmFtZSwgb3B0aW9ucywgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBza2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gZXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0galF1ZXJ5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc0FycmF5KCBzcmMgKSA/IHNyYyA6IFtdO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdC8vIFNlZSB0ZXN0L3VuaXQvY29yZS5qcyBmb3IgZGV0YWlscyBjb25jZXJuaW5nIGlzRnVuY3Rpb24uXG5cdC8vIFNpbmNlIHZlcnNpb24gMS4zLCBET00gbWV0aG9kcyBhbmQgZnVuY3Rpb25zIGxpa2UgYWxlcnRcblx0Ly8gYXJlbid0IHN1cHBvcnRlZC4gVGhleSByZXR1cm4gZmFsc2Ugb24gSUUgKCMyOTY4KS5cblx0aXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LnR5cGUoIG9iaiApID09PSBcImZ1bmN0aW9uXCI7XG5cdH0sXG5cblx0aXNBcnJheTogQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwiYXJyYXlcIjtcblx0fSxcblxuXHRpc1dpbmRvdzogZnVuY3Rpb24oIG9iaiApIHtcblx0XHQvKiBqc2hpbnQgZXFlcWVxOiBmYWxzZSAqL1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT0gb2JqLndpbmRvdztcblx0fSxcblxuXHRpc051bWVyaWM6IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAobnVsbHx0cnVlfGZhbHNlfFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdC8vIGFkZGluZyAxIGNvcnJlY3RzIGxvc3Mgb2YgcHJlY2lzaW9uIGZyb20gcGFyc2VGbG9hdCAoIzE1MTAwKVxuXHRcdHZhciByZWFsU3RyaW5nT2JqID0gb2JqICYmIG9iai50b1N0cmluZygpO1xuXHRcdHJldHVybiAhalF1ZXJ5LmlzQXJyYXkoIG9iaiApICYmICggcmVhbFN0cmluZ09iaiAtIHBhcnNlRmxvYXQoIHJlYWxTdHJpbmdPYmogKSArIDEgKSA+PSAwO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIGtleTtcblxuXHRcdC8vIE11c3QgYmUgYW4gT2JqZWN0LlxuXHRcdC8vIEJlY2F1c2Ugb2YgSUUsIHdlIGFsc28gaGF2ZSB0byBjaGVjayB0aGUgcHJlc2VuY2Ugb2YgdGhlIGNvbnN0cnVjdG9yIHByb3BlcnR5LlxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IERPTSBub2RlcyBhbmQgd2luZG93IG9iamVjdHMgZG9uJ3QgcGFzcyB0aHJvdWdoLCBhcyB3ZWxsXG5cdFx0aWYgKCAhb2JqIHx8IGpRdWVyeS50eXBlKCBvYmogKSAhPT0gXCJvYmplY3RcIiB8fCBvYmoubm9kZVR5cGUgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHR0cnkge1xuXG5cdFx0XHQvLyBOb3Qgb3duIGNvbnN0cnVjdG9yIHByb3BlcnR5IG11c3QgYmUgT2JqZWN0XG5cdFx0XHRpZiAoIG9iai5jb25zdHJ1Y3RvciAmJlxuXHRcdFx0XHQhaGFzT3duLmNhbGwoIG9iaiwgXCJjb25zdHJ1Y3RvclwiICkgJiZcblx0XHRcdFx0IWhhc093bi5jYWxsKCBvYmouY29uc3RydWN0b3IucHJvdG90eXBlLCBcImlzUHJvdG90eXBlT2ZcIiApICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdC8vIElFOCw5IFdpbGwgdGhyb3cgZXhjZXB0aW9ucyBvbiBjZXJ0YWluIGhvc3Qgb2JqZWN0cyAjOTg5N1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBIYW5kbGUgaXRlcmF0aW9uIG92ZXIgaW5oZXJpdGVkIHByb3BlcnRpZXMgYmVmb3JlIG93biBwcm9wZXJ0aWVzLlxuXHRcdGlmICggIXN1cHBvcnQub3duRmlyc3QgKSB7XG5cdFx0XHRmb3IgKCBrZXkgaW4gb2JqICkge1xuXHRcdFx0XHRyZXR1cm4gaGFzT3duLmNhbGwoIG9iaiwga2V5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3duIHByb3BlcnRpZXMgYXJlIGVudW1lcmF0ZWQgZmlyc3RseSwgc28gdG8gc3BlZWQgdXAsXG5cdFx0Ly8gaWYgbGFzdCBvbmUgaXMgb3duLCB0aGVuIGFsbCBwcm9wZXJ0aWVzIGFyZSBvd24uXG5cdFx0Zm9yICgga2V5IGluIG9iaiApIHt9XG5cblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgfHwgaGFzT3duLmNhbGwoIG9iaiwga2V5ICk7XG5cdH0sXG5cblx0dHlwZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdFx0fVxuXHRcdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdFx0dHlwZW9mIG9iajtcblx0fSxcblxuXHQvLyBXb3JrYXJvdW5kcyBiYXNlZCBvbiBmaW5kaW5ncyBieSBKaW0gRHJpc2NvbGxcblx0Ly8gaHR0cDovL3dlYmxvZ3MuamF2YS5uZXQvYmxvZy9kcmlzY29sbC9hcmNoaXZlLzIwMDkvMDkvMDgvZXZhbC1qYXZhc2NyaXB0LWdsb2JhbC1jb250ZXh0XG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBkYXRhICkge1xuXHRcdGlmICggZGF0YSAmJiBqUXVlcnkudHJpbSggZGF0YSApICkge1xuXG5cdFx0XHQvLyBXZSB1c2UgZXhlY1NjcmlwdCBvbiBJbnRlcm5ldCBFeHBsb3JlclxuXHRcdFx0Ly8gV2UgdXNlIGFuIGFub255bW91cyBmdW5jdGlvbiBzbyB0aGF0IGNvbnRleHQgaXMgd2luZG93XG5cdFx0XHQvLyByYXRoZXIgdGhhbiBqUXVlcnkgaW4gRmlyZWZveFxuXHRcdFx0KCB3aW5kb3cuZXhlY1NjcmlwdCB8fCBmdW5jdGlvbiggZGF0YSApIHtcblx0XHRcdFx0d2luZG93WyBcImV2YWxcIiBdLmNhbGwoIHdpbmRvdywgZGF0YSApOyAvLyBqc2NzOmlnbm9yZSByZXF1aXJlRG90Tm90YXRpb25cblx0XHRcdH0gKSggZGF0YSApO1xuXHRcdH1cblx0fSxcblxuXHQvLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG5cdC8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3Milcblx0Y2FtZWxDYXNlOiBmdW5jdGlvbiggc3RyaW5nICkge1xuXHRcdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xuXHR9LFxuXG5cdG5vZGVOYW1lOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xLCBJRTw5XG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0dmFyIGxlbjtcblxuXHRcdGlmICggYXJyICkge1xuXHRcdFx0aWYgKCBpbmRleE9mICkge1xuXHRcdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0bGVuID0gYXJyLmxlbmd0aDtcblx0XHRcdGkgPSBpID8gaSA8IDAgPyBNYXRoLm1heCggMCwgbGVuICsgaSApIDogaSA6IDA7XG5cblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXG5cdFx0XHRcdC8vIFNraXAgYWNjZXNzaW5nIGluIHNwYXJzZSBhcnJheXNcblx0XHRcdFx0aWYgKCBpIGluIGFyciAmJiBhcnJbIGkgXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0d2hpbGUgKCBqIDwgbGVuICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqKysgXTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gV29ya2Fyb3VuZCBjYXN0aW5nIG9mIC5sZW5ndGggdG8gTmFOIG9uIG90aGVyd2lzZSBhcnJheWxpa2Ugb2JqZWN0cyAoZS5nLiwgTm9kZUxpc3RzKVxuXHRcdGlmICggbGVuICE9PSBsZW4gKSB7XG5cdFx0XHR3aGlsZSAoIHNlY29uZFsgaiBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaisrIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG5cdC8vIGFyZ3VtZW50cy5cblx0cHJveHk6IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0XHR2YXIgYXJncywgcHJveHksIHRtcDtcblxuXHRcdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdFx0Y29udGV4dCA9IGZuO1xuXHRcdFx0Zm4gPSB0bXA7XG5cdFx0fVxuXG5cdFx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0XHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBTaW11bGF0ZWQgYmluZFxuXHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0XHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdFx0fTtcblxuXHRcdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRcdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdFx0cmV0dXJuIHByb3h5O1xuXHR9LFxuXG5cdG5vdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuICsoIG5ldyBEYXRlKCkgKTtcblx0fSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG4vLyBKU0hpbnQgd291bGQgZXJyb3Igb24gdGhpcyBjb2RlIGR1ZSB0byB0aGUgU3ltYm9sIG5vdCBiZWluZyBkZWZpbmVkIGluIEVTNS5cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5qc2hpbnRyYyB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGp1c3QgZGlzYWJsZSBKU0hpbnQgZm9yIHRoZXNlXG4vLyB0aHJlZSBsaW5lcy5cbi8qIGpzaGludCBpZ25vcmU6IHN0YXJ0ICovXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGRlbGV0ZWRJZHNbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuLyoganNoaW50IGlnbm9yZTogZW5kICovXG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiBpT1MgOC4yIChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXG5cdGlmICggdHlwZSA9PT0gXCJmdW5jdGlvblwiIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjIuMVxuICogaHR0cDovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNS0xMC0xN1xuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gR2VuZXJhbC1wdXJwb3NlIGNvbnN0YW50c1xuXHRNQVhfTkVHQVRJVkUgPSAxIDw8IDMxLFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXFxceDAwLVxcXFx4YTBdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblxuXHRyYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cCggXCI9XCIgKyB3aGl0ZXNwYWNlICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLCBcImdcIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cdHJlc2NhcGUgPSAvJ3xcXFxcL2csXG5cblx0Ly8gQ1NTIGVzY2FwZXMgaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9O1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG5pZHNlbGVjdCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXG5cdFx0aWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHtcblx0XHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0fVxuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXG5cdFx0XHRcdC8vIHFTQSBsb29rcyBvdXRzaWRlIEVsZW1lbnQgY29udGV4dCwgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudFxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB3b3JrYXJvdW5kIHRlY2huaXF1ZVxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PThcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0fSBlbHNlIGlmICggY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRpZiAoIChuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkpICkge1xuXHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJlc2NhcGUsIFwiXFxcXCQmXCIgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKG5pZCA9IGV4cGFuZG8pICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0bmlkc2VsZWN0ID0gcmlkZW50aWZpZXIudGVzdCggbmlkICkgPyBcIiNcIiArIG5pZCA6IFwiW2lkPSdcIiArIG5pZCArIFwiJ11cIjtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IG5pZHNlbGVjdCArIFwiIFwiICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZGl2IGFuZCBleHBlY3RzIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZGl2ICk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBkaXYucGFyZW50Tm9kZSApIHtcblx0XHRcdGRpdi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBkaXYgKTtcblx0XHR9XG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRkaXYgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0KCB+Yi5zb3VyY2VJbmRleCB8fCBNQVhfTkVHQVRJVkUgKSAtXG5cdFx0XHQoIH5hLnNvdXJjZUluZGV4IHx8IE1BWF9ORUdBVElWRSApO1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3Rcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBwYXJlbnQsXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRpZiAoIChwYXJlbnQgPSBkb2N1bWVudC5kZWZhdWx0VmlldykgJiYgcGFyZW50LnRvcCAhPT0gcGFyZW50ICkge1xuXHRcdC8vIFN1cHBvcnQ6IElFIDExXG5cdFx0aWYgKCBwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHBhcmVudC5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBwYXJlbnQuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRwYXJlbnQuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRkaXYuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFkaXYuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRkaXYuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRyZXR1cm4gIWRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZGl2ICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBJRCBmaW5kIGFuZCBmaWx0ZXJcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBtID8gWyBtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHQvLyBTdXBwb3J0OiBJRTYvN1xuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRkZWxldGUgRXhwci5maW5kW1wiSURcIl07XG5cblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZGl2ICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZGl2LCBcImRpdlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZGl2LCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbihcInxcIikgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXHRcdFx0cmV0dXJuIGEgPT09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGF0dHJpYnV0ZSBzZWxlY3RvcnMgYXJlIHF1b3RlZFxuXHRleHByID0gZXhwci5yZXBsYWNlKCByYXR0cmlidXRlUXVvdGVzLCBcIj0nJDEnXVwiICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFjb21waWxlckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cdFx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlKSB7fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKG5vZGUgPSBlbGVtW2krK10pICkge1xuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbM10gPSAoIG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzJdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWzNdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWzRdID0gKyggbWF0Y2hbNF0gPyBtYXRjaFs1XSArIChtYXRjaFs2XSB8fCAxKSA6IDIgKiAoIG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWzZdICYmIG1hdGNoWzJdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwcltcIkNISUxEXCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGgpICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQocGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkpICYmXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIgKTtcblx0XHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBhcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gbm9kZVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFswXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdChsYW5nIHx8IFwiXCIpICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2U7XG5cdFx0fSxcblxuXHRcdFwiZGlzYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0pLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFswXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9KTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBkaXIgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHwgKG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0aWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsgZGlyIF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBkaXIgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRzdXBwb3J0LmdldEJ5SWQgJiYgY29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdFx0XHRFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdjEgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZGl2MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdGRpdi5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGRpdi5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIikgPT09IFwiI1wiIDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdGRpdi5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGRpdi5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdHJldHVybiBkaXYuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT0gbnVsbDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0pO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59KSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW1xcdy1dKylcXHMqXFwvPz4oPzo8XFwvXFwxPnwpJC8gKTtcblxuXG5cbnZhciByaXNTaW1wbGUgPSAvXi5bXjojXFxbXFwuLF0qJC87XG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cblx0fVxuXG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cblx0fVxuXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRpZiAoIHJpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcblx0XHR9XG5cblx0XHRxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzICk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gKCBqUXVlcnkuaW5BcnJheSggZWxlbSwgcXVhbGlmaWVyICkgPiAtMSApICE9PSBub3Q7XG5cdH0gKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdHJldHVybiBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSA/XG5cdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdIDpcblx0XHRqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdFx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0c2VsZiA9IHRoaXMsXG5cdFx0XHRsZW4gPSBzZWxmLmxlbmd0aDtcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0Ly8gTmVlZGVkIGJlY2F1c2UgJCggc2VsZWN0b3IsIGNvbnRleHQgKSBiZWNvbWVzICQoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlKCByZXQgKSA6IHJldCApO1xuXHRcdHJldC5zZWxlY3RvciA9IHRoaXMuc2VsZWN0b3IgPyB0aGlzLnNlbGVjdG9yICsgXCIgXCIgKyBzZWxlY3RvciA6IHNlbGVjdG9yO1xuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSopKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIGluaXQgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3Rvci5jaGFyQXQoIDAgKSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IuY2hhckF0KCBzZWxlY3Rvci5sZW5ndGggLSAxICkgPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdC8vIENoZWNrIHBhcmVudE5vZGUgdG8gY2F0Y2ggd2hlbiBCbGFja2JlcnJ5IDQuNiByZXR1cm5zXG5cdFx0XHRcdFx0Ly8gbm9kZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAjNjk2M1xuXHRcdFx0XHRcdGlmICggZWxlbSAmJiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSBJRSBhbmQgT3BlcmEgcmV0dXJuIGl0ZW1zXG5cdFx0XHRcdFx0XHQvLyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCAhPT0gbWF0Y2hbIDIgXSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJvb3RqUXVlcnkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB3ZSBpbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0aGlzLmNvbnRleHQgPSBkb2N1bWVudDtcblx0XHRcdFx0XHR0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzLmNvbnRleHQgPSB0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHR5cGVvZiByb290LnJlYWR5ICE9PSBcInVuZGVmaW5lZFwiID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3Rvci5zZWxlY3RvciAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yLnNlbGVjdG9yO1xuXHRcdFx0dGhpcy5jb250ZXh0ID0gc2VsZWN0b3IuY29udGV4dDtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIG1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0dGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsZW4gPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHRwb3MgPSBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApIHx8IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9ycywgY29udGV4dCB8fCB0aGlzLmNvbnRleHQgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggcG9zID9cblx0XHRcdFx0XHRwb3MuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpblxuXHQvLyB0aGUgbWF0Y2hlZCBzZXQgb2YgZWxlbWVudHNcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIGluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuaW5BcnJheSggdGhpc1sgMCBdLCBqUXVlcnkoIGVsZW0gKSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBqUXVlcnkuaW5BcnJheShcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW0sIHRoaXMgKTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0ZG8ge1xuXHRcdGN1ciA9IGN1clsgZGlyIF07XG5cdH0gd2hpbGUgKCBjdXIgJiYgY3VyLm5vZGVUeXBlICE9PSAxICk7XG5cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJpZnJhbWVcIiApID9cblx0XHRcdGVsZW0uY29udGVudERvY3VtZW50IHx8IGVsZW0uY29udGVudFdpbmRvdy5kb2N1bWVudCA6XG5cdFx0XHRqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIHJldCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRyZXQgPSBqUXVlcnkudW5pcXVlU29ydCggcmV0ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdHJldCA9IHJldC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90d2hpdGUgPSAoIC9cXFMrL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgalF1ZXJ5LnR5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHRydWU7XG5cdFx0XHRcdGlmICggIW1lbW9yeSApIHtcblx0XHRcdFx0XHRzZWxmLmRpc2FibGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBsaXN0ZW5lciBsaXN0LCBmaW5hbCBzdGF0ZVxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgXCJyZWplY3RlZFwiIF0sXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICkgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBmbnNbIGkgXSApICYmIGZuc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkWyBkb25lIHwgZmFpbCB8IHByb2dyZXNzIF0gZm9yIGZvcndhcmRpbmcgYWN0aW9ucyB0byBuZXdEZWZlclxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyA9PT0gcHJvbWlzZSA/IG5ld0RlZmVyLnByb21pc2UoKSA6IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0cHJvbWlzZS5waXBlID0gcHJvbWlzZS50aGVuO1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgMyBdO1xuXG5cdFx0XHQvLyBwcm9taXNlWyBkb25lIHwgZmFpbCB8IHByb2dyZXNzIF0gPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0Ly8gc3RhdGUgPSBbIHJlc29sdmVkIHwgcmVqZWN0ZWQgXVxuXHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cblx0XHRcdFx0Ly8gWyByZWplY3RfbGlzdCB8IHJlc29sdmVfbGlzdCBdLmRpc2FibGU7IHByb2dyZXNzX2xpc3QubG9ja1xuXHRcdFx0XHR9LCB0dXBsZXNbIGkgXiAxIF1bIDIgXS5kaXNhYmxlLCB0dXBsZXNbIDIgXVsgMiBdLmxvY2sgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gZGVmZXJyZWRbIHJlc29sdmUgfCByZWplY3QgfCBub3RpZnkgXVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gcHJvbWlzZSA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHN1Ym9yZGluYXRlIC8qICwgLi4uLCBzdWJvcmRpbmF0ZU4gKi8gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXHRcdFx0bGVuZ3RoID0gcmVzb2x2ZVZhbHVlcy5sZW5ndGgsXG5cblx0XHRcdC8vIHRoZSBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGxlbmd0aCAhPT0gMSB8fFxuXHRcdFx0XHQoIHN1Ym9yZGluYXRlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBzdWJvcmRpbmF0ZS5wcm9taXNlICkgKSA/IGxlbmd0aCA6IDAsXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWQuXG5cdFx0XHQvLyBJZiByZXNvbHZlVmFsdWVzIGNvbnNpc3Qgb2Ygb25seSBhIHNpbmdsZSBEZWZlcnJlZCwganVzdCB1c2UgdGhhdC5cblx0XHRcdGRlZmVycmVkID0gcmVtYWluaW5nID09PSAxID8gc3Vib3JkaW5hdGUgOiBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gVXBkYXRlIGZ1bmN0aW9uIGZvciBib3RoIHJlc29sdmUgYW5kIHByb2dyZXNzIHZhbHVlc1xuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpLCBjb250ZXh0cywgdmFsdWVzICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdGNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggdmFsdWVzID09PSBwcm9ncmVzc1ZhbHVlcyApIHtcblx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGNvbnRleHRzLCB2YWx1ZXMgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY29udGV4dHMsIHZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH0sXG5cblx0XHRcdHByb2dyZXNzVmFsdWVzLCBwcm9ncmVzc0NvbnRleHRzLCByZXNvbHZlQ29udGV4dHM7XG5cblx0XHQvLyBhZGQgbGlzdGVuZXJzIHRvIERlZmVycmVkIHN1Ym9yZGluYXRlczsgdHJlYXQgb3RoZXJzIGFzIHJlc29sdmVkXG5cdFx0aWYgKCBsZW5ndGggPiAxICkge1xuXHRcdFx0cHJvZ3Jlc3NWYWx1ZXMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xuXHRcdFx0cHJvZ3Jlc3NDb250ZXh0cyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0ucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXS5wcm9taXNlKClcblx0XHRcdFx0XHRcdC5wcm9ncmVzcyggdXBkYXRlRnVuYyggaSwgcHJvZ3Jlc3NDb250ZXh0cywgcHJvZ3Jlc3NWYWx1ZXMgKSApXG5cdFx0XHRcdFx0XHQuZG9uZSggdXBkYXRlRnVuYyggaSwgcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICkgKVxuXHRcdFx0XHRcdFx0LmZhaWwoIGRlZmVycmVkLnJlamVjdCApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC0tcmVtYWluaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gaWYgd2UncmUgbm90IHdhaXRpbmcgb24gYW55dGhpbmcsIHJlc29sdmUgdGhlIG1hc3RlclxuXHRcdGlmICggIXJlbWFpbmluZyApIHtcblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0O1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0Ly8gQWRkIHRoZSBjYWxsYmFja1xuXHRqUXVlcnkucmVhZHkucHJvbWlzZSgpLmRvbmUoIGZuICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSG9sZCAob3IgcmVsZWFzZSkgdGhlIHJlYWR5IGV2ZW50XG5cdGhvbGRSZWFkeTogZnVuY3Rpb24oIGhvbGQgKSB7XG5cdFx0aWYgKCBob2xkICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXG5cdFx0Ly8gVHJpZ2dlciBhbnkgYm91bmQgcmVhZHkgZXZlbnRzXG5cdFx0aWYgKCBqUXVlcnkuZm4udHJpZ2dlckhhbmRsZXIgKSB7XG5cdFx0XHRqUXVlcnkoIGRvY3VtZW50ICkudHJpZ2dlckhhbmRsZXIoIFwicmVhZHlcIiApO1xuXHRcdFx0alF1ZXJ5KCBkb2N1bWVudCApLm9mZiggXCJyZWFkeVwiICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8qKlxuICogQ2xlYW4tdXAgbWV0aG9kIGZvciBkb20gcmVhZHkgZXZlbnRzXG4gKi9cbmZ1bmN0aW9uIGRldGFjaCgpIHtcblx0aWYgKCBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXG5cdH0gZWxzZSB7XG5cdFx0ZG9jdW1lbnQuZGV0YWNoRXZlbnQoIFwib25yZWFkeXN0YXRlY2hhbmdlXCIsIGNvbXBsZXRlZCApO1xuXHRcdHdpbmRvdy5kZXRhY2hFdmVudCggXCJvbmxvYWRcIiwgY29tcGxldGVkICk7XG5cdH1cbn1cblxuLyoqXG4gKiBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuICovXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cblx0Ly8gcmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIGlzIGdvb2QgZW5vdWdoIGZvciB1cyB0byBjYWxsIHRoZSBkb20gcmVhZHkgaW4gb2xkSUVcblx0aWYgKCBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyIHx8XG5cdFx0d2luZG93LmV2ZW50LnR5cGUgPT09IFwibG9hZFwiIHx8XG5cdFx0ZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiICkge1xuXG5cdFx0ZGV0YWNoKCk7XG5cdFx0alF1ZXJ5LnJlYWR5KCk7XG5cdH1cbn1cblxualF1ZXJ5LnJlYWR5LnByb21pc2UgPSBmdW5jdGlvbiggb2JqICkge1xuXHRpZiAoICFyZWFkeUxpc3QgKSB7XG5cblx0XHRyZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxuXHRcdC8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG5cdFx0Ly8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG5cdFx0Ly8gU3VwcG9ydDogSUU2LTEwXG5cdFx0Ly8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5cdFx0aWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0XHRcdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdFx0XHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxuXHRcdC8vIFN0YW5kYXJkcy1iYXNlZCBicm93c2VycyBzdXBwb3J0IERPTUNvbnRlbnRMb2FkZWRcblx0XHR9IGVsc2UgaWYgKCBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyICkge1xuXG5cdFx0XHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0XHRcdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXG5cdFx0Ly8gSWYgSUUgZXZlbnQgbW9kZWwgaXMgdXNlZFxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEVuc3VyZSBmaXJpbmcgYmVmb3JlIG9ubG9hZCwgbWF5YmUgbGF0ZSBidXQgc2FmZSBhbHNvIGZvciBpZnJhbWVzXG5cdFx0XHRkb2N1bWVudC5hdHRhY2hFdmVudCggXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiwgY29tcGxldGVkICk7XG5cblx0XHRcdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdFx0XHR3aW5kb3cuYXR0YWNoRXZlbnQoIFwib25sb2FkXCIsIGNvbXBsZXRlZCApO1xuXG5cdFx0XHQvLyBJZiBJRSBhbmQgbm90IGEgZnJhbWVcblx0XHRcdC8vIGNvbnRpbnVhbGx5IGNoZWNrIHRvIHNlZSBpZiB0aGUgZG9jdW1lbnQgaXMgcmVhZHlcblx0XHRcdHZhciB0b3AgPSBmYWxzZTtcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dG9wID0gd2luZG93LmZyYW1lRWxlbWVudCA9PSBudWxsICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0aWYgKCB0b3AgJiYgdG9wLmRvU2Nyb2xsICkge1xuXHRcdFx0XHQoIGZ1bmN0aW9uIGRvU2Nyb2xsQ2hlY2soKSB7XG5cdFx0XHRcdFx0aWYgKCAhalF1ZXJ5LmlzUmVhZHkgKSB7XG5cblx0XHRcdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSB0cmljayBieSBEaWVnbyBQZXJpbmlcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cDovL2phdmFzY3JpcHQubndib3guY29tL0lFQ29udGVudExvYWRlZC9cblx0XHRcdFx0XHRcdFx0dG9wLmRvU2Nyb2xsKCBcImxlZnRcIiApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB3aW5kb3cuc2V0VGltZW91dCggZG9TY3JvbGxDaGVjaywgNTAgKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gZGV0YWNoIGFsbCBkb20gcmVhZHkgZXZlbnRzXG5cdFx0XHRcdFx0XHRkZXRhY2goKTtcblxuXHRcdFx0XHRcdFx0Ly8gYW5kIGV4ZWN1dGUgYW55IHdhaXRpbmcgZnVuY3Rpb25zXG5cdFx0XHRcdFx0XHRqUXVlcnkucmVhZHkoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKSgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVhZHlMaXN0LnByb21pc2UoIG9iaiApO1xufTtcblxuLy8gS2ljayBvZmYgdGhlIERPTSByZWFkeSBjaGVjayBldmVuIGlmIHRoZSB1c2VyIGRvZXMgbm90XG5qUXVlcnkucmVhZHkucHJvbWlzZSgpO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBJdGVyYXRpb24gb3ZlciBvYmplY3QncyBpbmhlcml0ZWQgcHJvcGVydGllcyBiZWZvcmUgaXRzIG93blxudmFyIGk7XG5mb3IgKCBpIGluIGpRdWVyeSggc3VwcG9ydCApICkge1xuXHRicmVhaztcbn1cbnN1cHBvcnQub3duRmlyc3QgPSBpID09PSBcIjBcIjtcblxuLy8gTm90ZTogbW9zdCBzdXBwb3J0IHRlc3RzIGFyZSBkZWZpbmVkIGluIHRoZWlyIHJlc3BlY3RpdmUgbW9kdWxlcy5cbi8vIGZhbHNlIHVudGlsIHRoZSB0ZXN0IGlzIHJ1blxuc3VwcG9ydC5pbmxpbmVCbG9ja05lZWRzTGF5b3V0ID0gZmFsc2U7XG5cbi8vIEV4ZWN1dGUgQVNBUCBpbiBjYXNlIHdlIG5lZWQgdG8gc2V0IGJvZHkuc3R5bGUuem9vbVxualF1ZXJ5KCBmdW5jdGlvbigpIHtcblxuXHQvLyBNaW5pZmllZDogdmFyIGEsYixjLGRcblx0dmFyIHZhbCwgZGl2LCBib2R5LCBjb250YWluZXI7XG5cblx0Ym9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcImJvZHlcIiApWyAwIF07XG5cdGlmICggIWJvZHkgfHwgIWJvZHkuc3R5bGUgKSB7XG5cblx0XHQvLyBSZXR1cm4gZm9yIGZyYW1lc2V0IGRvY3MgdGhhdCBkb24ndCBoYXZlIGEgYm9keVxuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFNldHVwXG5cdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7Ym9yZGVyOjA7d2lkdGg6MDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHhcIjtcblx0Ym9keS5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdGlmICggdHlwZW9mIGRpdi5zdHlsZS56b29tICE9PSBcInVuZGVmaW5lZFwiICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdC8vIENoZWNrIGlmIG5hdGl2ZWx5IGJsb2NrLWxldmVsIGVsZW1lbnRzIGFjdCBsaWtlIGlubGluZS1ibG9ja1xuXHRcdC8vIGVsZW1lbnRzIHdoZW4gc2V0dGluZyB0aGVpciBkaXNwbGF5IHRvICdpbmxpbmUnIGFuZCBnaXZpbmdcblx0XHQvLyB0aGVtIGxheW91dFxuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID0gXCJkaXNwbGF5OmlubGluZTttYXJnaW46MDtib3JkZXI6MDtwYWRkaW5nOjFweDt3aWR0aDoxcHg7em9vbToxXCI7XG5cblx0XHRzdXBwb3J0LmlubGluZUJsb2NrTmVlZHNMYXlvdXQgPSB2YWwgPSBkaXYub2Zmc2V0V2lkdGggPT09IDM7XG5cdFx0aWYgKCB2YWwgKSB7XG5cblx0XHRcdC8vIFByZXZlbnQgSUUgNiBmcm9tIGFmZmVjdGluZyBsYXlvdXQgZm9yIHBvc2l0aW9uZWQgZWxlbWVudHMgIzExMDQ4XG5cdFx0XHQvLyBQcmV2ZW50IElFIGZyb20gc2hyaW5raW5nIHRoZSBib2R5IGluIElFIDcgbW9kZSAjMTI4Njlcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdGJvZHkuc3R5bGUuem9vbSA9IDE7XG5cdFx0fVxuXHR9XG5cblx0Ym9keS5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG59ICk7XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZGVsZXRlRXhwYW5kbyA9IHRydWU7XG5cdHRyeSB7XG5cdFx0ZGVsZXRlIGRpdi50ZXN0O1xuXHR9IGNhdGNoICggZSApIHtcblx0XHRzdXBwb3J0LmRlbGV0ZUV4cGFuZG8gPSBmYWxzZTtcblx0fVxuXG5cdC8vIE51bGwgZWxlbWVudHMgdG8gYXZvaWQgbGVha3MgaW4gSUUuXG5cdGRpdiA9IG51bGw7XG59ICkoKTtcbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub0RhdGEgPSBqUXVlcnkubm9EYXRhWyAoIGVsZW0ubm9kZU5hbWUgKyBcIiBcIiApLnRvTG93ZXJDYXNlKCkgXSxcblx0XHRub2RlVHlwZSA9ICtlbGVtLm5vZGVUeXBlIHx8IDE7XG5cblx0Ly8gRG8gbm90IHNldCBkYXRhIG9uIG5vbi1lbGVtZW50IERPTSBub2RlcyBiZWNhdXNlIGl0IHdpbGwgbm90IGJlIGNsZWFyZWQgKCM4MzM1KS5cblx0cmV0dXJuIG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ID9cblx0XHRmYWxzZSA6XG5cblx0XHQvLyBOb2RlcyBhY2NlcHQgZGF0YSB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZDsgcmVqZWN0aW9uIGNhbiBiZSBjb25kaXRpb25hbFxuXHRcdCFub0RhdGEgfHwgbm9EYXRhICE9PSB0cnVlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzaWRcIiApID09PSBub0RhdGE7XG59O1xuXG5cblxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gLyhbQS1aXSkvZztcblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0dmFyIG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJDFcIiApLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZGF0YSA9PT0gXCJ0cnVlXCIgPyB0cnVlIDpcblx0XHRcdFx0XHRkYXRhID09PSBcImZhbHNlXCIgPyBmYWxzZSA6XG5cdFx0XHRcdFx0ZGF0YSA9PT0gXCJudWxsXCIgPyBudWxsIDpcblxuXHRcdFx0XHRcdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdFx0XHRcdFx0K2RhdGEgKyBcIlwiID09PSBkYXRhID8gK2RhdGEgOlxuXHRcdFx0XHRcdHJicmFjZS50ZXN0KCBkYXRhICkgPyBqUXVlcnkucGFyc2VKU09OKCBkYXRhICkgOlxuXHRcdFx0XHRcdGRhdGE7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0alF1ZXJ5LmRhdGEoIGVsZW0sIGtleSwgZGF0YSApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbi8vIGNoZWNrcyBhIGNhY2hlIG9iamVjdCBmb3IgZW1wdGluZXNzXG5mdW5jdGlvbiBpc0VtcHR5RGF0YU9iamVjdCggb2JqICkge1xuXHR2YXIgbmFtZTtcblx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cblx0XHQvLyBpZiB0aGUgcHVibGljIGRhdGEgb2JqZWN0IGlzIGVtcHR5LCB0aGUgcHJpdmF0ZSBpcyBzdGlsbCBlbXB0eVxuXHRcdGlmICggbmFtZSA9PT0gXCJkYXRhXCIgJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9ialsgbmFtZSBdICkgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cdFx0aWYgKCBuYW1lICE9PSBcInRvSlNPTlwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBpbnRlcm5hbERhdGEoIGVsZW0sIG5hbWUsIGRhdGEsIHB2dCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0aWYgKCAhYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdHZhciByZXQsIHRoaXNDYWNoZSxcblx0XHRpbnRlcm5hbEtleSA9IGpRdWVyeS5leHBhbmRvLFxuXG5cdFx0Ly8gV2UgaGF2ZSB0byBoYW5kbGUgRE9NIG5vZGVzIGFuZCBKUyBvYmplY3RzIGRpZmZlcmVudGx5IGJlY2F1c2UgSUU2LTdcblx0XHQvLyBjYW4ndCBHQyBvYmplY3QgcmVmZXJlbmNlcyBwcm9wZXJseSBhY3Jvc3MgdGhlIERPTS1KUyBib3VuZGFyeVxuXHRcdGlzTm9kZSA9IGVsZW0ubm9kZVR5cGUsXG5cblx0XHQvLyBPbmx5IERPTSBub2RlcyBuZWVkIHRoZSBnbG9iYWwgalF1ZXJ5IGNhY2hlOyBKUyBvYmplY3QgZGF0YSBpc1xuXHRcdC8vIGF0dGFjaGVkIGRpcmVjdGx5IHRvIHRoZSBvYmplY3Qgc28gR0MgY2FuIG9jY3VyIGF1dG9tYXRpY2FsbHlcblx0XHRjYWNoZSA9IGlzTm9kZSA/IGpRdWVyeS5jYWNoZSA6IGVsZW0sXG5cblx0XHQvLyBPbmx5IGRlZmluaW5nIGFuIElEIGZvciBKUyBvYmplY3RzIGlmIGl0cyBjYWNoZSBhbHJlYWR5IGV4aXN0cyBhbGxvd3Ncblx0XHQvLyB0aGUgY29kZSB0byBzaG9ydGN1dCBvbiB0aGUgc2FtZSBwYXRoIGFzIGEgRE9NIG5vZGUgd2l0aCBubyBjYWNoZVxuXHRcdGlkID0gaXNOb2RlID8gZWxlbVsgaW50ZXJuYWxLZXkgXSA6IGVsZW1bIGludGVybmFsS2V5IF0gJiYgaW50ZXJuYWxLZXk7XG5cblx0Ly8gQXZvaWQgZG9pbmcgYW55IG1vcmUgd29yayB0aGFuIHdlIG5lZWQgdG8gd2hlbiB0cnlpbmcgdG8gZ2V0IGRhdGEgb24gYW5cblx0Ly8gb2JqZWN0IHRoYXQgaGFzIG5vIGRhdGEgYXQgYWxsXG5cdGlmICggKCAhaWQgfHwgIWNhY2hlWyBpZCBdIHx8ICggIXB2dCAmJiAhY2FjaGVbIGlkIF0uZGF0YSApICkgJiZcblx0XHRkYXRhID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aWYgKCAhaWQgKSB7XG5cblx0XHQvLyBPbmx5IERPTSBub2RlcyBuZWVkIGEgbmV3IHVuaXF1ZSBJRCBmb3IgZWFjaCBlbGVtZW50IHNpbmNlIHRoZWlyIGRhdGFcblx0XHQvLyBlbmRzIHVwIGluIHRoZSBnbG9iYWwgY2FjaGVcblx0XHRpZiAoIGlzTm9kZSApIHtcblx0XHRcdGlkID0gZWxlbVsgaW50ZXJuYWxLZXkgXSA9IGRlbGV0ZWRJZHMucG9wKCkgfHwgalF1ZXJ5Lmd1aWQrKztcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWQgPSBpbnRlcm5hbEtleTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICFjYWNoZVsgaWQgXSApIHtcblxuXHRcdC8vIEF2b2lkIGV4cG9zaW5nIGpRdWVyeSBtZXRhZGF0YSBvbiBwbGFpbiBKUyBvYmplY3RzIHdoZW4gdGhlIG9iamVjdFxuXHRcdC8vIGlzIHNlcmlhbGl6ZWQgdXNpbmcgSlNPTi5zdHJpbmdpZnlcblx0XHRjYWNoZVsgaWQgXSA9IGlzTm9kZSA/IHt9IDogeyB0b0pTT046IGpRdWVyeS5ub29wIH07XG5cdH1cblxuXHQvLyBBbiBvYmplY3QgY2FuIGJlIHBhc3NlZCB0byBqUXVlcnkuZGF0YSBpbnN0ZWFkIG9mIGEga2V5L3ZhbHVlIHBhaXI7IHRoaXMgZ2V0c1xuXHQvLyBzaGFsbG93IGNvcGllZCBvdmVyIG9udG8gdGhlIGV4aXN0aW5nIGNhY2hlXG5cdGlmICggdHlwZW9mIG5hbWUgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0XHRpZiAoIHB2dCApIHtcblx0XHRcdGNhY2hlWyBpZCBdID0galF1ZXJ5LmV4dGVuZCggY2FjaGVbIGlkIF0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y2FjaGVbIGlkIF0uZGF0YSA9IGpRdWVyeS5leHRlbmQoIGNhY2hlWyBpZCBdLmRhdGEsIG5hbWUgKTtcblx0XHR9XG5cdH1cblxuXHR0aGlzQ2FjaGUgPSBjYWNoZVsgaWQgXTtcblxuXHQvLyBqUXVlcnkgZGF0YSgpIGlzIHN0b3JlZCBpbiBhIHNlcGFyYXRlIG9iamVjdCBpbnNpZGUgdGhlIG9iamVjdCdzIGludGVybmFsIGRhdGFcblx0Ly8gY2FjaGUgaW4gb3JkZXIgdG8gYXZvaWQga2V5IGNvbGxpc2lvbnMgYmV0d2VlbiBpbnRlcm5hbCBkYXRhIGFuZCB1c2VyLWRlZmluZWRcblx0Ly8gZGF0YS5cblx0aWYgKCAhcHZ0ICkge1xuXHRcdGlmICggIXRoaXNDYWNoZS5kYXRhICkge1xuXHRcdFx0dGhpc0NhY2hlLmRhdGEgPSB7fTtcblx0XHR9XG5cblx0XHR0aGlzQ2FjaGUgPSB0aGlzQ2FjaGUuZGF0YTtcblx0fVxuXG5cdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdHRoaXNDYWNoZVsgalF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApIF0gPSBkYXRhO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIGJvdGggY29udmVydGVkLXRvLWNhbWVsIGFuZCBub24tY29udmVydGVkIGRhdGEgcHJvcGVydHkgbmFtZXNcblx0Ly8gSWYgYSBkYXRhIHByb3BlcnR5IHdhcyBzcGVjaWZpZWRcblx0aWYgKCB0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdC8vIEZpcnN0IFRyeSB0byBmaW5kIGFzLWlzIHByb3BlcnR5IGRhdGFcblx0XHRyZXQgPSB0aGlzQ2FjaGVbIG5hbWUgXTtcblxuXHRcdC8vIFRlc3QgZm9yIG51bGx8dW5kZWZpbmVkIHByb3BlcnR5IGRhdGFcblx0XHRpZiAoIHJldCA9PSBudWxsICkge1xuXG5cdFx0XHQvLyBUcnkgdG8gZmluZCB0aGUgY2FtZWxDYXNlZCBwcm9wZXJ0eVxuXHRcdFx0cmV0ID0gdGhpc0NhY2hlWyBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICkgXTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gdGhpc0NhY2hlO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gaW50ZXJuYWxSZW1vdmVEYXRhKCBlbGVtLCBuYW1lLCBwdnQgKSB7XG5cdGlmICggIWFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHR2YXIgdGhpc0NhY2hlLCBpLFxuXHRcdGlzTm9kZSA9IGVsZW0ubm9kZVR5cGUsXG5cblx0XHQvLyBTZWUgalF1ZXJ5LmRhdGEgZm9yIG1vcmUgaW5mb3JtYXRpb25cblx0XHRjYWNoZSA9IGlzTm9kZSA/IGpRdWVyeS5jYWNoZSA6IGVsZW0sXG5cdFx0aWQgPSBpc05vZGUgPyBlbGVtWyBqUXVlcnkuZXhwYW5kbyBdIDogalF1ZXJ5LmV4cGFuZG87XG5cblx0Ly8gSWYgdGhlcmUgaXMgYWxyZWFkeSBubyBjYWNoZSBlbnRyeSBmb3IgdGhpcyBvYmplY3QsIHRoZXJlIGlzIG5vXG5cdC8vIHB1cnBvc2UgaW4gY29udGludWluZ1xuXHRpZiAoICFjYWNoZVsgaWQgXSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpZiAoIG5hbWUgKSB7XG5cblx0XHR0aGlzQ2FjaGUgPSBwdnQgPyBjYWNoZVsgaWQgXSA6IGNhY2hlWyBpZCBdLmRhdGE7XG5cblx0XHRpZiAoIHRoaXNDYWNoZSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG5hbWVzIGZvciBkYXRhIGtleXNcblx0XHRcdGlmICggIWpRdWVyeS5pc0FycmF5KCBuYW1lICkgKSB7XG5cblx0XHRcdFx0Ly8gdHJ5IHRoZSBzdHJpbmcgYXMgYSBrZXkgYmVmb3JlIGFueSBtYW5pcHVsYXRpb25cblx0XHRcdFx0aWYgKCBuYW1lIGluIHRoaXNDYWNoZSApIHtcblx0XHRcdFx0XHRuYW1lID0gWyBuYW1lIF07XG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBzcGxpdCB0aGUgY2FtZWwgY2FzZWQgdmVyc2lvbiBieSBzcGFjZXMgdW5sZXNzIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHNcblx0XHRcdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApO1xuXHRcdFx0XHRcdGlmICggbmFtZSBpbiB0aGlzQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gWyBuYW1lIF07XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdG5hbWUgPSBuYW1lLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJZiBcIm5hbWVcIiBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdoZW4gZGF0YSBpcyBpbml0aWFsbHkgY3JlYXRlZCwgdmlhIChcImtleVwiLCBcInZhbFwiKSBzaWduYXR1cmUsXG5cdFx0XHRcdC8vIGtleXMgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gY2FtZWxDYXNlLlxuXHRcdFx0XHQvLyBTaW5jZSB0aGVyZSBpcyBubyB3YXkgdG8gdGVsbCBfaG93XyBhIGtleSB3YXMgYWRkZWQsIHJlbW92ZVxuXHRcdFx0XHQvLyBib3RoIHBsYWluIGtleSBhbmQgY2FtZWxDYXNlIGtleS4gIzEyNzg2XG5cdFx0XHRcdC8vIFRoaXMgd2lsbCBvbmx5IHBlbmFsaXplIHRoZSBhcnJheSBhcmd1bWVudCBwYXRoLlxuXHRcdFx0XHRuYW1lID0gbmFtZS5jb25jYXQoIGpRdWVyeS5tYXAoIG5hbWUsIGpRdWVyeS5jYW1lbENhc2UgKSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0gbmFtZS5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIHRoaXNDYWNoZVsgbmFtZVsgaSBdIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoZXJlIGlzIG5vIGRhdGEgbGVmdCBpbiB0aGUgY2FjaGUsIHdlIHdhbnQgdG8gY29udGludWVcblx0XHRcdC8vIGFuZCBsZXQgdGhlIGNhY2hlIG9iamVjdCBpdHNlbGYgZ2V0IGRlc3Ryb3llZFxuXHRcdFx0aWYgKCBwdnQgPyAhaXNFbXB0eURhdGFPYmplY3QoIHRoaXNDYWNoZSApIDogIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCB0aGlzQ2FjaGUgKSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNlZSBqUXVlcnkuZGF0YSBmb3IgbW9yZSBpbmZvcm1hdGlvblxuXHRpZiAoICFwdnQgKSB7XG5cdFx0ZGVsZXRlIGNhY2hlWyBpZCBdLmRhdGE7XG5cblx0XHQvLyBEb24ndCBkZXN0cm95IHRoZSBwYXJlbnQgY2FjaGUgdW5sZXNzIHRoZSBpbnRlcm5hbCBkYXRhIG9iamVjdFxuXHRcdC8vIGhhZCBiZWVuIHRoZSBvbmx5IHRoaW5nIGxlZnQgaW4gaXRcblx0XHRpZiAoICFpc0VtcHR5RGF0YU9iamVjdCggY2FjaGVbIGlkIF0gKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdH1cblxuXHQvLyBEZXN0cm95IHRoZSBjYWNoZVxuXHRpZiAoIGlzTm9kZSApIHtcblx0XHRqUXVlcnkuY2xlYW5EYXRhKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXG5cdC8vIFVzZSBkZWxldGUgd2hlbiBzdXBwb3J0ZWQgZm9yIGV4cGFuZG9zIG9yIGBjYWNoZWAgaXMgbm90IGEgd2luZG93IHBlciBpc1dpbmRvdyAoIzEwMDgwKVxuXHQvKiBqc2hpbnQgZXFlcWVxOiBmYWxzZSAqL1xuXHR9IGVsc2UgaWYgKCBzdXBwb3J0LmRlbGV0ZUV4cGFuZG8gfHwgY2FjaGUgIT0gY2FjaGUud2luZG93ICkge1xuXHRcdC8qIGpzaGludCBlcWVxZXE6IHRydWUgKi9cblx0XHRkZWxldGUgY2FjaGVbIGlkIF07XG5cblx0Ly8gV2hlbiBhbGwgZWxzZSBmYWlscywgdW5kZWZpbmVkXG5cdH0gZWxzZSB7XG5cdFx0Y2FjaGVbIGlkIF0gPSB1bmRlZmluZWQ7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRjYWNoZToge30sXG5cblx0Ly8gVGhlIGZvbGxvd2luZyBlbGVtZW50cyAoc3BhY2Utc3VmZml4ZWQgdG8gYXZvaWQgT2JqZWN0LnByb3RvdHlwZSBjb2xsaXNpb25zKVxuXHQvLyB0aHJvdyB1bmNhdGNoYWJsZSBleGNlcHRpb25zIGlmIHlvdSBhdHRlbXB0IHRvIHNldCBleHBhbmRvIHByb3BlcnRpZXNcblx0bm9EYXRhOiB7XG5cdFx0XCJhcHBsZXQgXCI6IHRydWUsXG5cdFx0XCJlbWJlZCBcIjogdHJ1ZSxcblxuXHRcdC8vIC4uLmJ1dCBGbGFzaCBvYmplY3RzICh3aGljaCBoYXZlIHRoaXMgY2xhc3NpZCkgKmNhbiogaGFuZGxlIGV4cGFuZG9zXG5cdFx0XCJvYmplY3QgXCI6IFwiY2xzaWQ6RDI3Q0RCNkUtQUU2RC0xMWNmLTk2QjgtNDQ0NTUzNTQwMDAwXCJcblx0fSxcblxuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRlbGVtID0gZWxlbS5ub2RlVHlwZSA/IGpRdWVyeS5jYWNoZVsgZWxlbVsgalF1ZXJ5LmV4cGFuZG8gXSBdIDogZWxlbVsgalF1ZXJ5LmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gISFlbGVtICYmICFpc0VtcHR5RGF0YU9iamVjdCggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBpbnRlcm5hbERhdGEoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRyZXR1cm4gaW50ZXJuYWxSZW1vdmVEYXRhKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGludGVybmFsRGF0YSggZWxlbSwgbmFtZSwgZGF0YSwgdHJ1ZSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRyZXR1cm4gaW50ZXJuYWxSZW1vdmVEYXRhKCBlbGVtLCBuYW1lLCB0cnVlICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gU3BlY2lhbCBleHBlY3Rpb25zIG9mIC5kYXRhIGJhc2ljYWxseSB0aHdhcnQgalF1ZXJ5LmFjY2Vzcyxcblx0XHQvLyBzbyBpbXBsZW1lbnQgdGhlIHJlbGV2YW50IGJlaGF2aW9yIG91cnNlbHZlc1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBqUXVlcnkuZGF0YSggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhalF1ZXJ5Ll9kYXRhKCBlbGVtLCBcInBhcnNlZEF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTExK1xuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGpRdWVyeS5fZGF0YSggZWxlbSwgXCJwYXJzZWRBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRhdGEoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMSA/XG5cblx0XHRcdC8vIFNldHMgb25lIHZhbHVlXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGF0YSggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApIDpcblxuXHRcdFx0Ly8gR2V0cyBvbmUgdmFsdWVcblx0XHRcdC8vIFRyeSB0byBmZXRjaCBhbnkgaW50ZXJuYWxseSBzdG9yZWQgZGF0YSBmaXJzdFxuXHRcdFx0ZWxlbSA/IGRhdGFBdHRyKCBlbGVtLCBrZXksIGpRdWVyeS5kYXRhKCBlbGVtLCBrZXkgKSApIDogdW5kZWZpbmVkO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlRGF0YSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0galF1ZXJ5Ll9kYXRhKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgalF1ZXJ5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGpRdWVyeS5fZGF0YSggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGNsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gbm90IGludGVuZGVkIGZvciBwdWJsaWMgY29uc3VtcHRpb24gLSBnZW5lcmF0ZXMgYSBxdWV1ZUhvb2tzIG9iamVjdCxcblx0Ly8gb3IgcmV0dXJucyB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGpRdWVyeS5fZGF0YSggZWxlbSwga2V5ICkgfHwgalF1ZXJ5Ll9kYXRhKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuX3JlbW92ZURhdGEoIGVsZW0sIHR5cGUgKyBcInF1ZXVlXCIgKTtcblx0XHRcdFx0alF1ZXJ5Ll9yZW1vdmVEYXRhKCBlbGVtLCBrZXkgKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gZW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBqUXVlcnkuX2RhdGEoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgc2hyaW5rV3JhcEJsb2Nrc1ZhbDtcblxuXHRzdXBwb3J0LnNocmlua1dyYXBCbG9ja3MgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIHNocmlua1dyYXBCbG9ja3NWYWwgIT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzaHJpbmtXcmFwQmxvY2tzVmFsO1xuXHRcdH1cblxuXHRcdC8vIFdpbGwgYmUgY2hhbmdlZCBsYXRlciBpZiBuZWVkZWQuXG5cdFx0c2hyaW5rV3JhcEJsb2Nrc1ZhbCA9IGZhbHNlO1xuXG5cdFx0Ly8gTWluaWZpZWQ6IHZhciBiLGMsZFxuXHRcdHZhciBkaXYsIGJvZHksIGNvbnRhaW5lcjtcblxuXHRcdGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJib2R5XCIgKVsgMCBdO1xuXHRcdGlmICggIWJvZHkgfHwgIWJvZHkuc3R5bGUgKSB7XG5cblx0XHRcdC8vIFRlc3QgZmlyZWQgdG9vIGVhcmx5IG9yIGluIGFuIHVuc3VwcG9ydGVkIGVudmlyb25tZW50LCBleGl0LlxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFNldHVwXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7Ym9yZGVyOjA7d2lkdGg6MDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHhcIjtcblx0XHRib2R5LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRTZcblx0XHQvLyBDaGVjayBpZiBlbGVtZW50cyB3aXRoIGxheW91dCBzaHJpbmstd3JhcCB0aGVpciBjaGlsZHJlblxuXHRcdGlmICggdHlwZW9mIGRpdi5zdHlsZS56b29tICE9PSBcInVuZGVmaW5lZFwiICkge1xuXG5cdFx0XHQvLyBSZXNldCBDU1M6IGJveC1zaXppbmc7IGRpc3BsYXk7IG1hcmdpbjsgYm9yZGVyXG5cdFx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyOSwgQW5kcm9pZCAyLjNcblx0XHRcdFx0Ly8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nXG5cdFx0XHRcdFwiLXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94Oy1tb3otYm94LXNpemluZzpjb250ZW50LWJveDtcIiArXG5cdFx0XHRcdFwiYm94LXNpemluZzpjb250ZW50LWJveDtkaXNwbGF5OmJsb2NrO21hcmdpbjowO2JvcmRlcjowO1wiICtcblx0XHRcdFx0XCJwYWRkaW5nOjFweDt3aWR0aDoxcHg7em9vbToxXCI7XG5cdFx0XHRkaXYuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLnN0eWxlLndpZHRoID0gXCI1cHhcIjtcblx0XHRcdHNocmlua1dyYXBCbG9ja3NWYWwgPSBkaXYub2Zmc2V0V2lkdGggIT09IDM7XG5cdFx0fVxuXG5cdFx0Ym9keS5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHRyZXR1cm4gc2hyaW5rV3JhcEJsb2Nrc1ZhbDtcblx0fTtcblxufSApKCk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBpc0hpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHQhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblx0fTtcblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCxcblx0XHRzY2FsZSA9IDEsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHdlZW4uY3VyKCk7IH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7IH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdGRvIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgaXRlcmF0aW9uIHplcm9lZCBvdXQsIGRvdWJsZSB1bnRpbCB3ZSBnZXQgKnNvbWV0aGluZyouXG5cdFx0XHQvLyBVc2Ugc3RyaW5nIGZvciBkb3VibGluZyBzbyB3ZSBkb24ndCBhY2NpZGVudGFsbHkgc2VlIHNjYWxlIGFzIHVuY2hhbmdlZCBiZWxvd1xuXHRcdFx0c2NhbGUgPSBzY2FsZSB8fCBcIi41XCI7XG5cblx0XHRcdC8vIEFkanVzdCBhbmQgYXBwbHlcblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBVcGRhdGUgc2NhbGUsIHRvbGVyYXRpbmcgemVybyBvciBOYU4gZnJvbSB0d2Vlbi5jdXIoKVxuXHRcdC8vIEJyZWFrIHRoZSBsb29wIGlmIHNjYWxlIGlzIHVuY2hhbmdlZCBvciBwZXJmZWN0LCBvciBpZiB3ZSd2ZSBqdXN0IGhhZCBlbm91Z2guXG5cdFx0fSB3aGlsZSAoXG5cdFx0XHRzY2FsZSAhPT0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCApICYmIHNjYWxlICE9PSAxICYmIC0tbWF4SXRlcmF0aW9uc1xuXHRcdCk7XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggalF1ZXJ5LnR5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFx0XHRrZXksXG5cdFx0XHRcdFx0cmF3ID8gdmFsdWUgOiB2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjaGFpbmFibGUgP1xuXHRcdGVsZW1zIDpcblxuXHRcdC8vIEdldHNcblx0XHRidWxrID9cblx0XHRcdGZuLmNhbGwoIGVsZW1zICkgOlxuXHRcdFx0bGVuZ3RoID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFtcXHc6LV0rKS8gKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cbnZhciBybGVhZGluZ1doaXRlc3BhY2UgPSAoIC9eXFxzKy8gKTtcblxudmFyIG5vZGVOYW1lcyA9IFwiYWJicnxhcnRpY2xlfGFzaWRlfGF1ZGlvfGJkaXxjYW52YXN8ZGF0YXxkYXRhbGlzdHxcIiArXG5cdFx0XCJkZXRhaWxzfGRpYWxvZ3xmaWdjYXB0aW9ufGZpZ3VyZXxmb290ZXJ8aGVhZGVyfGhncm91cHxtYWlufFwiICtcblx0XHRcIm1hcmt8bWV0ZXJ8bmF2fG91dHB1dHxwaWN0dXJlfHByb2dyZXNzfHNlY3Rpb258c3VtbWFyeXx0ZW1wbGF0ZXx0aW1lfHZpZGVvXCI7XG5cblxuXG5mdW5jdGlvbiBjcmVhdGVTYWZlRnJhZ21lbnQoIGRvY3VtZW50ICkge1xuXHR2YXIgbGlzdCA9IG5vZGVOYW1lcy5zcGxpdCggXCJ8XCIgKSxcblx0XHRzYWZlRnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblxuXHRpZiAoIHNhZmVGcmFnLmNyZWF0ZUVsZW1lbnQgKSB7XG5cdFx0d2hpbGUgKCBsaXN0Lmxlbmd0aCApIHtcblx0XHRcdHNhZmVGcmFnLmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdGxpc3QucG9wKClcblx0XHRcdCk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBzYWZlRnJhZztcbn1cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU2V0dXBcblx0ZGl2LmlubmVySFRNTCA9IFwiICA8bGluay8+PHRhYmxlPjwvdGFibGU+PGEgaHJlZj0nL2EnPmE8L2E+PGlucHV0IHR5cGU9J2NoZWNrYm94Jy8+XCI7XG5cblx0Ly8gSUUgc3RyaXBzIGxlYWRpbmcgd2hpdGVzcGFjZSB3aGVuIC5pbm5lckhUTUwgaXMgdXNlZFxuXHRzdXBwb3J0LmxlYWRpbmdXaGl0ZXNwYWNlID0gZGl2LmZpcnN0Q2hpbGQubm9kZVR5cGUgPT09IDM7XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgdGJvZHkgZWxlbWVudHMgYXJlbid0IGF1dG9tYXRpY2FsbHkgaW5zZXJ0ZWRcblx0Ly8gSUUgd2lsbCBpbnNlcnQgdGhlbSBpbnRvIGVtcHR5IHRhYmxlc1xuXHRzdXBwb3J0LnRib2R5ID0gIWRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJ0Ym9keVwiICkubGVuZ3RoO1xuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGxpbmsgZWxlbWVudHMgZ2V0IHNlcmlhbGl6ZWQgY29ycmVjdGx5IGJ5IGlubmVySFRNTFxuXHQvLyBUaGlzIHJlcXVpcmVzIGEgd3JhcHBlciBlbGVtZW50IGluIElFXG5cdHN1cHBvcnQuaHRtbFNlcmlhbGl6ZSA9ICEhZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcImxpbmtcIiApLmxlbmd0aDtcblxuXHQvLyBNYWtlcyBzdXJlIGNsb25pbmcgYW4gaHRtbDUgZWxlbWVudCBkb2VzIG5vdCBjYXVzZSBwcm9ibGVtc1xuXHQvLyBXaGVyZSBvdXRlckhUTUwgaXMgdW5kZWZpbmVkLCB0aGlzIHN0aWxsIHdvcmtzXG5cdHN1cHBvcnQuaHRtbDVDbG9uZSA9XG5cdFx0ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJuYXZcIiApLmNsb25lTm9kZSggdHJ1ZSApLm91dGVySFRNTCAhPT0gXCI8Om5hdj48LzpuYXY+XCI7XG5cblx0Ly8gQ2hlY2sgaWYgYSBkaXNjb25uZWN0ZWQgY2hlY2tib3ggd2lsbCByZXRhaW4gaXRzIGNoZWNrZWRcblx0Ly8gdmFsdWUgb2YgdHJ1ZSBhZnRlciBhcHBlbmRlZCB0byB0aGUgRE9NIChJRTYvNylcblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblx0aW5wdXQuY2hlY2tlZCA9IHRydWU7XG5cdGZyYWdtZW50LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXHRzdXBwb3J0LmFwcGVuZENoZWNrZWQgPSBpbnB1dC5jaGVja2VkO1xuXG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdC8vIFN1cHBvcnQ6IElFNi1JRTExK1xuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xuXG5cdC8vICMxMTIxNyAtIFdlYktpdCBsb3NlcyBjaGVjayB3aGVuIHRoZSBuYW1lIGlzIGFmdGVyIHRoZSBjaGVja2VkIGF0dHJpYnV0ZVxuXHRmcmFnbWVudC5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IFNhZmFyaSA1LjEsIGlPUyA1LjEsIEFuZHJvaWQgNC54LCBBbmRyb2lkIDIuM1xuXHQvLyBvbGQgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdC8vIENsb25lZCBlbGVtZW50cyBrZWVwIGF0dGFjaEV2ZW50IGhhbmRsZXJzLCB3ZSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBvbiBJRTkrXG5cdHN1cHBvcnQubm9DbG9uZUV2ZW50ID0gISFkaXYuYWRkRXZlbnRMaXN0ZW5lcjtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdC8vIFNpbmNlIGF0dHJpYnV0ZXMgYW5kIHByb3BlcnRpZXMgYXJlIHRoZSBzYW1lIGluIElFLFxuXHQvLyBjbGVhbkRhdGEgbXVzdCBzZXQgcHJvcGVydGllcyB0byB1bmRlZmluZWQgcmF0aGVyIHRoYW4gdXNlIHJlbW92ZUF0dHJpYnV0ZVxuXHRkaXZbIGpRdWVyeS5leHBhbmRvIF0gPSAxO1xuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSAhZGl2LmdldEF0dHJpYnV0ZSggalF1ZXJ5LmV4cGFuZG8gKTtcbn0gKSgpO1xuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXG5cdGxlZ2VuZDogWyAxLCBcIjxmaWVsZHNldD5cIiwgXCI8L2ZpZWxkc2V0PlwiIF0sXG5cdGFyZWE6IFsgMSwgXCI8bWFwPlwiLCBcIjwvbWFwPlwiIF0sXG5cblx0Ly8gU3VwcG9ydDogSUU4XG5cdHBhcmFtOiBbIDEsIFwiPG9iamVjdD5cIiwgXCI8L29iamVjdD5cIiBdLFxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT48L3Rib2R5Pjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdC8vIElFNi04IGNhbid0IHNlcmlhbGl6ZSBsaW5rLCBzY3JpcHQsIHN0eWxlLCBvciBhbnkgaHRtbDUgKE5vU2NvcGUpIHRhZ3MsXG5cdC8vIHVubGVzcyB3cmFwcGVkIGluIGEgZGl2IHdpdGggbm9uLWJyZWFraW5nIGNoYXJhY3RlcnMgaW4gZnJvbnQgb2YgaXQuXG5cdF9kZWZhdWx0OiBzdXBwb3J0Lmh0bWxTZXJpYWxpemUgPyBbIDAsIFwiXCIsIFwiXCIgXSA6IFsgMSwgXCJYPGRpdj5cIiwgXCI8L2Rpdj5cIiBdXG59O1xuXG4vLyBTdXBwb3J0OiBJRTgtSUU5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblx0dmFyIGVsZW1zLCBlbGVtLFxuXHRcdGkgPSAwLFxuXHRcdGZvdW5kID0gdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgP1xuXHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICkgOlxuXHRcdFx0dHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiA/XG5cdFx0XHRcdGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICkgOlxuXHRcdFx0XHR1bmRlZmluZWQ7XG5cblx0aWYgKCAhZm91bmQgKSB7XG5cdFx0Zm9yICggZm91bmQgPSBbXSwgZWxlbXMgPSBjb250ZXh0LmNoaWxkTm9kZXMgfHwgY29udGV4dDtcblx0XHRcdCggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPSBudWxsO1xuXHRcdFx0aSsrXG5cdFx0KSB7XG5cdFx0XHRpZiAoICF0YWcgfHwgalF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCB0YWcgKSApIHtcblx0XHRcdFx0Zm91bmQucHVzaCggZWxlbSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBmb3VuZCwgZ2V0QWxsKCBlbGVtLCB0YWcgKSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgalF1ZXJ5Lm5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSA/XG5cdFx0alF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgZm91bmQgKSA6XG5cdFx0Zm91bmQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGkgPSAwO1xuXHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0alF1ZXJ5Ll9kYXRhKFxuXHRcdFx0ZWxlbSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGpRdWVyeS5fZGF0YSggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy8sXG5cdHJ0Ym9keSA9IC88dGJvZHkvaTtcblxuZnVuY3Rpb24gZml4RGVmYXVsdENoZWNrZWQoIGVsZW0gKSB7XG5cdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWxlbS50eXBlICkgKSB7XG5cdFx0ZWxlbS5kZWZhdWx0Q2hlY2tlZCA9IGVsZW0uY2hlY2tlZDtcblx0fVxufVxuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgaiwgZWxlbSwgY29udGFpbnMsXG5cdFx0dG1wLCB0YWcsIHRib2R5LCB3cmFwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGgsXG5cblx0XHQvLyBFbnN1cmUgYSBzYWZlIGZyYWdtZW50XG5cdFx0c2FmZSA9IGNyZWF0ZVNhZmVGcmFnbWVudCggY29udGV4dCApLFxuXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIGpRdWVyeS50eXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgc2FmZS5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblxuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1hbnVhbGx5IGFkZCBsZWFkaW5nIHdoaXRlc3BhY2UgcmVtb3ZlZCBieSBJRVxuXHRcdFx0XHRpZiAoICFzdXBwb3J0LmxlYWRpbmdXaGl0ZXNwYWNlICYmIHJsZWFkaW5nV2hpdGVzcGFjZS50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggcmxlYWRpbmdXaGl0ZXNwYWNlLmV4ZWMoIGVsZW0gKVsgMCBdICkgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlbW92ZSBJRSdzIGF1dG9pbnNlcnRlZCA8dGJvZHk+IGZyb20gdGFibGUgZnJhZ21lbnRzXG5cdFx0XHRcdGlmICggIXN1cHBvcnQudGJvZHkgKSB7XG5cblx0XHRcdFx0XHQvLyBTdHJpbmcgd2FzIGEgPHRhYmxlPiwgKm1heSogaGF2ZSBzcHVyaW91cyA8dGJvZHk+XG5cdFx0XHRcdFx0ZWxlbSA9IHRhZyA9PT0gXCJ0YWJsZVwiICYmICFydGJvZHkudGVzdCggZWxlbSApID9cblx0XHRcdFx0XHRcdHRtcC5maXJzdENoaWxkIDpcblxuXHRcdFx0XHRcdFx0Ly8gU3RyaW5nIHdhcyBhIGJhcmUgPHRoZWFkPiBvciA8dGZvb3Q+XG5cdFx0XHRcdFx0XHR3cmFwWyAxIF0gPT09IFwiPHRhYmxlPlwiICYmICFydGJvZHkudGVzdCggZWxlbSApID9cblx0XHRcdFx0XHRcdFx0dG1wIDpcblx0XHRcdFx0XHRcdFx0MDtcblxuXHRcdFx0XHRcdGogPSBlbGVtICYmIGVsZW0uY2hpbGROb2Rlcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5ub2RlTmFtZSggKCB0Ym9keSA9IGVsZW0uY2hpbGROb2Rlc1sgaiBdICksIFwidGJvZHlcIiApICYmXG5cdFx0XHRcdFx0XHRcdCF0Ym9keS5jaGlsZE5vZGVzLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRlbGVtLnJlbW92ZUNoaWxkKCB0Ym9keSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gRml4ICMxMjM5MiBmb3IgV2ViS2l0IGFuZCBJRSA+IDlcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRcdFx0XHQvLyBGaXggIzEyMzkyIGZvciBvbGRJRVxuXHRcdFx0XHR3aGlsZSAoIHRtcC5maXJzdENoaWxkICkge1xuXHRcdFx0XHRcdHRtcC5yZW1vdmVDaGlsZCggdG1wLmZpcnN0Q2hpbGQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyIGZvciBwcm9wZXIgY2xlYW51cFxuXHRcdFx0XHR0bXAgPSBzYWZlLmxhc3RDaGlsZDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBGaXggIzExMzU2OiBDbGVhciBlbGVtZW50cyBmcm9tIGZyYWdtZW50XG5cdGlmICggdG1wICkge1xuXHRcdHNhZmUucmVtb3ZlQ2hpbGQoIHRtcCApO1xuXHR9XG5cblx0Ly8gUmVzZXQgZGVmYXVsdENoZWNrZWQgZm9yIGFueSByYWRpb3MgYW5kIGNoZWNrYm94ZXNcblx0Ly8gYWJvdXQgdG8gYmUgYXBwZW5kZWQgdG8gdGhlIERPTSBpbiBJRSA2LzcgKCM4MDYwKVxuXHRpZiAoICFzdXBwb3J0LmFwcGVuZENoZWNrZWQgKSB7XG5cdFx0alF1ZXJ5LmdyZXAoIGdldEFsbCggbm9kZXMsIFwiaW5wdXRcIiApLCBmaXhEZWZhdWx0Q2hlY2tlZCApO1xuXHR9XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y29udGFpbnMgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBzYWZlLmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGNvbnRhaW5zICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHRtcCA9IG51bGw7XG5cblx0cmV0dXJuIHNhZmU7XG59XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGksIGV2ZW50TmFtZSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OSAobGFjayBzdWJtaXQvY2hhbmdlIGJ1YmJsZSksIEZpcmVmb3ggKGxhY2sgZm9jdXMoaW4gfCBvdXQpIGV2ZW50cylcblx0Zm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgY2hhbmdlOiB0cnVlLCBmb2N1c2luOiB0cnVlIH0gKSB7XG5cdFx0ZXZlbnROYW1lID0gXCJvblwiICsgaTtcblxuXHRcdGlmICggISggc3VwcG9ydFsgaSBdID0gZXZlbnROYW1lIGluIHdpbmRvdyApICkge1xuXG5cdFx0XHQvLyBCZXdhcmUgb2YgQ1NQIHJlc3RyaWN0aW9ucyAoaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vU2VjdXJpdHkvQ1NQKVxuXHRcdFx0ZGl2LnNldEF0dHJpYnV0ZSggZXZlbnROYW1lLCBcInRcIiApO1xuXHRcdFx0c3VwcG9ydFsgaSBdID0gZGl2LmF0dHJpYnV0ZXNbIGV2ZW50TmFtZSBdLmV4cGFuZG8gPT09IGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdC8vIE51bGwgZWxlbWVudHMgdG8gYXZvaWQgbGVha3MgaW4gSUUuXG5cdGRpdiA9IG51bGw7XG59ICkoKTtcblxuXG52YXIgcmZvcm1FbGVtcyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhKSQvaSxcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcblx0cmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFOVxuLy8gU2VlICMxMzM5MyBmb3IgbW9yZSBpbmZvXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblx0XHR2YXIgdG1wLCBldmVudHMsIHQsIGhhbmRsZU9iakluLFxuXHRcdFx0c3BlY2lhbCwgZXZlbnRIYW5kbGUsIGhhbmRsZU9iaixcblx0XHRcdGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0galF1ZXJ5Ll9kYXRhKCBlbGVtICk7XG5cblx0XHQvLyBEb24ndCBhdHRhY2ggZXZlbnRzIHRvIG5vRGF0YSBvciB0ZXh0L2NvbW1lbnQgbm9kZXMgKGJ1dCBhbGxvdyBwbGFpbiBvYmplY3RzKVxuXHRcdGlmICggIWVsZW1EYXRhICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0KCAhZSB8fCBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBldmVudEhhbmRsZS5lbGVtLCBhcmd1bWVudHMgKSA6XG5cdFx0XHRcdFx0dW5kZWZpbmVkO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gQWRkIGVsZW0gYXMgYSBwcm9wZXJ0eSBvZiB0aGUgaGFuZGxlIGZuIHRvIHByZXZlbnQgYSBtZW1vcnkgbGVha1xuXHRcdFx0Ly8gd2l0aCBJRSBub24tbmF0aXZlIGV2ZW50c1xuXHRcdFx0ZXZlbnRIYW5kbGUuZWxlbSA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyL2F0dGFjaEV2ZW50IGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHQvLyBCaW5kIHRoZSBnbG9iYWwgZXZlbnQgaGFuZGxlciB0byB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSwgZmFsc2UgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIGVsZW0uYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmF0dGFjaEV2ZW50KCBcIm9uXCIgKyB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE51bGxpZnkgZWxlbSB0byBwcmV2ZW50IG1lbW9yeSBsZWFrcyBpbiBJRVxuXHRcdGVsZW0gPSBudWxsO1xuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXHRcdHZhciBqLCBoYW5kbGVPYmosIHRtcCxcblx0XHRcdG9yaWdDb3VudCwgdCwgZXZlbnRzLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsXG5cdFx0XHRuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0galF1ZXJ5Lmhhc0RhdGEoIGVsZW0gKSAmJiBqUXVlcnkuX2RhdGEoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkZWxldGUgZWxlbURhdGEuaGFuZGxlO1xuXG5cdFx0XHQvLyByZW1vdmVEYXRhIGFsc28gY2hlY2tzIGZvciBlbXB0aW5lc3MgYW5kIGNsZWFycyB0aGUgZXhwYW5kbyBpZiBlbXB0eVxuXHRcdFx0Ly8gc28gdXNlIGl0IGluc3RlYWQgb2YgZGVsZXRlXG5cdFx0XHRqUXVlcnkuX3JlbW92ZURhdGEoIGVsZW0sIFwiZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cdFx0dmFyIGhhbmRsZSwgb250eXBlLCBjdXIsXG5cdFx0XHRidWJibGVUeXBlLCBzcGVjaWFsLCB0bXAsIGksXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGpRdWVyeS5fZGF0YSggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGpRdWVyeS5fZGF0YSggY3VyLCBcImhhbmRsZVwiICk7XG5cblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmIChcblx0XHRcdFx0KCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHQgc3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlXG5cdFx0XHRcdCkgJiYgYWNjZXB0RGF0YSggZWxlbSApXG5cdFx0XHQpIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIENhbid0IHVzZSBhbiAuaXNGdW5jdGlvbigpIGNoZWNrIGhlcmUgYmVjYXVzZSBJRTYvNyBmYWlscyB0aGF0IHRlc3QuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgZWxlbVsgdHlwZSBdICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJRTw5IGRpZXMgb24gZm9jdXMvYmx1ciB0byBoaWRkZW4gZWxlbWVudCAoIzE0ODYsIzEyNTE4KVxuXHRcdFx0XHRcdFx0Ly8gb25seSByZXByb2R1Y2libGUgb24gd2luWFAgSUU4IG5hdGl2ZSwgbm90IElFOSBpbiBJRTggbW9kZVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHRldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICk7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblx0XHRcdGhhbmRsZXJzID0gKCBqUXVlcnkuX2RhdGEoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IgMikgaGF2ZSBuYW1lc3BhY2Uocylcblx0XHRcdFx0Ly8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIG1hdGNoZXMsIHNlbCwgaGFuZGxlT2JqLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIFN1cHBvcnQgKGF0IGxlYXN0KTogQ2hyb21lLCBJRTlcblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKCMxMzE4MClcblx0XHQvL1xuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8PTQyK1xuXHRcdC8vIEF2b2lkIG5vbi1sZWZ0LWNsaWNrIGluIEZGIGJ1dCBkb24ndCBibG9jayBJRSByYWRpbyBldmVudHMgKCMzODYxLCBnaC0yMzQzKVxuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJiBjdXIubm9kZVR5cGUgJiZcblx0XHRcdCggZXZlbnQudHlwZSAhPT0gXCJjbGlja1wiIHx8IGlzTmFOKCBldmVudC5idXR0b24gKSB8fCBldmVudC5idXR0b24gPCAxICkgKSB7XG5cblx0XHRcdC8qIGpzaGludCBlcWVxZXE6IGZhbHNlICovXG5cdFx0XHRmb3IgKCA7IGN1ciAhPSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXHRcdFx0XHQvKiBqc2hpbnQgZXFlcWVxOiB0cnVlICovXG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAoIGN1ci5kaXNhYmxlZCAhPT0gdHJ1ZSB8fCBldmVudC50eXBlICE9PSBcImNsaWNrXCIgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVzID0gW107XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZXMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiB0aGlzLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRpZiAoIGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdH1cblxuXHRcdC8vIENyZWF0ZSBhIHdyaXRhYmxlIGNvcHkgb2YgdGhlIGV2ZW50IG9iamVjdCBhbmQgbm9ybWFsaXplIHNvbWUgcHJvcGVydGllc1xuXHRcdHZhciBpLCBwcm9wLCBjb3B5LFxuXHRcdFx0dHlwZSA9IGV2ZW50LnR5cGUsXG5cdFx0XHRvcmlnaW5hbEV2ZW50ID0gZXZlbnQsXG5cdFx0XHRmaXhIb29rID0gdGhpcy5maXhIb29rc1sgdHlwZSBdO1xuXG5cdFx0aWYgKCAhZml4SG9vayApIHtcblx0XHRcdHRoaXMuZml4SG9va3NbIHR5cGUgXSA9IGZpeEhvb2sgPVxuXHRcdFx0XHRybW91c2VFdmVudC50ZXN0KCB0eXBlICkgPyB0aGlzLm1vdXNlSG9va3MgOlxuXHRcdFx0XHRya2V5RXZlbnQudGVzdCggdHlwZSApID8gdGhpcy5rZXlIb29rcyA6XG5cdFx0XHRcdHt9O1xuXHRcdH1cblx0XHRjb3B5ID0gZml4SG9vay5wcm9wcyA/IHRoaXMucHJvcHMuY29uY2F0KCBmaXhIb29rLnByb3BzICkgOiB0aGlzLnByb3BzO1xuXG5cdFx0ZXZlbnQgPSBuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cblx0XHRpID0gY29weS5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRwcm9wID0gY29weVsgaSBdO1xuXHRcdFx0ZXZlbnRbIHByb3AgXSA9IG9yaWdpbmFsRXZlbnRbIHByb3AgXTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gRml4IHRhcmdldCBwcm9wZXJ0eSAoIzE5MjUpXG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gb3JpZ2luYWxFdmVudC5zcmNFbGVtZW50IHx8IGRvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA2LTgrXG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHRpZiAoIGV2ZW50LnRhcmdldC5ub2RlVHlwZSA9PT0gMyApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGV2ZW50LnRhcmdldC5wYXJlbnROb2RlO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBGb3IgbW91c2Uva2V5IGV2ZW50cywgbWV0YUtleT09ZmFsc2UgaWYgaXQncyB1bmRlZmluZWQgKCMzMzY4LCAjMTEzMjgpXG5cdFx0ZXZlbnQubWV0YUtleSA9ICEhZXZlbnQubWV0YUtleTtcblxuXHRcdHJldHVybiBmaXhIb29rLmZpbHRlciA/IGZpeEhvb2suZmlsdGVyKCBldmVudCwgb3JpZ2luYWxFdmVudCApIDogZXZlbnQ7XG5cdH0sXG5cblx0Ly8gSW5jbHVkZXMgc29tZSBldmVudCBwcm9wcyBzaGFyZWQgYnkgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnRcblx0cHJvcHM6ICggXCJhbHRLZXkgYnViYmxlcyBjYW5jZWxhYmxlIGN0cmxLZXkgY3VycmVudFRhcmdldCBkZXRhaWwgZXZlbnRQaGFzZSBcIiArXG5cdFx0XCJtZXRhS2V5IHJlbGF0ZWRUYXJnZXQgc2hpZnRLZXkgdGFyZ2V0IHRpbWVTdGFtcCB2aWV3IHdoaWNoXCIgKS5zcGxpdCggXCIgXCIgKSxcblxuXHRmaXhIb29rczoge30sXG5cblx0a2V5SG9va3M6IHtcblx0XHRwcm9wczogXCJjaGFyIGNoYXJDb2RlIGtleSBrZXlDb2RlXCIuc3BsaXQoIFwiIFwiICksXG5cdFx0ZmlsdGVyOiBmdW5jdGlvbiggZXZlbnQsIG9yaWdpbmFsICkge1xuXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCApIHtcblx0XHRcdFx0ZXZlbnQud2hpY2ggPSBvcmlnaW5hbC5jaGFyQ29kZSAhPSBudWxsID8gb3JpZ2luYWwuY2hhckNvZGUgOiBvcmlnaW5hbC5rZXlDb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0fVxuXHR9LFxuXG5cdG1vdXNlSG9va3M6IHtcblx0XHRwcm9wczogKCBcImJ1dHRvbiBidXR0b25zIGNsaWVudFggY2xpZW50WSBmcm9tRWxlbWVudCBvZmZzZXRYIG9mZnNldFkgXCIgK1xuXHRcdFx0XCJwYWdlWCBwYWdlWSBzY3JlZW5YIHNjcmVlblkgdG9FbGVtZW50XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0XHRmaWx0ZXI6IGZ1bmN0aW9uKCBldmVudCwgb3JpZ2luYWwgKSB7XG5cdFx0XHR2YXIgYm9keSwgZXZlbnREb2MsIGRvYyxcblx0XHRcdFx0YnV0dG9uID0gb3JpZ2luYWwuYnV0dG9uLFxuXHRcdFx0XHRmcm9tRWxlbWVudCA9IG9yaWdpbmFsLmZyb21FbGVtZW50O1xuXG5cdFx0XHQvLyBDYWxjdWxhdGUgcGFnZVgvWSBpZiBtaXNzaW5nIGFuZCBjbGllbnRYL1kgYXZhaWxhYmxlXG5cdFx0XHRpZiAoIGV2ZW50LnBhZ2VYID09IG51bGwgJiYgb3JpZ2luYWwuY2xpZW50WCAhPSBudWxsICkge1xuXHRcdFx0XHRldmVudERvYyA9IGV2ZW50LnRhcmdldC5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50O1xuXHRcdFx0XHRkb2MgPSBldmVudERvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHRcdGJvZHkgPSBldmVudERvYy5ib2R5O1xuXG5cdFx0XHRcdGV2ZW50LnBhZ2VYID0gb3JpZ2luYWwuY2xpZW50WCArXG5cdFx0XHRcdFx0KCBkb2MgJiYgZG9jLnNjcm9sbExlZnQgfHwgYm9keSAmJiBib2R5LnNjcm9sbExlZnQgfHwgMCApIC1cblx0XHRcdFx0XHQoIGRvYyAmJiBkb2MuY2xpZW50TGVmdCB8fCBib2R5ICYmIGJvZHkuY2xpZW50TGVmdCB8fCAwICk7XG5cdFx0XHRcdGV2ZW50LnBhZ2VZID0gb3JpZ2luYWwuY2xpZW50WSArXG5cdFx0XHRcdFx0KCBkb2MgJiYgZG9jLnNjcm9sbFRvcCAgfHwgYm9keSAmJiBib2R5LnNjcm9sbFRvcCAgfHwgMCApIC1cblx0XHRcdFx0XHQoIGRvYyAmJiBkb2MuY2xpZW50VG9wICB8fCBib2R5ICYmIGJvZHkuY2xpZW50VG9wICB8fCAwICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCByZWxhdGVkVGFyZ2V0LCBpZiBuZWNlc3Nhcnlcblx0XHRcdGlmICggIWV2ZW50LnJlbGF0ZWRUYXJnZXQgJiYgZnJvbUVsZW1lbnQgKSB7XG5cdFx0XHRcdGV2ZW50LnJlbGF0ZWRUYXJnZXQgPSBmcm9tRWxlbWVudCA9PT0gZXZlbnQudGFyZ2V0ID9cblx0XHRcdFx0XHRvcmlnaW5hbC50b0VsZW1lbnQgOlxuXHRcdFx0XHRcdGZyb21FbGVtZW50O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0XHQvLyBOb3RlOiBidXR0b24gaXMgbm90IG5vcm1hbGl6ZWQsIHNvIGRvbid0IHVzZSBpdFxuXHRcdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGV2ZW50LndoaWNoID0gKCBidXR0b24gJiAxID8gMSA6ICggYnV0dG9uICYgMiA/IDMgOiAoIGJ1dHRvbiAmIDQgPyAyIDogMCApICkgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdH1cblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Zm9jdXM6IHtcblxuXHRcdFx0Ly8gRmlyZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzICE9PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuZm9jdXMgKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdFx0XHRcdFx0Ly8gSWYgd2UgZXJyb3Igb24gZm9jdXMgdG8gaGlkZGVuIGVsZW1lbnQgKCMxNDg2LCAjMTI1MTgpLFxuXHRcdFx0XHRcdFx0Ly8gbGV0IC50cmlnZ2VyKCkgcnVuIHRoZSBoYW5kbGVyc1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCJcblx0XHR9LFxuXHRcdGJsdXI6IHtcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xuXHRcdFx0XHRcdHRoaXMuYmx1cigpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c291dFwiXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImlucHV0XCIgKSAmJiB0aGlzLnR5cGUgPT09IFwiY2hlY2tib3hcIiAmJiB0aGlzLmNsaWNrICkge1xuXHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZXZlbnQudGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cblx0XHRcdFx0Ly8gUHJldmlvdXNseSwgYG9yaWdpbmFsRXZlbnQ6IHt9YCB3YXMgc2V0IGhlcmUsIHNvIHN0b3BQcm9wYWdhdGlvbiBjYWxsXG5cdFx0XHRcdC8vIHdvdWxkIG5vdCBiZSB0cmlnZ2VyZWQgb24gZG9ub3IgZXZlbnQsIHNpbmNlIGluIG91ciBvd25cblx0XHRcdFx0Ly8galF1ZXJ5LmV2ZW50LnN0b3BQcm9wYWdhdGlvbiBmdW5jdGlvbiB3ZSBoYWQgYSBjaGVjayBmb3IgZXhpc3RlbmNlIG9mXG5cdFx0XHRcdC8vIG9yaWdpbmFsRXZlbnQuc3RvcFByb3BhZ2F0aW9uIG1ldGhvZCwgc28sIGNvbnNlcXVlbnRseSBpdCB3b3VsZCBiZSBhIG5vb3AuXG5cdFx0XHRcdC8vXG5cdFx0XHRcdC8vIEd1YXJkIGZvciBzaW11bGF0ZWQgZXZlbnRzIHdhcyBtb3ZlZCB0byBqUXVlcnkuZXZlbnQuc3RvcFByb3BhZ2F0aW9uIGZ1bmN0aW9uXG5cdFx0XHRcdC8vIHNpbmNlIGBvcmlnaW5hbEV2ZW50YCBzaG91bGQgcG9pbnQgdG8gdGhlIG9yaWdpbmFsIGV2ZW50IGZvciB0aGVcblx0XHRcdFx0Ly8gY29uc3RhbmN5IHdpdGggb3RoZXIgZXZlbnRzIGFuZCBmb3IgbW9yZSBmb2N1c2VkIGxvZ2ljXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cblx0XHRpZiAoIGUuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciA/XG5cdGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0XHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0XHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdFx0fVxuXHR9IDpcblx0ZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblx0XHR2YXIgbmFtZSA9IFwib25cIiArIHR5cGU7XG5cblx0XHRpZiAoIGVsZW0uZGV0YWNoRXZlbnQgKSB7XG5cblx0XHRcdC8vICM4NTQ1LCAjNzA1NCwgcHJldmVudGluZyBtZW1vcnkgbGVha3MgZm9yIGN1c3RvbSBldmVudHMgaW4gSUU2LThcblx0XHRcdC8vIGRldGFjaEV2ZW50IG5lZWRlZCBwcm9wZXJ0eSBvbiBlbGVtZW50LCBieSBuYW1lIG9mIHRoYXQgZXZlbnQsXG5cdFx0XHQvLyB0byBwcm9wZXJseSBleHBvc2UgaXQgdG8gR0Ncblx0XHRcdGlmICggdHlwZW9mIGVsZW1bIG5hbWUgXSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0ZWxlbVsgbmFtZSBdID0gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5kZXRhY2hFdmVudCggbmFtZSwgaGFuZGxlICk7XG5cdFx0fVxuXHR9O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDwgOSwgQW5kcm9pZCA8IDQuMFxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgalF1ZXJ5Lm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXHRcdGlmICggIWUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgcHJldmVudERlZmF1bHQgZXhpc3RzLCBydW4gaXQgb24gdGhlIG9yaWdpbmFsIGV2ZW50XG5cdFx0aWYgKCBlLnByZXZlbnREZWZhdWx0ICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUVcblx0XHQvLyBPdGhlcndpc2Ugc2V0IHRoZSByZXR1cm5WYWx1ZSBwcm9wZXJ0eSBvZiB0aGUgb3JpZ2luYWwgZXZlbnQgdG8gZmFsc2Vcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCAhZSB8fCB0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHN0b3BQcm9wYWdhdGlvbiBleGlzdHMsIHJ1biBpdCBvbiB0aGUgb3JpZ2luYWwgZXZlbnRcblx0XHRpZiAoIGUuc3RvcFByb3BhZ2F0aW9uICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRVxuXHRcdC8vIFNldCB0aGUgY2FuY2VsQnViYmxlIHByb3BlcnR5IG9mIHRoZSBvcmlnaW5hbCBldmVudCB0byB0cnVlXG5cdFx0ZS5jYW5jZWxCdWJibGUgPSB0cnVlO1xuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbi8vIElFIHN1Ym1pdCBkZWxlZ2F0aW9uXG5pZiAoICFzdXBwb3J0LnN1Ym1pdCApIHtcblxuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbC5zdWJtaXQgPSB7XG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBPbmx5IG5lZWQgdGhpcyBmb3IgZGVsZWdhdGVkIGZvcm0gc3VibWl0IGV2ZW50c1xuXHRcdFx0aWYgKCBqUXVlcnkubm9kZU5hbWUoIHRoaXMsIFwiZm9ybVwiICkgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTGF6eS1hZGQgYSBzdWJtaXQgaGFuZGxlciB3aGVuIGEgZGVzY2VuZGFudCBmb3JtIG1heSBwb3RlbnRpYWxseSBiZSBzdWJtaXR0ZWRcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIFwiY2xpY2suX3N1Ym1pdCBrZXlwcmVzcy5fc3VibWl0XCIsIGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIE5vZGUgbmFtZSBjaGVjayBhdm9pZHMgYSBWTUwtcmVsYXRlZCBjcmFzaCBpbiBJRSAoIzk4MDcpXG5cdFx0XHRcdHZhciBlbGVtID0gZS50YXJnZXQsXG5cdFx0XHRcdFx0Zm9ybSA9IGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgfHwgalF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcImJ1dHRvblwiICkgP1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PThcblx0XHRcdFx0XHRcdC8vIFdlIHVzZSBqUXVlcnkucHJvcCBpbnN0ZWFkIG9mIGVsZW0uZm9ybVxuXHRcdFx0XHRcdFx0Ly8gdG8gYWxsb3cgZml4aW5nIHRoZSBJRTggZGVsZWdhdGVkIHN1Ym1pdCBpc3N1ZSAoZ2gtMjMzMilcblx0XHRcdFx0XHRcdC8vIGJ5IDNyZCBwYXJ0eSBwb2x5ZmlsbHMvd29ya2Fyb3VuZHMuXG5cdFx0XHRcdFx0XHRqUXVlcnkucHJvcCggZWxlbSwgXCJmb3JtXCIgKSA6XG5cdFx0XHRcdFx0XHR1bmRlZmluZWQ7XG5cblx0XHRcdFx0aWYgKCBmb3JtICYmICFqUXVlcnkuX2RhdGEoIGZvcm0sIFwic3VibWl0XCIgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBmb3JtLCBcInN1Ym1pdC5fc3VibWl0XCIsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0XHRcdGV2ZW50Ll9zdWJtaXRCdWJibGUgPSB0cnVlO1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRqUXVlcnkuX2RhdGEoIGZvcm0sIFwic3VibWl0XCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXG5cdFx0XHQvLyByZXR1cm4gdW5kZWZpbmVkIHNpbmNlIHdlIGRvbid0IG5lZWQgYW4gZXZlbnQgbGlzdGVuZXJcblx0XHR9LFxuXG5cdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIElmIGZvcm0gd2FzIHN1Ym1pdHRlZCBieSB0aGUgdXNlciwgYnViYmxlIHRoZSBldmVudCB1cCB0aGUgdHJlZVxuXHRcdFx0aWYgKCBldmVudC5fc3VibWl0QnViYmxlICkge1xuXHRcdFx0XHRkZWxldGUgZXZlbnQuX3N1Ym1pdEJ1YmJsZTtcblx0XHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgJiYgIWV2ZW50LmlzVHJpZ2dlciApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIFwic3VibWl0XCIsIHRoaXMucGFyZW50Tm9kZSwgZXZlbnQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIE9ubHkgbmVlZCB0aGlzIGZvciBkZWxlZ2F0ZWQgZm9ybSBzdWJtaXQgZXZlbnRzXG5cdFx0XHRpZiAoIGpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJmb3JtXCIgKSApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZGVsZWdhdGVkIGhhbmRsZXJzOyBjbGVhbkRhdGEgZXZlbnR1YWxseSByZWFwcyBzdWJtaXQgaGFuZGxlcnMgYXR0YWNoZWQgYWJvdmVcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIFwiLl9zdWJtaXRcIiApO1xuXHRcdH1cblx0fTtcbn1cblxuLy8gSUUgY2hhbmdlIGRlbGVnYXRpb24gYW5kIGNoZWNrYm94L3JhZGlvIGZpeFxuaWYgKCAhc3VwcG9ydC5jaGFuZ2UgKSB7XG5cblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWwuY2hhbmdlID0ge1xuXG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRpZiAoIHJmb3JtRWxlbXMudGVzdCggdGhpcy5ub2RlTmFtZSApICkge1xuXG5cdFx0XHRcdC8vIElFIGRvZXNuJ3QgZmlyZSBjaGFuZ2Ugb24gYSBjaGVjay9yYWRpbyB1bnRpbCBibHVyOyB0cmlnZ2VyIGl0IG9uIGNsaWNrXG5cdFx0XHRcdC8vIGFmdGVyIGEgcHJvcGVydHljaGFuZ2UuIEVhdCB0aGUgYmx1ci1jaGFuZ2UgaW4gc3BlY2lhbC5jaGFuZ2UuaGFuZGxlLlxuXHRcdFx0XHQvLyBUaGlzIHN0aWxsIGZpcmVzIG9uY2hhbmdlIGEgc2Vjb25kIHRpbWUgZm9yIGNoZWNrL3JhZGlvIGFmdGVyIGJsdXIuXG5cdFx0XHRcdGlmICggdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgfHwgdGhpcy50eXBlID09PSBcInJhZGlvXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgXCJwcm9wZXJ0eWNoYW5nZS5fY2hhbmdlXCIsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0XHRcdGlmICggZXZlbnQub3JpZ2luYWxFdmVudC5wcm9wZXJ0eU5hbWUgPT09IFwiY2hlY2tlZFwiICkge1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9qdXN0Q2hhbmdlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIFwiY2xpY2suX2NoYW5nZVwiLCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIHRoaXMuX2p1c3RDaGFuZ2VkICYmICFldmVudC5pc1RyaWdnZXIgKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuX2p1c3RDaGFuZ2VkID0gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEFsbG93IHRyaWdnZXJlZCwgc2ltdWxhdGVkIGNoYW5nZSBldmVudHMgKCMxMTUwMClcblx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggXCJjaGFuZ2VcIiwgdGhpcywgZXZlbnQgKTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZWxlZ2F0ZWQgZXZlbnQ7IGxhenktYWRkIGEgY2hhbmdlIGhhbmRsZXIgb24gZGVzY2VuZGFudCBpbnB1dHNcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIFwiYmVmb3JlYWN0aXZhdGUuX2NoYW5nZVwiLCBmdW5jdGlvbiggZSApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBlLnRhcmdldDtcblxuXHRcdFx0XHRpZiAoIHJmb3JtRWxlbXMudGVzdCggZWxlbS5ub2RlTmFtZSApICYmICFqUXVlcnkuX2RhdGEoIGVsZW0sIFwiY2hhbmdlXCIgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBlbGVtLCBcImNoYW5nZS5fY2hhbmdlXCIsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICYmICFldmVudC5pc1NpbXVsYXRlZCAmJiAhZXZlbnQuaXNUcmlnZ2VyICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIFwiY2hhbmdlXCIsIHRoaXMucGFyZW50Tm9kZSwgZXZlbnQgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0alF1ZXJ5Ll9kYXRhKCBlbGVtLCBcImNoYW5nZVwiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IGV2ZW50LnRhcmdldDtcblxuXHRcdFx0Ly8gU3dhbGxvdyBuYXRpdmUgY2hhbmdlIGV2ZW50cyBmcm9tIGNoZWNrYm94L3JhZGlvLCB3ZSBhbHJlYWR5IHRyaWdnZXJlZCB0aGVtIGFib3ZlXG5cdFx0XHRpZiAoIHRoaXMgIT09IGVsZW0gfHwgZXZlbnQuaXNTaW11bGF0ZWQgfHwgZXZlbnQuaXNUcmlnZ2VyIHx8XG5cdFx0XHRcdCggZWxlbS50eXBlICE9PSBcInJhZGlvXCIgJiYgZWxlbS50eXBlICE9PSBcImNoZWNrYm94XCIgKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gZXZlbnQuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCBcIi5fY2hhbmdlXCIgKTtcblxuXHRcdFx0cmV0dXJuICFyZm9ybUVsZW1zLnRlc3QoIHRoaXMubm9kZU5hbWUgKTtcblx0XHR9XG5cdH07XG59XG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3hcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lLCBTYWZhcmlcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0galF1ZXJ5Ll9kYXRhKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0alF1ZXJ5Ll9kYXRhKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBqUXVlcnkuX2RhdGEoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0alF1ZXJ5Ll9yZW1vdmVEYXRhKCBkb2MsIGZpeCApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGpRdWVyeS5fZGF0YSggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxudmFyIHJpbmxpbmVqUXVlcnkgPSAvIGpRdWVyeVxcZCs9XCIoPzpudWxsfFxcZCspXCIvZyxcblx0cm5vc2hpbWNhY2hlID0gbmV3IFJlZ0V4cCggXCI8KD86XCIgKyBub2RlTmFtZXMgKyBcIilbXFxcXHMvPl1cIiwgXCJpXCIgKSxcblx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW1xcdzotXSspW14+XSopXFwvPi9naSxcblxuXHQvLyBTdXBwb3J0OiBJRSAxMC0xMSwgRWRnZSAxMDI0MCtcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cnNjcmlwdFR5cGVNYXNrZWQgPSAvXnRydWVcXC8oLiopLyxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nLFxuXHRzYWZlRnJhZ21lbnQgPSBjcmVhdGVTYWZlRnJhZ21lbnQoIGRvY3VtZW50ICksXG5cdGZyYWdtZW50RGl2ID0gc2FmZUZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gTWFuaXB1bGF0aW5nIHRhYmxlcyByZXF1aXJlcyBhIHRib2R5XG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdHJldHVybiBqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0alF1ZXJ5Lm5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApID9cblxuXHRcdGVsZW0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwidGJvZHlcIiApWyAwIF0gfHxcblx0XHRcdGVsZW0uYXBwZW5kQ2hpbGQoIGVsZW0ub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRib2R5XCIgKSApIDpcblx0XHRlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdHZhciBtYXRjaCA9IHJzY3JpcHRUeXBlTWFza2VkLmV4ZWMoIGVsZW0udHlwZSApO1xuXHRpZiAoIG1hdGNoICkge1xuXHRcdGVsZW0udHlwZSA9IG1hdGNoWyAxIF07XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSB8fCAhalF1ZXJ5Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdHZhciB0eXBlLCBpLCBsLFxuXHRcdG9sZERhdGEgPSBqUXVlcnkuX2RhdGEoIHNyYyApLFxuXHRcdGN1ckRhdGEgPSBqUXVlcnkuX2RhdGEoIGRlc3QsIG9sZERhdGEgKSxcblx0XHRldmVudHMgPSBvbGREYXRhLmV2ZW50cztcblxuXHRpZiAoIGV2ZW50cyApIHtcblx0XHRkZWxldGUgY3VyRGF0YS5oYW5kbGU7XG5cdFx0Y3VyRGF0YS5ldmVudHMgPSB7fTtcblxuXHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBtYWtlIHRoZSBjbG9uZWQgcHVibGljIGRhdGEgb2JqZWN0IGEgY29weSBmcm9tIHRoZSBvcmlnaW5hbFxuXHRpZiAoIGN1ckRhdGEuZGF0YSApIHtcblx0XHRjdXJEYXRhLmRhdGEgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyRGF0YS5kYXRhICk7XG5cdH1cbn1cblxuZnVuY3Rpb24gZml4Q2xvbmVOb2RlSXNzdWVzKCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSwgZSwgZGF0YTtcblxuXHQvLyBXZSBkbyBub3QgbmVlZCB0byBkbyBhbnl0aGluZyBmb3Igbm9uLUVsZW1lbnRzXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBJRTYtOCBjb3BpZXMgZXZlbnRzIGJvdW5kIHZpYSBhdHRhY2hFdmVudCB3aGVuIHVzaW5nIGNsb25lTm9kZS5cblx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lRXZlbnQgJiYgZGVzdFsgalF1ZXJ5LmV4cGFuZG8gXSApIHtcblx0XHRkYXRhID0galF1ZXJ5Ll9kYXRhKCBkZXN0ICk7XG5cblx0XHRmb3IgKCBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBkZXN0LCBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdH1cblxuXHRcdC8vIEV2ZW50IGRhdGEgZ2V0cyByZWZlcmVuY2VkIGluc3RlYWQgb2YgY29waWVkIGlmIHRoZSBleHBhbmRvIGdldHMgY29waWVkIHRvb1xuXHRcdGRlc3QucmVtb3ZlQXR0cmlidXRlKCBqUXVlcnkuZXhwYW5kbyApO1xuXHR9XG5cblx0Ly8gSUUgYmxhbmtzIGNvbnRlbnRzIHdoZW4gY2xvbmluZyBzY3JpcHRzLCBhbmQgdHJpZXMgdG8gZXZhbHVhdGUgbmV3bHktc2V0IHRleHRcblx0aWYgKCBub2RlTmFtZSA9PT0gXCJzY3JpcHRcIiAmJiBkZXN0LnRleHQgIT09IHNyYy50ZXh0ICkge1xuXHRcdGRpc2FibGVTY3JpcHQoIGRlc3QgKS50ZXh0ID0gc3JjLnRleHQ7XG5cdFx0cmVzdG9yZVNjcmlwdCggZGVzdCApO1xuXG5cdC8vIElFNi0xMCBpbXByb3Blcmx5IGNsb25lcyBjaGlsZHJlbiBvZiBvYmplY3QgZWxlbWVudHMgdXNpbmcgY2xhc3NpZC5cblx0Ly8gSUUxMCB0aHJvd3MgTm9Nb2RpZmljYXRpb25BbGxvd2VkRXJyb3IgaWYgcGFyZW50IGlzIG51bGwsICMxMjEzMi5cblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0aWYgKCBkZXN0LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRkZXN0Lm91dGVySFRNTCA9IHNyYy5vdXRlckhUTUw7XG5cdFx0fVxuXG5cdFx0Ly8gVGhpcyBwYXRoIGFwcGVhcnMgdW5hdm9pZGFibGUgZm9yIElFOS4gV2hlbiBjbG9uaW5nIGFuIG9iamVjdFxuXHRcdC8vIGVsZW1lbnQgaW4gSUU5LCB0aGUgb3V0ZXJIVE1MIHN0cmF0ZWd5IGFib3ZlIGlzIG5vdCBzdWZmaWNpZW50LlxuXHRcdC8vIElmIHRoZSBzcmMgaGFzIGlubmVySFRNTCBhbmQgdGhlIGRlc3RpbmF0aW9uIGRvZXMgbm90LFxuXHRcdC8vIGNvcHkgdGhlIHNyYy5pbm5lckhUTUwgaW50byB0aGUgZGVzdC5pbm5lckhUTUwuICMxMDMyNFxuXHRcdGlmICggc3VwcG9ydC5odG1sNUNsb25lICYmICggc3JjLmlubmVySFRNTCAmJiAhalF1ZXJ5LnRyaW0oIGRlc3QuaW5uZXJIVE1MICkgKSApIHtcblx0XHRcdGRlc3QuaW5uZXJIVE1MID0gc3JjLmlubmVySFRNTDtcblx0XHR9XG5cblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXG5cdFx0Ly8gSUU2LTggZmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveFxuXHRcdC8vIG9yIHJhZGlvIGJ1dHRvbi4gV29yc2UsIElFNi03IGZhaWwgdG8gZ2l2ZSB0aGUgY2xvbmVkIGVsZW1lbnRcblx0XHQvLyBhIGNoZWNrZWQgYXBwZWFyYW5jZSBpZiB0aGUgZGVmYXVsdENoZWNrZWQgdmFsdWUgaXNuJ3QgYWxzbyBzZXRcblxuXHRcdGRlc3QuZGVmYXVsdENoZWNrZWQgPSBkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHRcdC8vIElFNi03IGdldCBjb25mdXNlZCBhbmQgZW5kIHVwIHNldHRpbmcgdGhlIHZhbHVlIG9mIGEgY2xvbmVkXG5cdFx0Ly8gY2hlY2tib3gvcmFkaW8gYnV0dG9uIHRvIGFuIGVtcHR5IHN0cmluZyBpbnN0ZWFkIG9mIFwib25cIlxuXHRcdGlmICggZGVzdC52YWx1ZSAhPT0gc3JjLnZhbHVlICkge1xuXHRcdFx0ZGVzdC52YWx1ZSA9IHNyYy52YWx1ZTtcblx0XHR9XG5cblx0Ly8gSUU2LTggZmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWRcblx0Ly8gc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwib3B0aW9uXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0U2VsZWN0ZWQgPSBkZXN0LnNlbGVjdGVkID0gc3JjLmRlZmF1bHRTZWxlY3RlZDtcblxuXHQvLyBJRTYtOCBmYWlscyB0byBzZXQgdGhlIGRlZmF1bHRWYWx1ZSB0byB0aGUgY29ycmVjdCB2YWx1ZSB3aGVuXG5cdC8vIGNsb25pbmcgb3RoZXIgdHlwZXMgb2YgaW5wdXQgZmllbGRzXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTtcblxuXHR2YXIgZmlyc3QsIG5vZGUsIGhhc1NjcmlwdHMsXG5cdFx0c2NyaXB0cywgZG9jLCBmcmFnbWVudCxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggaXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMSwgUGhhbnRvbUpTPDJcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFqUXVlcnkuX2RhdGEoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbChcblx0XHRcdFx0XHRcdFx0XHQoIG5vZGUudGV4dCB8fCBub2RlLnRleHRDb250ZW50IHx8IG5vZGUuaW5uZXJIVE1MIHx8IFwiXCIgKVxuXHRcdFx0XHRcdFx0XHRcdFx0LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZpeCAjMTE4MDk6IEF2b2lkIGxlYWtpbmcgbWVtb3J5XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0ID0gbnVsbDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdGVsZW1zID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IGVsZW1zWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgalF1ZXJ5LmNvbnRhaW5zKCBub2RlLm93bmVyRG9jdW1lbnQsIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGRlc3RFbGVtZW50cywgbm9kZSwgY2xvbmUsIGksIHNyY0VsZW1lbnRzLFxuXHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdGlmICggc3VwcG9ydC5odG1sNUNsb25lIHx8IGpRdWVyeS5pc1hNTERvYyggZWxlbSApIHx8XG5cdFx0XHQhcm5vc2hpbWNhY2hlLnRlc3QoIFwiPFwiICsgZWxlbS5ub2RlTmFtZSArIFwiPlwiICkgKSB7XG5cblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKTtcblxuXHRcdC8vIElFPD04IGRvZXMgbm90IHByb3Blcmx5IGNsb25lIGRldGFjaGVkLCB1bmtub3duIGVsZW1lbnQgbm9kZXNcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZnJhZ21lbnREaXYuaW5uZXJIVE1MID0gZWxlbS5vdXRlckhUTUw7XG5cdFx0XHRmcmFnbWVudERpdi5yZW1vdmVDaGlsZCggY2xvbmUgPSBmcmFnbWVudERpdi5maXJzdENoaWxkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAoICFzdXBwb3J0Lm5vQ2xvbmVFdmVudCB8fCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCApICYmXG5cdFx0XHRcdCggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdC8vIEZpeCBhbGwgSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRcdGZvciAoIGkgPSAwOyAoIG5vZGUgPSBzcmNFbGVtZW50c1sgaSBdICkgIT0gbnVsbDsgKytpICkge1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGF0IHRoZSBkZXN0aW5hdGlvbiBub2RlIGlzIG5vdCBudWxsOyBGaXhlcyAjOTU4N1xuXHRcdFx0XHRpZiAoIGRlc3RFbGVtZW50c1sgaSBdICkge1xuXHRcdFx0XHRcdGZpeENsb25lTm9kZUlzc3Vlcyggbm9kZSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwOyAoIG5vZGUgPSBzcmNFbGVtZW50c1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBub2RlLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHRkZXN0RWxlbWVudHMgPSBzcmNFbGVtZW50cyA9IG5vZGUgPSBudWxsO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zLCAvKiBpbnRlcm5hbCAqLyBmb3JjZUFjY2VwdERhdGEgKSB7XG5cdFx0dmFyIGVsZW0sIHR5cGUsIGlkLCBkYXRhLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRpbnRlcm5hbEtleSA9IGpRdWVyeS5leHBhbmRvLFxuXHRcdFx0Y2FjaGUgPSBqUXVlcnkuY2FjaGUsXG5cdFx0XHRhdHRyaWJ1dGVzID0gc3VwcG9ydC5hdHRyaWJ1dGVzLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBmb3JjZUFjY2VwdERhdGEgfHwgYWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdGlkID0gZWxlbVsgaW50ZXJuYWxLZXkgXTtcblx0XHRcdFx0ZGF0YSA9IGlkICYmIGNhY2hlWyBpZCBdO1xuXG5cdFx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBSZW1vdmUgY2FjaGUgb25seSBpZiBpdCB3YXMgbm90IGFscmVhZHkgcmVtb3ZlZCBieSBqUXVlcnkuZXZlbnQucmVtb3ZlXG5cdFx0XHRcdFx0aWYgKCBjYWNoZVsgaWQgXSApIHtcblxuXHRcdFx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBpZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0XHRcdFx0XHQvLyBJRSBkb2VzIG5vdCBhbGxvdyB1cyB0byBkZWxldGUgZXhwYW5kbyBwcm9wZXJ0aWVzIGZyb20gbm9kZXNcblx0XHRcdFx0XHRcdC8vIElFIGNyZWF0ZXMgZXhwYW5kbyBhdHRyaWJ1dGVzIGFsb25nIHdpdGggdGhlIHByb3BlcnR5XG5cdFx0XHRcdFx0XHQvLyBJRSBkb2VzIG5vdCBoYXZlIGEgcmVtb3ZlQXR0cmlidXRlIGZ1bmN0aW9uIG9uIERvY3VtZW50IG5vZGVzXG5cdFx0XHRcdFx0XHRpZiAoICFhdHRyaWJ1dGVzICYmIHR5cGVvZiBlbGVtLnJlbW92ZUF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIGludGVybmFsS2V5ICk7XG5cblx0XHRcdFx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHRcdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHRcdFx0XHQvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRlbGVtWyBpbnRlcm5hbEtleSBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRkZWxldGVkSWRzLnB1c2goIGlkICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBLZWVwIGRvbU1hbmlwIGV4cG9zZWQgdW50aWwgMy4wIChnaC0yMjI1KVxuXHRkb21NYW5pcDogZG9tTWFuaXAsXG5cblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKFxuXHRcdFx0XHRcdCggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkuY3JlYXRlVGV4dE5vZGUoIHZhbHVlIClcblx0XHRcdFx0KTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdHdoaWxlICggZWxlbS5maXJzdENoaWxkICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUNoaWxkKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHNlbGVjdCwgZW5zdXJlIHRoYXQgaXQgZGlzcGxheXMgZW1wdHkgKCMxMjMzNilcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHRcdGlmICggZWxlbS5vcHRpb25zICYmIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJzZWxlY3RcIiApICkge1xuXHRcdFx0XHRlbGVtLm9wdGlvbnMubGVuZ3RoID0gMDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMSA/XG5cdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwucmVwbGFjZSggcmlubGluZWpRdWVyeSwgXCJcIiApIDpcblx0XHRcdFx0XHR1bmRlZmluZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQoIHN1cHBvcnQuaHRtbFNlcmlhbGl6ZSB8fCAhcm5vc2hpbWNhY2hlLnRlc3QoIHZhbHVlICkgICkgJiZcblx0XHRcdFx0KCBzdXBwb3J0LmxlYWRpbmdXaGl0ZXNwYWNlIHx8ICFybGVhZGluZ1doaXRlc3BhY2UudGVzdCggdmFsdWUgKSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIE1vZGVybiBicm93c2VycyBjYW4gYXBwbHkgalF1ZXJ5IGNvbGxlY3Rpb25zIGFzIGFycmF5cywgYnV0IG9sZElFIG5lZWRzIGEgLmdldCgpXG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcblxuXG52YXIgaWZyYW1lLFxuXHRlbGVtZGlzcGxheSA9IHtcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3hcblx0XHQvLyBXZSBoYXZlIHRvIHByZS1kZWZpbmUgdGhlc2UgdmFsdWVzIGZvciBGRiAoIzEwMjI3KVxuXHRcdEhUTUw6IFwiYmxvY2tcIixcblx0XHRCT0RZOiBcImJsb2NrXCJcblx0fTtcblxuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgYWN0dWFsIGRpc3BsYXkgb2YgYSBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBub2RlTmFtZSBvZiB0aGUgZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IGRvYyBEb2N1bWVudCBvYmplY3RcbiAqL1xuXG4vLyBDYWxsZWQgb25seSBmcm9tIHdpdGhpbiBkZWZhdWx0RGlzcGxheVxuZnVuY3Rpb24gYWN0dWFsRGlzcGxheSggbmFtZSwgZG9jICkge1xuXHR2YXIgZWxlbSA9IGpRdWVyeSggZG9jLmNyZWF0ZUVsZW1lbnQoIG5hbWUgKSApLmFwcGVuZFRvKCBkb2MuYm9keSApLFxuXG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW1bIDAgXSwgXCJkaXNwbGF5XCIgKTtcblxuXHQvLyBXZSBkb24ndCBoYXZlIGFueSBkYXRhIHN0b3JlZCBvbiB0aGUgZWxlbWVudCxcblx0Ly8gc28gdXNlIFwiZGV0YWNoXCIgbWV0aG9kIGFzIGZhc3Qgd2F5IHRvIGdldCByaWQgb2YgdGhlIGVsZW1lbnRcblx0ZWxlbS5kZXRhY2goKTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuLyoqXG4gKiBUcnkgdG8gZGV0ZXJtaW5lIHRoZSBkZWZhdWx0IGRpc3BsYXkgdmFsdWUgb2YgYW4gZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IG5vZGVOYW1lXG4gKi9cbmZ1bmN0aW9uIGRlZmF1bHREaXNwbGF5KCBub2RlTmFtZSApIHtcblx0dmFyIGRvYyA9IGRvY3VtZW50LFxuXHRcdGRpc3BsYXkgPSBlbGVtZGlzcGxheVsgbm9kZU5hbWUgXTtcblxuXHRpZiAoICFkaXNwbGF5ICkge1xuXHRcdGRpc3BsYXkgPSBhY3R1YWxEaXNwbGF5KCBub2RlTmFtZSwgZG9jICk7XG5cblx0XHQvLyBJZiB0aGUgc2ltcGxlIHdheSBmYWlscywgcmVhZCBmcm9tIGluc2lkZSBhbiBpZnJhbWVcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiIHx8ICFkaXNwbGF5ICkge1xuXG5cdFx0XHQvLyBVc2UgdGhlIGFscmVhZHktY3JlYXRlZCBpZnJhbWUgaWYgcG9zc2libGVcblx0XHRcdGlmcmFtZSA9ICggaWZyYW1lIHx8IGpRdWVyeSggXCI8aWZyYW1lIGZyYW1lYm9yZGVyPScwJyB3aWR0aD0nMCcgaGVpZ2h0PScwJy8+XCIgKSApXG5cdFx0XHRcdC5hcHBlbmRUbyggZG9jLmRvY3VtZW50RWxlbWVudCApO1xuXG5cdFx0XHQvLyBBbHdheXMgd3JpdGUgYSBuZXcgSFRNTCBza2VsZXRvbiBzbyBXZWJraXQgYW5kIEZpcmVmb3ggZG9uJ3QgY2hva2Ugb24gcmV1c2Vcblx0XHRcdGRvYyA9ICggaWZyYW1lWyAwIF0uY29udGVudFdpbmRvdyB8fCBpZnJhbWVbIDAgXS5jb250ZW50RG9jdW1lbnQgKS5kb2N1bWVudDtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUVcblx0XHRcdGRvYy53cml0ZSgpO1xuXHRcdFx0ZG9jLmNsb3NlKCk7XG5cblx0XHRcdGRpc3BsYXkgPSBhY3R1YWxEaXNwbGF5KCBub2RlTmFtZSwgZG9jICk7XG5cdFx0XHRpZnJhbWUuZGV0YWNoKCk7XG5cdFx0fVxuXG5cdFx0Ly8gU3RvcmUgdGhlIGNvcnJlY3QgZGVmYXVsdCBkaXNwbGF5XG5cdFx0ZWxlbWRpc3BsYXlbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXHR9XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG52YXIgcm1hcmdpbiA9ICggL15tYXJnaW4vICk7XG5cbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIHBpeGVsTWFyZ2luUmlnaHRWYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLFxuXHRcdHJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbCwgcmVsaWFibGVNYXJnaW5SaWdodFZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGRpdi5zdHlsZS5jc3NUZXh0ID0gXCJmbG9hdDpsZWZ0O29wYWNpdHk6LjVcIjtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGVsZW1lbnQgb3BhY2l0eSBleGlzdHMgKGFzIG9wcG9zZWQgdG8gZmlsdGVyKVxuXHRzdXBwb3J0Lm9wYWNpdHkgPSBkaXYuc3R5bGUub3BhY2l0eSA9PT0gXCIwLjVcIjtcblxuXHQvLyBWZXJpZnkgc3R5bGUgZmxvYXQgZXhpc3RlbmNlXG5cdC8vIChJRSB1c2VzIHN0eWxlRmxvYXQgaW5zdGVhZCBvZiBjc3NGbG9hdClcblx0c3VwcG9ydC5jc3NGbG9hdCA9ICEhZGl2LnN0eWxlLmNzc0Zsb2F0O1xuXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXI6MDt3aWR0aDo4cHg7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4O1wiICtcblx0XHRcInBhZGRpbmc6MDttYXJnaW4tdG9wOjFweDtwb3NpdGlvbjphYnNvbHV0ZVwiO1xuXHRkaXYuaW5uZXJIVE1MID0gXCJcIjtcblx0Y29udGFpbmVyLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94PDI5LCBBbmRyb2lkIDIuM1xuXHQvLyBWZW5kb3ItcHJlZml4IGJveC1zaXppbmdcblx0c3VwcG9ydC5ib3hTaXppbmcgPSBkaXYuc3R5bGUuYm94U2l6aW5nID09PSBcIlwiIHx8IGRpdi5zdHlsZS5Nb3pCb3hTaXppbmcgPT09IFwiXCIgfHxcblx0XHRkaXYuc3R5bGUuV2Via2l0Qm94U2l6aW5nID09PSBcIlwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRyZWxpYWJsZUhpZGRlbk9mZnNldHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBwaXhlbFBvc2l0aW9uVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVIaWRkZW5PZmZzZXRzVmFsO1xuXHRcdH0sXG5cblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGNoZWNraW5nIGZvciBwaXhlbFBvc2l0aW9uVmFsIGhlcmUgaW5zdGVhZCBvZiBib3hTaXppbmdSZWxpYWJsZVZhbFxuXHRcdFx0Ly8gc2luY2UgdGhhdCBjb21wcmVzc2VzIGJldHRlciBhbmQgdGhleSdyZSBjb21wdXRlZCB0b2dldGhlciBhbnl3YXkuXG5cdFx0XHRpZiAoIHBpeGVsUG9zaXRpb25WYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXG5cdFx0cGl4ZWxNYXJnaW5SaWdodDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wLTQuM1xuXHRcdFx0aWYgKCBwaXhlbFBvc2l0aW9uVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcGl4ZWxNYXJnaW5SaWdodFZhbDtcblx0XHR9LFxuXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHBpeGVsUG9zaXRpb25WYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cblx0XHRyZWxpYWJsZU1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjNcblx0XHRcdGlmICggcGl4ZWxQb3NpdGlvblZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luUmlnaHRWYWw7XG5cdFx0fSxcblxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCBvbmx5LCBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDM3XG5cdFx0XHRpZiAoIHBpeGVsUG9zaXRpb25WYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fVxuXHR9ICk7XG5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cdFx0dmFyIGNvbnRlbnRzLCBkaXZTdHlsZSxcblx0XHRcdGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXHRcdC8vIFNldHVwXG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjNcblx0XHRcdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xuXHRcdFx0XCItd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7XCIgK1xuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcInRvcDoxJTt3aWR0aDo1MCVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBBc3N1bWUgcmVhc29uYWJsZSB2YWx1ZXMgaW4gdGhlIGFic2VuY2Ugb2YgZ2V0Q29tcHV0ZWRTdHlsZVxuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBib3hTaXppbmdSZWxpYWJsZVZhbCA9IHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IGZhbHNlO1xuXHRcdHBpeGVsTWFyZ2luUmlnaHRWYWwgPSByZWxpYWJsZU1hcmdpblJpZ2h0VmFsID0gdHJ1ZTtcblxuXHRcdC8vIENoZWNrIGZvciBnZXRDb21wdXRlZFN0eWxlIHNvIHRoYXQgdGhpcyBjb2RlIGlzIG5vdCBydW4gaW4gSUU8OS5cblx0XHRpZiAoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlICkge1xuXHRcdFx0ZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0XHRwaXhlbFBvc2l0aW9uVmFsID0gKCBkaXZTdHlsZSB8fCB7fSApLnRvcCAhPT0gXCIxJVwiO1xuXHRcdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gKCBkaXZTdHlsZSB8fCB7fSApLm1hcmdpbkxlZnQgPT09IFwiMnB4XCI7XG5cdFx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9ICggZGl2U3R5bGUgfHwgeyB3aWR0aDogXCI0cHhcIiB9ICkud2lkdGggPT09IFwiNHB4XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0XHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdFx0ZGl2LnN0eWxlLm1hcmdpblJpZ2h0ID0gXCI1MCVcIjtcblx0XHRcdHBpeGVsTWFyZ2luUmlnaHRWYWwgPSAoIGRpdlN0eWxlIHx8IHsgbWFyZ2luUmlnaHQ6IFwiNHB4XCIgfSApLm1hcmdpblJpZ2h0ID09PSBcIjRweFwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHQvLyBEaXYgd2l0aCBleHBsaWNpdCB3aWR0aCBhbmQgbm8gbWFyZ2luLXJpZ2h0IGluY29ycmVjdGx5XG5cdFx0XHQvLyBnZXRzIGNvbXB1dGVkIG1hcmdpbi1yaWdodCBiYXNlZCBvbiB3aWR0aCBvZiBjb250YWluZXIgKCMzMzMzKVxuXHRcdFx0Ly8gV2ViS2l0IEJ1ZyAxMzM0MyAtIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyB3cm9uZyB2YWx1ZSBmb3IgbWFyZ2luLXJpZ2h0XG5cdFx0XHRjb250ZW50cyA9IGRpdi5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdC8vIFJlc2V0IENTUzogYm94LXNpemluZzsgZGlzcGxheTsgbWFyZ2luOyBib3JkZXI7IHBhZGRpbmdcblx0XHRcdGNvbnRlbnRzLnN0eWxlLmNzc1RleHQgPSBkaXYuc3R5bGUuY3NzVGV4dCA9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjNcblx0XHRcdFx0Ly8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nXG5cdFx0XHRcdFwiLXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94Oy1tb3otYm94LXNpemluZzpjb250ZW50LWJveDtcIiArXG5cdFx0XHRcdFwiYm94LXNpemluZzpjb250ZW50LWJveDtkaXNwbGF5OmJsb2NrO21hcmdpbjowO2JvcmRlcjowO3BhZGRpbmc6MFwiO1xuXHRcdFx0Y29udGVudHMuc3R5bGUubWFyZ2luUmlnaHQgPSBjb250ZW50cy5zdHlsZS53aWR0aCA9IFwiMFwiO1xuXHRcdFx0ZGl2LnN0eWxlLndpZHRoID0gXCIxcHhcIjtcblxuXHRcdFx0cmVsaWFibGVNYXJnaW5SaWdodFZhbCA9XG5cdFx0XHRcdCFwYXJzZUZsb2F0KCAoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBjb250ZW50cyApIHx8IHt9ICkubWFyZ2luUmlnaHQgKTtcblxuXHRcdFx0ZGl2LnJlbW92ZUNoaWxkKCBjb250ZW50cyApO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFNi04XG5cdFx0Ly8gRmlyc3QgY2hlY2sgdGhhdCBnZXRDbGllbnRSZWN0cyB3b3JrcyBhcyBleHBlY3RlZFxuXHRcdC8vIENoZWNrIGlmIHRhYmxlIGNlbGxzIHN0aWxsIGhhdmUgb2Zmc2V0V2lkdGgvSGVpZ2h0IHdoZW4gdGhleSBhcmUgc2V0XG5cdFx0Ly8gdG8gZGlzcGxheTpub25lIGFuZCB0aGVyZSBhcmUgc3RpbGwgb3RoZXIgdmlzaWJsZSB0YWJsZSBjZWxscyBpbiBhXG5cdFx0Ly8gdGFibGUgcm93OyBpZiBzbywgb2Zmc2V0V2lkdGgvSGVpZ2h0IGFyZSBub3QgcmVsaWFibGUgZm9yIHVzZSB3aGVuXG5cdFx0Ly8gZGV0ZXJtaW5pbmcgaWYgYW4gZWxlbWVudCBoYXMgYmVlbiBoaWRkZW4gZGlyZWN0bHkgdXNpbmdcblx0XHQvLyBkaXNwbGF5Om5vbmUgKGl0IGlzIHN0aWxsIHNhZmUgdG8gdXNlIG9mZnNldHMgaWYgYSBwYXJlbnQgZWxlbWVudCBpc1xuXHRcdC8vIGhpZGRlbjsgZG9uIHNhZmV0eSBnb2dnbGVzIGFuZCBzZWUgYnVnICM0NTEyIGZvciBtb3JlIGluZm9ybWF0aW9uKS5cblx0XHRkaXYuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXHRcdHJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbCA9IGRpdi5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCA9PT0gMDtcblx0XHRpZiAoIHJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbCApIHtcblx0XHRcdGRpdi5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdGRpdi5pbm5lckhUTUwgPSBcIjx0YWJsZT48dHI+PHRkPjwvdGQ+PHRkPnQ8L3RkPjwvdHI+PC90YWJsZT5cIjtcblx0XHRcdGRpdi5jaGlsZE5vZGVzWyAwIF0uc3R5bGUuYm9yZGVyQ29sbGFwc2UgPSBcInNlcGFyYXRlXCI7XG5cdFx0XHRjb250ZW50cyA9IGRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJ0ZFwiICk7XG5cdFx0XHRjb250ZW50c1sgMCBdLnN0eWxlLmNzc1RleHQgPSBcIm1hcmdpbjowO2JvcmRlcjowO3BhZGRpbmc6MDtkaXNwbGF5Om5vbmVcIjtcblx0XHRcdHJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbCA9IGNvbnRlbnRzWyAwIF0ub2Zmc2V0SGVpZ2h0ID09PSAwO1xuXHRcdFx0aWYgKCByZWxpYWJsZUhpZGRlbk9mZnNldHNWYWwgKSB7XG5cdFx0XHRcdGNvbnRlbnRzWyAwIF0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdGNvbnRlbnRzWyAxIF0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXHRcdFx0XHRyZWxpYWJsZUhpZGRlbk9mZnNldHNWYWwgPSBjb250ZW50c1sgMCBdLm9mZnNldEhlaWdodCA9PT0gMDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBUZWFyZG93blxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cdH1cblxufSApKCk7XG5cblxudmFyIGdldFN0eWxlcywgY3VyQ1NTLFxuXHRycG9zaXRpb24gPSAvXih0b3B8cmlnaHR8Ym90dG9tfGxlZnQpJC87XG5cbmlmICggd2luZG93LmdldENvbXB1dGVkU3R5bGUgKSB7XG5cdGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUU8PTExKywgRmlyZWZveDw9MzArICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cblx0Y3VyQ1NTID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHRcdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdFx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBvbmx5IG5lZWRlZCBmb3IgLmNzcygnZmlsdGVyJykgaW4gSUU5LCBzZWUgIzEyNTM3XG5cdFx0cmV0ID0gY29tcHV0ZWQgPyBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXSA6IHVuZGVmaW5lZDtcblxuXHRcdC8vIFN1cHBvcnQ6IE9wZXJhIDEyLjF4IG9ubHlcblx0XHQvLyBGYWxsIGJhY2sgdG8gc3R5bGUgZXZlbiB3aXRob3V0IGNvbXB1dGVkXG5cdFx0Ly8gY29tcHV0ZWQgaXMgdW5kZWZpbmVkIGZvciBlbGVtcyBvbiBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRpZiAoICggcmV0ID09PSBcIlwiIHx8IHJldCA9PT0gdW5kZWZpbmVkICkgJiYgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0XHQvLyBDaHJvbWUgPCAxNyBhbmQgU2FmYXJpIDUuMCB1c2VzIFwiY29tcHV0ZWQgdmFsdWVcIlxuXHRcdFx0Ly8gaW5zdGVhZCBvZiBcInVzZWQgdmFsdWVcIiBmb3IgbWFyZ2luLXJpZ2h0XG5cdFx0XHQvLyBTYWZhcmkgNS4xLjcgKGF0IGxlYXN0KSByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIGEgbGFyZ2VyIHNldCBvZiB2YWx1ZXMsXG5cdFx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzXG5cdFx0XHQvLyB0aGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0XHQvLyBodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LnBpeGVsTWFyZ2luUmlnaHQoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcm1hcmdpbi50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUVcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldHVybiByZXQgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRyZXQgOlxuXHRcdFx0cmV0ICsgXCJcIjtcblx0fTtcbn0gZWxzZSBpZiAoIGRvY3VtZW50RWxlbWVudC5jdXJyZW50U3R5bGUgKSB7XG5cdGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLmN1cnJlbnRTdHlsZTtcblx0fTtcblxuXHRjdXJDU1MgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdFx0dmFyIGxlZnQsIHJzLCByc0xlZnQsIHJldCxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0cmV0ID0gY29tcHV0ZWQgPyBjb21wdXRlZFsgbmFtZSBdIDogdW5kZWZpbmVkO1xuXG5cdFx0Ly8gQXZvaWQgc2V0dGluZyByZXQgdG8gZW1wdHkgc3RyaW5nIGhlcmVcblx0XHQvLyBzbyB3ZSBkb24ndCBkZWZhdWx0IHRvIGF1dG9cblx0XHRpZiAoIHJldCA9PSBudWxsICYmIHN0eWxlICYmIHN0eWxlWyBuYW1lIF0gKSB7XG5cdFx0XHRyZXQgPSBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIEZyb20gdGhlIGF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcblx0XHQvLyBodHRwOi8vZXJpay5lYWUubmV0L2FyY2hpdmVzLzIwMDcvMDcvMjcvMTguNTQuMTUvI2NvbW1lbnQtMTAyMjkxXG5cblx0XHQvLyBJZiB3ZSdyZSBub3QgZGVhbGluZyB3aXRoIGEgcmVndWxhciBwaXhlbCBudW1iZXJcblx0XHQvLyBidXQgYSBudW1iZXIgdGhhdCBoYXMgYSB3ZWlyZCBlbmRpbmcsIHdlIG5lZWQgdG8gY29udmVydCBpdCB0byBwaXhlbHNcblx0XHQvLyBidXQgbm90IHBvc2l0aW9uIGNzcyBhdHRyaWJ1dGVzLCBhcyB0aG9zZSBhcmVcblx0XHQvLyBwcm9wb3J0aW9uYWwgdG8gdGhlIHBhcmVudCBlbGVtZW50IGluc3RlYWRcblx0XHQvLyBhbmQgd2UgY2FuJ3QgbWVhc3VyZSB0aGUgcGFyZW50IGluc3RlYWQgYmVjYXVzZSBpdFxuXHRcdC8vIG1pZ2h0IHRyaWdnZXIgYSBcInN0YWNraW5nIGRvbGxzXCIgcHJvYmxlbVxuXHRcdGlmICggcm51bW5vbnB4LnRlc3QoIHJldCApICYmICFycG9zaXRpb24udGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHRsZWZ0ID0gc3R5bGUubGVmdDtcblx0XHRcdHJzID0gZWxlbS5ydW50aW1lU3R5bGU7XG5cdFx0XHRyc0xlZnQgPSBycyAmJiBycy5sZWZ0O1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRpZiAoIHJzTGVmdCApIHtcblx0XHRcdFx0cnMubGVmdCA9IGVsZW0uY3VycmVudFN0eWxlLmxlZnQ7XG5cdFx0XHR9XG5cdFx0XHRzdHlsZS5sZWZ0ID0gbmFtZSA9PT0gXCJmb250U2l6ZVwiID8gXCIxZW1cIiA6IHJldDtcblx0XHRcdHJldCA9IHN0eWxlLnBpeGVsTGVmdCArIFwicHhcIjtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUubGVmdCA9IGxlZnQ7XG5cdFx0XHRpZiAoIHJzTGVmdCApIHtcblx0XHRcdFx0cnMubGVmdCA9IHJzTGVmdDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0dXJuIHJldCA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHJldCA6XG5cdFx0XHRyZXQgKyBcIlwiIHx8IFwiYXV0b1wiO1xuXHR9O1xufVxuXG5cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXJcblxuXHRcdHJhbHBoYSA9IC9hbHBoYVxcKFteKV0qXFwpL2ksXG5cdHJvcGFjaXR5ID0gL29wYWNpdHlcXHMqPVxccyooW14pXSopL2ksXG5cblx0Ly8gc3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZSBleGNlcHRcblx0Ly8gXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gc2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOlxuXHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cm51bXNwbGl0ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSguKikkXCIsIFwiaVwiICksXG5cblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH0sXG5cblx0Y3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiT1wiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZTtcblxuXG4vLyByZXR1cm4gYSBjc3MgcHJvcGVydHkgbWFwcGVkIHRvIGEgcG90ZW50aWFsbHkgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBzaG9ydGN1dCBmb3IgbmFtZXMgdGhhdCBhcmUgbm90IHZlbmRvciBwcmVmaXhlZFxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXG5cdC8vIGNoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lLmNoYXJBdCggMCApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSwgaGlkZGVuLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdHZhbHVlc1sgaW5kZXggXSA9IGpRdWVyeS5fZGF0YSggZWxlbSwgXCJvbGRkaXNwbGF5XCIgKTtcblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gUmVzZXQgdGhlIGlubGluZSBkaXNwbGF5IG9mIHRoaXMgZWxlbWVudCB0byBsZWFybiBpZiBpdCBpc1xuXHRcdFx0Ly8gYmVpbmcgaGlkZGVuIGJ5IGNhc2NhZGVkIHJ1bGVzIG9yIG5vdFxuXHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICYmIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZWxlbWVudHMgd2hpY2ggaGF2ZSBiZWVuIG92ZXJyaWRkZW4gd2l0aCBkaXNwbGF5OiBub25lXG5cdFx0XHQvLyBpbiBhIHN0eWxlc2hlZXQgdG8gd2hhdGV2ZXIgdGhlIGRlZmF1bHQgYnJvd3NlciBzdHlsZSBpc1xuXHRcdFx0Ly8gZm9yIHN1Y2ggYW4gZWxlbWVudFxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW4oIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID1cblx0XHRcdFx0XHRqUXVlcnkuX2RhdGEoIGVsZW0sIFwib2xkZGlzcGxheVwiLCBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGhpZGRlbiA9IGlzSGlkZGVuKCBlbGVtICk7XG5cblx0XHRcdGlmICggZGlzcGxheSAmJiBkaXNwbGF5ICE9PSBcIm5vbmVcIiB8fCAhaGlkZGVuICkge1xuXHRcdFx0XHRqUXVlcnkuX2RhdGEoXG5cdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRcIm9sZGRpc3BsYXlcIixcblx0XHRcdFx0XHRoaWRkZW4gPyBkaXNwbGF5IDogalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiBtb3N0IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wXG5cdC8vIHRvIGF2b2lkIHRoZSBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblx0XHRpZiAoICFzaG93IHx8IGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHwgZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gc2hvdyA/IHZhbHVlc1sgaW5kZXggXSB8fCBcIlwiIDogXCJub25lXCI7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXHR2YXIgbWF0Y2hlcyA9IHJudW1zcGxpdC5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAxIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAyIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBhdWdtZW50V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEsIGlzQm9yZGVyQm94LCBzdHlsZXMgKSB7XG5cdHZhciBpID0gZXh0cmEgPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSA/XG5cblx0XHQvLyBJZiB3ZSBhbHJlYWR5IGhhdmUgdGhlIHJpZ2h0IG1lYXN1cmVtZW50LCBhdm9pZCBhdWdtZW50YXRpb25cblx0XHQ0IDpcblxuXHRcdC8vIE90aGVyd2lzZSBpbml0aWFsaXplIGZvciBob3Jpem9udGFsIG9yIHZlcnRpY2FsIHByb3BlcnRpZXNcblx0XHRuYW1lID09PSBcIndpZHRoXCIgPyAxIDogMCxcblxuXHRcdHZhbCA9IDA7XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gYm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luLCBzbyBhZGQgaXQgaWYgd2Ugd2FudCBpdFxuXHRcdGlmICggZXh0cmEgPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgZXh0cmEgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gYm9yZGVyLWJveCBpbmNsdWRlcyBwYWRkaW5nLCBzbyByZW1vdmUgaXQgaWYgd2Ugd2FudCBjb250ZW50XG5cdFx0XHRpZiAoIGV4dHJhID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBhdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBib3JkZXIgbm9yIG1hcmdpbiwgc28gcmVtb3ZlIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gYXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCwgc28gYWRkIHBhZGRpbmdcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gYXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCBub3IgcGFkZGluZywgc28gYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggb2Zmc2V0IHByb3BlcnR5LCB3aGljaCBpcyBlcXVpdmFsZW50IHRvIHRoZSBib3JkZXItYm94IHZhbHVlXG5cdHZhciB2YWx1ZUlzQm9yZGVyQm94ID0gdHJ1ZSxcblx0XHR2YWwgPSBuYW1lID09PSBcIndpZHRoXCIgPyBlbGVtLm9mZnNldFdpZHRoIDogZWxlbS5vZmZzZXRIZWlnaHQsXG5cdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0aXNCb3JkZXJCb3ggPSBzdXBwb3J0LmJveFNpemluZyAmJlxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHQvLyBzb21lIG5vbi1odG1sIGVsZW1lbnRzIHJldHVybiB1bmRlZmluZWQgZm9yIG9mZnNldFdpZHRoLCBzbyBjaGVjayBmb3IgbnVsbC91bmRlZmluZWRcblx0Ly8gc3ZnIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjQ5Mjg1XG5cdC8vIE1hdGhNTCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTQ5MTY2OFxuXHRpZiAoIHZhbCA8PSAwIHx8IHZhbCA9PSBudWxsICkge1xuXG5cdFx0Ly8gRmFsbCBiYWNrIHRvIGNvbXB1dGVkIHRoZW4gdW5jb21wdXRlZCBjc3MgaWYgbmVjZXNzYXJ5XG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHRpZiAoIHZhbCA8IDAgfHwgdmFsID09IG51bGwgKSB7XG5cdFx0XHR2YWwgPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gQ29tcHV0ZWQgdW5pdCBpcyBub3QgcGl4ZWxzLiBTdG9wIGhlcmUgYW5kIHJldHVybi5cblx0XHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXG5cdFx0Ly8gd2UgbmVlZCB0aGUgY2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcblx0XHQvLyBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzaWxlbnRseSBmYWxscyBiYWNrIHRvIHRoZSByZWxpYWJsZSBlbGVtLnN0eWxlXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94ICYmXG5cdFx0XHQoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIG5hbWUgXSApO1xuXG5cdFx0Ly8gTm9ybWFsaXplIFwiXCIsIGF1dG8sIGFuZCBwcmVwYXJlIGZvciBleHRyYVxuXHRcdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cdH1cblxuXHQvLyB1c2UgdGhlIGFjdGl2ZSBib3gtc2l6aW5nIG1vZGVsIHRvIGFkZC9zdWJ0cmFjdCBpcnJlbGV2YW50IHN0eWxlc1xuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0ZWxlbSxcblx0XHRcdG5hbWUsXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge1xuXG5cdFx0Ly8gbm9ybWFsaXplIGZsb2F0IGNzcyBwcm9wZXJ0eVxuXHRcdFwiZmxvYXRcIjogc3VwcG9ydC5jc3NGbG9hdCA/IFwiY3NzRmxvYXRcIiA6IFwic3R5bGVGbG9hdFwiXG5cdH0sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0bmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fFxuXHRcdFx0KCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggb3JpZ05hbWUgKSB8fCBvcmlnTmFtZSApO1xuXG5cdFx0Ly8gZ2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvblxuXHRcdC8vIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQuIFNlZTogIzcxMTZcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZpeGVzICM4OTA4LCBpdCBjYW4gYmUgZG9uZSBtb3JlIGNvcnJlY3RseSBieSBzcGVjaWZpbmcgc2V0dGVycyBpbiBjc3NIb29rcyxcblx0XHRcdC8vIGJ1dCBpdCB3b3VsZCBtZWFuIHRvIGRlZmluZSBlaWdodFxuXHRcdFx0Ly8gKGZvciBldmVyeSBwcm9ibGVtYXRpYyBwcm9wZXJ0eSkgaWRlbnRpY2FsIGZ1bmN0aW9uc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRVxuXHRcdFx0XHQvLyBTd2FsbG93IGVycm9ycyBmcm9tICdpbnZhbGlkJyBDU1MgdmFsdWVzICgjNTUwOSlcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciBudW0sIHZhbCwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHxcblx0XHRcdCggalF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG9yaWdOYW1lICkgfHwgb3JpZ05hbWUgKTtcblxuXHRcdC8vIGdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb25cblx0XHQvLyBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vY29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4sIGNvbnZlcnRpbmcgdG8gbnVtYmVyIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBjZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gaG93ZXZlciwgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdCBmcm9tIHRoaXNcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblx0XHRcdFx0XHRlbGVtLm9mZnNldFdpZHRoID09PSAwID9cblx0XHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgc3R5bGVzID0gZXh0cmEgJiYgZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBleHRyYSA/XG5cdFx0XHRcdGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0bmFtZSxcblx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRzdXBwb3J0LmJveFNpemluZyAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0KSA6IDBcblx0XHRcdCk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5pZiAoICFzdXBwb3J0Lm9wYWNpdHkgKSB7XG5cdGpRdWVyeS5jc3NIb29rcy5vcGFjaXR5ID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXG5cdFx0XHQvLyBJRSB1c2VzIGZpbHRlcnMgZm9yIG9wYWNpdHlcblx0XHRcdHJldHVybiByb3BhY2l0eS50ZXN0KCAoIGNvbXB1dGVkICYmIGVsZW0uY3VycmVudFN0eWxlID9cblx0XHRcdFx0ZWxlbS5jdXJyZW50U3R5bGUuZmlsdGVyIDpcblx0XHRcdFx0ZWxlbS5zdHlsZS5maWx0ZXIgKSB8fCBcIlwiICkgP1xuXHRcdFx0XHRcdCggMC4wMSAqIHBhcnNlRmxvYXQoIFJlZ0V4cC4kMSApICkgKyBcIlwiIDpcblx0XHRcdFx0XHRjb21wdXRlZCA/IFwiMVwiIDogXCJcIjtcblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdFx0XHRjdXJyZW50U3R5bGUgPSBlbGVtLmN1cnJlbnRTdHlsZSxcblx0XHRcdFx0b3BhY2l0eSA9IGpRdWVyeS5pc051bWVyaWMoIHZhbHVlICkgPyBcImFscGhhKG9wYWNpdHk9XCIgKyB2YWx1ZSAqIDEwMCArIFwiKVwiIDogXCJcIixcblx0XHRcdFx0ZmlsdGVyID0gY3VycmVudFN0eWxlICYmIGN1cnJlbnRTdHlsZS5maWx0ZXIgfHwgc3R5bGUuZmlsdGVyIHx8IFwiXCI7XG5cblx0XHRcdC8vIElFIGhhcyB0cm91YmxlIHdpdGggb3BhY2l0eSBpZiBpdCBkb2VzIG5vdCBoYXZlIGxheW91dFxuXHRcdFx0Ly8gRm9yY2UgaXQgYnkgc2V0dGluZyB0aGUgem9vbSBsZXZlbFxuXHRcdFx0c3R5bGUuem9vbSA9IDE7XG5cblx0XHRcdC8vIGlmIHNldHRpbmcgb3BhY2l0eSB0byAxLCBhbmQgbm8gb3RoZXIgZmlsdGVycyBleGlzdCAtXG5cdFx0XHQvLyBhdHRlbXB0IHRvIHJlbW92ZSBmaWx0ZXIgYXR0cmlidXRlICM2NjUyXG5cdFx0XHQvLyBpZiB2YWx1ZSA9PT0gXCJcIiwgdGhlbiByZW1vdmUgaW5saW5lIG9wYWNpdHkgIzEyNjg1XG5cdFx0XHRpZiAoICggdmFsdWUgPj0gMSB8fCB2YWx1ZSA9PT0gXCJcIiApICYmXG5cdFx0XHRcdFx0alF1ZXJ5LnRyaW0oIGZpbHRlci5yZXBsYWNlKCByYWxwaGEsIFwiXCIgKSApID09PSBcIlwiICYmXG5cdFx0XHRcdFx0c3R5bGUucmVtb3ZlQXR0cmlidXRlICkge1xuXG5cdFx0XHRcdC8vIFNldHRpbmcgc3R5bGUuZmlsdGVyIHRvIG51bGwsIFwiXCIgJiBcIiBcIiBzdGlsbCBsZWF2ZSBcImZpbHRlcjpcIiBpbiB0aGUgY3NzVGV4dFxuXHRcdFx0XHQvLyBpZiBcImZpbHRlcjpcIiBpcyBwcmVzZW50IGF0IGFsbCwgY2xlYXJUeXBlIGlzIGRpc2FibGVkLCB3ZSB3YW50IHRvIGF2b2lkIHRoaXNcblx0XHRcdFx0Ly8gc3R5bGUucmVtb3ZlQXR0cmlidXRlIGlzIElFIE9ubHksIGJ1dCBzbyBhcHBhcmVudGx5IGlzIHRoaXMgY29kZSBwYXRoLi4uXG5cdFx0XHRcdHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSggXCJmaWx0ZXJcIiApO1xuXG5cdFx0XHRcdC8vIGlmIHRoZXJlIGlzIG5vIGZpbHRlciBzdHlsZSBhcHBsaWVkIGluIGEgY3NzIHJ1bGVcblx0XHRcdFx0Ly8gb3IgdW5zZXQgaW5saW5lIG9wYWNpdHksIHdlIGFyZSBkb25lXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwiXCIgfHwgY3VycmVudFN0eWxlICYmICFjdXJyZW50U3R5bGUuZmlsdGVyICkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBvdGhlcndpc2UsIHNldCBuZXcgZmlsdGVyIHZhbHVlc1xuXHRcdFx0c3R5bGUuZmlsdGVyID0gcmFscGhhLnRlc3QoIGZpbHRlciApID9cblx0XHRcdFx0ZmlsdGVyLnJlcGxhY2UoIHJhbHBoYSwgb3BhY2l0eSApIDpcblx0XHRcdFx0ZmlsdGVyICsgXCIgXCIgKyBvcGFjaXR5O1xuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpblJpZ2h0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luUmlnaHQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuIHN3YXAoIGVsZW0sIHsgXCJkaXNwbGF5XCI6IFwiaW5saW5lLWJsb2NrXCIgfSxcblx0XHRcdFx0Y3VyQ1NTLCBbIGVsZW0sIFwibWFyZ2luUmlnaHRcIiBdICk7XG5cdFx0fVxuXHR9XG4pO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuIChcblx0XHRcdFx0cGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw9MTErXG5cdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFOCBvbmx5XG5cdFx0XHRcdC8vIGdldENsaWVudFJlY3RzKCkgZXJyb3JzIG9uIGRpc2Nvbm5lY3RlZCBlbGVtc1xuXHRcdFx0XHQoIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgP1xuXHRcdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdDBcblx0XHRcdFx0KVxuXHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBhc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggIXJtYXJnaW4udGVzdCggcHJlZml4ICkgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbiggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzXG5cdFx0XHQvLyBzbywgc2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQuXG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzIGlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIHVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0IC0gdXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlIC0gdXNlIC5zdHlsZSBpZiBpdHNcblx0XHRcdC8vIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgQ29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIHRpbWVySWQsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IGpRdWVyeS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfSxcblx0XHRpID0gMDtcblxuXHQvLyBpZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIGlmIHdlIGRvbid0IGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQgOyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyB3ZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0LyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgdHdlZW4sIGhvb2tzLCBvbGRmaXJlLCBkaXNwbGF5LCBjaGVja0Rpc3BsYXksXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBqUXVlcnkuX2RhdGEoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBoYW5kbGUgcXVldWU6IGZhbHNlIHByb21pc2VzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIGRvaW5nIHRoaXMgbWFrZXMgc3VyZSB0aGF0IHRoZSBjb21wbGV0ZSBoYW5kbGVyIHdpbGwgYmUgY2FsbGVkXG5cdFx0XHQvLyBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gaGVpZ2h0L3dpZHRoIG92ZXJmbG93IHBhc3Ncblx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCJoZWlnaHRcIiBpbiBwcm9wcyB8fCBcIndpZHRoXCIgaW4gcHJvcHMgKSApIHtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG5vdGhpbmcgc25lYWtzIG91dFxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3Rcblx0XHQvLyBjaGFuZ2UgdGhlIG92ZXJmbG93IGF0dHJpYnV0ZSB3aGVuIG92ZXJmbG93WCBhbmRcblx0XHQvLyBvdmVyZmxvd1kgYXJlIHNldCB0byB0aGUgc2FtZSB2YWx1ZVxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gU2V0IGRpc3BsYXkgcHJvcGVydHkgdG8gaW5saW5lLWJsb2NrIGZvciBoZWlnaHQvd2lkdGhcblx0XHQvLyBhbmltYXRpb25zIG9uIGlubGluZSBlbGVtZW50cyB0aGF0IGFyZSBoYXZpbmcgd2lkdGgvaGVpZ2h0IGFuaW1hdGVkXG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cblx0XHQvLyBUZXN0IGRlZmF1bHQgZGlzcGxheSBpZiBkaXNwbGF5IGlzIGN1cnJlbnRseSBcIm5vbmVcIlxuXHRcdGNoZWNrRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID9cblx0XHRcdGpRdWVyeS5fZGF0YSggZWxlbSwgXCJvbGRkaXNwbGF5XCIgKSB8fCBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApIDogZGlzcGxheTtcblxuXHRcdGlmICggY2hlY2tEaXNwbGF5ID09PSBcImlubGluZVwiICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0Ly8gaW5saW5lLWxldmVsIGVsZW1lbnRzIGFjY2VwdCBpbmxpbmUtYmxvY2s7XG5cdFx0XHQvLyBibG9jay1sZXZlbCBlbGVtZW50cyBuZWVkIHRvIGJlIGlubGluZSB3aXRoIGxheW91dFxuXHRcdFx0aWYgKCAhc3VwcG9ydC5pbmxpbmVCbG9ja05lZWRzTGF5b3V0IHx8IGRlZmF1bHREaXNwbGF5KCBlbGVtLm5vZGVOYW1lICkgPT09IFwiaW5saW5lXCIgKSB7XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c3R5bGUuem9vbSA9IDE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRpZiAoICFzdXBwb3J0LnNocmlua1dyYXBCbG9ja3MoKSApIHtcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdFx0fSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIHNob3cvaGlkZSBwYXNzXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMuZXhlYyggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgZGF0YVNob3cgbGVmdCBvdmVyIGZyb20gYSBzdG9wcGVkIGhpZGUgb3Igc2hvd1xuXHRcdFx0XHQvLyBhbmQgd2UgYXJlIGdvaW5nIHRvIHByb2NlZWQgd2l0aCBzaG93LCB3ZSBzaG91bGQgcHJldGVuZCB0byBiZSBoaWRkZW5cblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cblx0XHQvLyBBbnkgbm9uLWZ4IHZhbHVlIHN0b3BzIHVzIGZyb20gcmVzdG9yaW5nIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlXG5cdFx0fSBlbHNlIHtcblx0XHRcdGRpc3BsYXkgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGFTaG93ID0galF1ZXJ5Ll9kYXRhKCBlbGVtLCBcImZ4c2hvd1wiLCB7fSApO1xuXHRcdH1cblxuXHRcdC8vIHN0b3JlIHN0YXRlIGlmIGl0cyB0b2dnbGUgLSBlbmFibGVzIC5zdG9wKCkudG9nZ2xlKCkgdG8gXCJyZXZlcnNlXCJcblx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0fVxuXHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0alF1ZXJ5KCBlbGVtICkuc2hvdygpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5oaWRlKCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgcHJvcDtcblx0XHRcdGpRdWVyeS5fcmVtb3ZlRGF0YSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHR0d2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXG5cdFx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0XHR0d2Vlbi5lbmQgPSB0d2Vlbi5zdGFydDtcblx0XHRcdFx0XHR0d2Vlbi5zdGFydCA9IHByb3AgPT09IFwid2lkdGhcIiB8fCBwcm9wID09PSBcImhlaWdodFwiID8gMSA6IDA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0Ly8gSWYgdGhpcyBpcyBhIG5vb3AgbGlrZSAuaGlkZSgpLmhpZGUoKSwgcmVzdG9yZSBhbiBvdmVyd3JpdHRlbiBkaXNwbGF5IHZhbHVlXG5cdH0gZWxzZSBpZiAoICggZGlzcGxheSA9PT0gXCJub25lXCIgPyBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApIDogZGlzcGxheSApID09PSBcImlubGluZVwiICkge1xuXHRcdHN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5O1xuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBub3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29udCBvdmVyd3JpdGUga2V5cyBhbHJlYWR5IHByZXNlbnQuXG5cdFx0XHQvLyBhbHNvIC0gcmV1c2luZyAnaW5kZXgnIGZyb20gYWJvdmUgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBkb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gaWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gcmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZVxuXHRcdFx0XHQvLyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdGpRdWVyeS5wcm94eSggcmVzdWx0LnN0b3AsIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdC8vIGF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdHJldHVybiBhbmltYXRpb24ucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5vZmYgPyAwIDogdHlwZW9mIG9wdC5kdXJhdGlvbiA9PT0gXCJudW1iZXJcIiA/IG9wdC5kdXJhdGlvbiA6XG5cdFx0b3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgP1xuXHRcdFx0alF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF0gOiBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXG5cdC8vIG5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBzaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBhbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgalF1ZXJ5Ll9kYXRhKCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgJiYgdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0galF1ZXJ5Ll9kYXRhKCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIHN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWRcblx0XHRcdC8vIHRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2ggd2lsbCBkZXF1ZXVlXG5cdFx0XHQvLyBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZFxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGpRdWVyeS5fZGF0YSggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBlbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIGVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBsb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gbG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gdHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRpID0gMDtcblxuXHRmeE5vdyA9IGpRdWVyeS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIENoZWNrcyB0aGUgdGltZXIgaGFzIG5vdCBhbHJlYWR5IGJlZW4gcmVtb3ZlZFxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGlmICggdGltZXIoKSApIHtcblx0XHRqUXVlcnkuZnguc3RhcnQoKTtcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkudGltZXJzLnBvcCgpO1xuXHR9XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcblxualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggIXRpbWVySWQgKSB7XG5cdFx0dGltZXJJZCA9IHdpbmRvdy5zZXRJbnRlcnZhbCggalF1ZXJ5LmZ4LnRpY2ssIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHR9XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHR3aW5kb3cuY2xlYXJJbnRlcnZhbCggdGltZXJJZCApO1xuXHR0aW1lcklkID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBhLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdC8vIFNldHVwXG5cdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblx0ZGl2LnNldEF0dHJpYnV0ZSggXCJjbGFzc05hbWVcIiwgXCJ0XCIgKTtcblx0ZGl2LmlubmVySFRNTCA9IFwiICA8bGluay8+PHRhYmxlPjwvdGFibGU+PGEgaHJlZj0nL2EnPmE8L2E+PGlucHV0IHR5cGU9J2NoZWNrYm94Jy8+XCI7XG5cdGEgPSBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwiYVwiIClbIDAgXTtcblxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJjaGVja2JveFwiICk7XG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHRhID0gZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcImFcIiApWyAwIF07XG5cblx0Ly8gRmlyc3QgYmF0Y2ggb2YgdGVzdHMuXG5cdGEuc3R5bGUuY3NzVGV4dCA9IFwidG9wOjFweFwiO1xuXG5cdC8vIFRlc3Qgc2V0QXR0cmlidXRlIG9uIGNhbWVsQ2FzZSBjbGFzcy5cblx0Ly8gSWYgaXQgd29ya3MsIHdlIG5lZWQgYXR0ckZpeGVzIHdoZW4gZG9pbmcgZ2V0L3NldEF0dHJpYnV0ZSAoaWU2LzcpXG5cdHN1cHBvcnQuZ2V0U2V0QXR0cmlidXRlID0gZGl2LmNsYXNzTmFtZSAhPT0gXCJ0XCI7XG5cblx0Ly8gR2V0IHRoZSBzdHlsZSBpbmZvcm1hdGlvbiBmcm9tIGdldEF0dHJpYnV0ZVxuXHQvLyAoSUUgdXNlcyAuY3NzVGV4dCBpbnN0ZWFkKVxuXHRzdXBwb3J0LnN0eWxlID0gL3RvcC8udGVzdCggYS5nZXRBdHRyaWJ1dGUoIFwic3R5bGVcIiApICk7XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgVVJMcyBhcmVuJ3QgbWFuaXB1bGF0ZWRcblx0Ly8gKElFIG5vcm1hbGl6ZXMgaXQgYnkgZGVmYXVsdClcblx0c3VwcG9ydC5ocmVmTm9ybWFsaXplZCA9IGEuZ2V0QXR0cmlidXRlKCBcImhyZWZcIiApID09PSBcIi9hXCI7XG5cblx0Ly8gQ2hlY2sgdGhlIGRlZmF1bHQgY2hlY2tib3gvcmFkaW8gdmFsdWUgKFwiXCIgb24gV2ViS2l0OyBcIm9uXCIgZWxzZXdoZXJlKVxuXHRzdXBwb3J0LmNoZWNrT24gPSAhIWlucHV0LnZhbHVlO1xuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGEgc2VsZWN0ZWQtYnktZGVmYXVsdCBvcHRpb24gaGFzIGEgd29ya2luZyBzZWxlY3RlZCBwcm9wZXJ0eS5cblx0Ly8gKFdlYktpdCBkZWZhdWx0cyB0byBmYWxzZSBpbnN0ZWFkIG9mIHRydWUsIElFIHRvbywgaWYgaXQncyBpbiBhbiBvcHRncm91cClcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBUZXN0cyBmb3IgZW5jdHlwZSBzdXBwb3J0IG9uIGEgZm9ybSAoIzY3NDMpXG5cdHN1cHBvcnQuZW5jdHlwZSA9ICEhZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmb3JtXCIgKS5lbmN0eXBlO1xuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBvcHRpb25zIGluc2lkZSBkaXNhYmxlZCBzZWxlY3RzIGFyZW4ndCBtYXJrZWQgYXMgZGlzYWJsZWRcblx0Ly8gKFdlYktpdCBtYXJrcyB0aGVtIGFzIGRpc2FibGVkKVxuXHRzZWxlY3QuZGlzYWJsZWQgPSB0cnVlO1xuXHRzdXBwb3J0Lm9wdERpc2FibGVkID0gIW9wdC5kaXNhYmxlZDtcblxuXHQvLyBTdXBwb3J0OiBJRTggb25seVxuXHQvLyBDaGVjayBpZiB3ZSBjYW4gdHJ1c3QgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0c3VwcG9ydC5pbnB1dCA9IGlucHV0LmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG5cblx0Ly8gQ2hlY2sgaWYgYW4gaW5wdXQgbWFpbnRhaW5zIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgcnJldHVybiA9IC9cXHIvZyxcblx0cnNwYWNlcyA9IC9bXFx4MjBcXHRcXHJcXG5cXGZdKy9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCBpc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0cmV0dXJuIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgP1xuXG5cdFx0XHRcdFx0Ly8gaGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRcdHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICkgOlxuXG5cdFx0XHRcdFx0Ly8gaGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdFx0cmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblx0XHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFMTAtMTErXG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRqUXVlcnkudHJpbSggalF1ZXJ5LnRleHQoIGVsZW0gKSApLnJlcGxhY2UoIHJzcGFjZXMsIFwiIFwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIiB8fCBpbmRleCA8IDAsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoLFxuXHRcdFx0XHRcdGkgPSBpbmRleCA8IDAgP1xuXHRcdFx0XHRcdFx0bWF4IDpcblx0XHRcdFx0XHRcdG9uZSA/IGluZGV4IDogMDtcblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIG9sZElFIGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0KCBzdXBwb3J0Lm9wdERpc2FibGVkID9cblx0XHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkIDpcblx0XHRcdFx0XHRcdFx0XHRvcHRpb24uZ2V0QXR0cmlidXRlKCBcImRpc2FibGVkXCIgKSA9PT0gbnVsbCApICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IWpRdWVyeS5ub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU2XG5cdFx0XHRcdFx0XHQvLyBXaGVuIG5ldyBvcHRpb24gZWxlbWVudCBpcyBhZGRlZCB0byBzZWxlY3QgYm94IHdlIG5lZWQgdG9cblx0XHRcdFx0XHRcdC8vIGZvcmNlIHJlZmxvdyBvZiBuZXdseSBhZGRlZCBub2RlIGluIG9yZGVyIHRvIHdvcmthcm91bmQgZGVsYXlcblx0XHRcdFx0XHRcdC8vIG9mIGluaXRpYWxpemF0aW9uIHByb3BlcnRpZXNcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdG9wdGlvbi5zZWxlY3RlZCA9IG9wdGlvblNldCA9IHRydWU7XG5cblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBfICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFdpbGwgYmUgZXhlY3V0ZWQgb25seSBpbiBJRTZcblx0XHRcdFx0XHRcdFx0b3B0aW9uLnNjcm9sbEhlaWdodDtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRvcHRpb24uc2VsZWN0ZWQgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gb3B0aW9ucztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBub2RlSG9vaywgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlLFxuXHRydXNlRGVmYXVsdCA9IC9eKD86Y2hlY2tlZHxzZWxlY3RlZCkkL2ksXG5cdGdldFNldEF0dHJpYnV0ZSA9IHN1cHBvcnQuZ2V0U2V0QXR0cmlidXRlLFxuXHRnZXRTZXRJbnB1dCA9IHN1cHBvcnQuaW5wdXQ7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgYXR0cmlidXRlcyBhcmUgbG93ZXJjYXNlXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0bmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IG5vZGVIb29rICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0alF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdC8vIFNldHRpbmcgdGhlIHR5cGUgb24gYSByYWRpbyBidXR0b24gYWZ0ZXIgdGhlIHZhbHVlIHJlc2V0cyB0aGUgdmFsdWUgaW4gSUU4LTlcblx0XHRcdFx0XHQvLyBSZXNldCB2YWx1ZSB0byBkZWZhdWx0IGluIGNhc2UgdHlwZSBpcyBzZXQgYWZ0ZXIgdmFsdWUgZHVyaW5nIGNyZWF0aW9uXG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSwgcHJvcE5hbWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0cHJvcE5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cblx0XHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGdldCBzcGVjaWFsIHRyZWF0bWVudCAoIzEwODcwKVxuXHRcdFx0XHRpZiAoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHRcdFx0Ly8gU2V0IGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdG8gZmFsc2Vcblx0XHRcdFx0XHRpZiAoIGdldFNldElucHV0ICYmIGdldFNldEF0dHJpYnV0ZSB8fCAhcnVzZURlZmF1bHQudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgcHJvcE5hbWUgXSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdFx0XHRcdC8vIEFsc28gY2xlYXIgZGVmYXVsdENoZWNrZWQvZGVmYXVsdFNlbGVjdGVkIChpZiBhcHByb3ByaWF0ZSlcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZWxlbVsgalF1ZXJ5LmNhbWVsQ2FzZSggXCJkZWZhdWx0LVwiICsgbmFtZSApIF0gPVxuXHRcdFx0XHRcdFx0XHRlbGVtWyBwcm9wTmFtZSBdID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNlZSAjOTY5OSBmb3IgZXhwbGFuYXRpb24gb2YgdGhpcyBhcHByb2FjaCAoc2V0dGluZyBmaXJzdCwgdGhlbiByZW1vdmFsKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGpRdWVyeS5hdHRyKCBlbGVtLCBuYW1lLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggZ2V0U2V0QXR0cmlidXRlID8gbmFtZSA6IHByb3BOYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBnZXRTZXRJbnB1dCAmJiBnZXRTZXRBdHRyaWJ1dGUgfHwgIXJ1c2VEZWZhdWx0LnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gSUU8OCBuZWVkcyB0aGUgKnByb3BlcnR5KiBuYW1lXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggIWdldFNldEF0dHJpYnV0ZSAmJiBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUsIG5hbWUgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHRcdC8vIFVzZSBkZWZhdWx0Q2hlY2tlZCBhbmQgZGVmYXVsdFNlbGVjdGVkIGZvciBvbGRJRVxuXHRcdFx0ZWxlbVsgalF1ZXJ5LmNhbWVsQ2FzZSggXCJkZWZhdWx0LVwiICsgbmFtZSApIF0gPSBlbGVtWyBuYW1lIF0gPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0aWYgKCBnZXRTZXRJbnB1dCAmJiBnZXRTZXRBdHRyaWJ1dGUgfHwgIXJ1c2VEZWZhdWx0LnRlc3QoIG5hbWUgKSApIHtcblx0XHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0XHR2YXIgcmV0LCBoYW5kbGU7XG5cdFx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIG5hbWUgXTtcblx0XHRcdFx0YXR0ckhhbmRsZVsgbmFtZSBdID0gcmV0O1xuXHRcdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdFx0bmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHRudWxsO1xuXHRcdFx0XHRhdHRySGFuZGxlWyBuYW1lIF0gPSBoYW5kbGU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtWyBqUXVlcnkuY2FtZWxDYXNlKCBcImRlZmF1bHQtXCIgKyBuYW1lICkgXSA/XG5cdFx0XHRcdFx0bmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHRudWxsO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuLy8gZml4IG9sZElFIGF0dHJvcGVydGllc1xuaWYgKCAhZ2V0U2V0SW5wdXQgfHwgIWdldFNldEF0dHJpYnV0ZSApIHtcblx0alF1ZXJ5LmF0dHJIb29rcy52YWx1ZSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRcdGlmICggalF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHQvLyBEb2VzIG5vdCByZXR1cm4gc28gdGhhdCBzZXRBdHRyaWJ1dGUgaXMgYWxzbyB1c2VkXG5cdFx0XHRcdGVsZW0uZGVmYXVsdFZhbHVlID0gdmFsdWU7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIFVzZSBub2RlSG9vayBpZiBkZWZpbmVkICgjMTk1NCk7IG90aGVyd2lzZSBzZXRBdHRyaWJ1dGUgaXMgZmluZVxuXHRcdFx0XHRyZXR1cm4gbm9kZUhvb2sgJiYgbm9kZUhvb2suc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gSUU2LzcgZG8gbm90IHN1cHBvcnQgZ2V0dGluZy9zZXR0aW5nIHNvbWUgYXR0cmlidXRlcyB3aXRoIGdldC9zZXRBdHRyaWJ1dGVcbmlmICggIWdldFNldEF0dHJpYnV0ZSApIHtcblxuXHQvLyBVc2UgdGhpcyBmb3IgYW55IGF0dHJpYnV0ZSBpbiBJRTYvN1xuXHQvLyBUaGlzIGZpeGVzIGFsbW9zdCBldmVyeSBJRTYvNyBpc3N1ZVxuXHRub2RlSG9vayA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblxuXHRcdFx0Ly8gU2V0IHRoZSBleGlzdGluZyBvciBjcmVhdGUgYSBuZXcgYXR0cmlidXRlIG5vZGVcblx0XHRcdHZhciByZXQgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKTtcblx0XHRcdGlmICggIXJldCApIHtcblx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGVOb2RlKFxuXHRcdFx0XHRcdCggcmV0ID0gZWxlbS5vd25lckRvY3VtZW50LmNyZWF0ZUF0dHJpYnV0ZSggbmFtZSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0LnZhbHVlID0gdmFsdWUgKz0gXCJcIjtcblxuXHRcdFx0Ly8gQnJlYWsgYXNzb2NpYXRpb24gd2l0aCBjbG9uZWQgZWxlbWVudHMgYnkgYWxzbyB1c2luZyBzZXRBdHRyaWJ1dGUgKCM5NjQ2KVxuXHRcdFx0aWYgKCBuYW1lID09PSBcInZhbHVlXCIgfHwgdmFsdWUgPT09IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgKSB7XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0Ly8gU29tZSBhdHRyaWJ1dGVzIGFyZSBjb25zdHJ1Y3RlZCB3aXRoIGVtcHR5LXN0cmluZyB2YWx1ZXMgd2hlbiBub3QgZGVmaW5lZFxuXHRhdHRySGFuZGxlLmlkID0gYXR0ckhhbmRsZS5uYW1lID0gYXR0ckhhbmRsZS5jb29yZHMgPVxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRcdHZhciByZXQ7XG5cdFx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdFx0cmV0dXJuICggcmV0ID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiByZXQudmFsdWUgIT09IFwiXCIgP1xuXHRcdFx0XHRcdHJldC52YWx1ZSA6XG5cdFx0XHRcdFx0bnVsbDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdC8vIEZpeGluZyB2YWx1ZSByZXRyaWV2YWwgb24gYSBidXR0b24gcmVxdWlyZXMgdGhpcyBtb2R1bGVcblx0alF1ZXJ5LnZhbEhvb2tzLmJ1dHRvbiA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdFx0dmFyIHJldCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApO1xuXHRcdFx0aWYgKCByZXQgJiYgcmV0LnNwZWNpZmllZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldC52YWx1ZTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNldDogbm9kZUhvb2suc2V0XG5cdH07XG5cblx0Ly8gU2V0IGNvbnRlbnRlZGl0YWJsZSB0byBmYWxzZSBvbiByZW1vdmFscygjMTA0MjkpXG5cdC8vIFNldHRpbmcgdG8gZW1wdHkgc3RyaW5nIHRocm93cyBhbiBlcnJvciBhcyBhbiBpbnZhbGlkIHZhbHVlXG5cdGpRdWVyeS5hdHRySG9va3MuY29udGVudGVkaXRhYmxlID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdFx0bm9kZUhvb2suc2V0KCBlbGVtLCB2YWx1ZSA9PT0gXCJcIiA/IGZhbHNlIDogdmFsdWUsIG5hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0Ly8gU2V0IHdpZHRoIGFuZCBoZWlnaHQgdG8gYXV0byBpbnN0ZWFkIG9mIDAgb24gZW1wdHkgc3RyaW5nKCBCdWcgIzgxNTAgKVxuXHQvLyBUaGlzIGlzIGZvciByZW1vdmFsc1xuXHRqUXVlcnkuZWFjaCggWyBcIndpZHRoXCIsIFwiaGVpZ2h0XCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdFx0alF1ZXJ5LmF0dHJIb29rc1sgbmFtZSBdID0ge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwiXCIgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIFwiYXV0b1wiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxuXG5pZiAoICFzdXBwb3J0LnN0eWxlICkge1xuXHRqUXVlcnkuYXR0ckhvb2tzLnN0eWxlID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIFJldHVybiB1bmRlZmluZWQgaW4gdGhlIGNhc2Ugb2YgZW1wdHkgc3RyaW5nXG5cdFx0XHQvLyBOb3RlOiBJRSB1cHBlcmNhc2VzIGNzcyBwcm9wZXJ0eSBuYW1lcywgYnV0IGlmIHdlIHdlcmUgdG8gLnRvTG93ZXJDYXNlKClcblx0XHRcdC8vIC5jc3NUZXh0LCB0aGF0IHdvdWxkIGRlc3Ryb3kgY2FzZSBzZW5zaXRpdml0eSBpbiBVUkwncywgbGlrZSBpbiBcImJhY2tncm91bmRcIlxuXHRcdFx0cmV0dXJuIGVsZW0uc3R5bGUuY3NzVGV4dCB8fCB1bmRlZmluZWQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0uc3R5bGUuY3NzVGV4dCA9IHZhbHVlICsgXCJcIiApO1xuXHRcdH1cblx0fTtcbn1cblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b258b2JqZWN0KSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIHRyeS9jYXRjaCBoYW5kbGVzIGNhc2VzIHdoZXJlIElFIGJhbGtzIChzdWNoIGFzIHJlbW92aW5nIGEgcHJvcGVydHkgb24gd2luZG93KVxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dGhpc1sgbmFtZSBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRkZWxldGUgdGhpc1sgbmFtZSBdO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0cmV0dXJuIHRhYmluZGV4ID9cblx0XHRcdFx0XHRwYXJzZUludCggdGFiaW5kZXgsIDEwICkgOlxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJiBlbGVtLmhyZWYgP1xuXHRcdFx0XHRcdFx0XHQwIDpcblx0XHRcdFx0XHRcdFx0LTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTb21lIGF0dHJpYnV0ZXMgcmVxdWlyZSBhIHNwZWNpYWwgY2FsbCBvbiBJRVxuLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhc3VwcG9ydC5ocmVmTm9ybWFsaXplZCApIHtcblxuXHQvLyBocmVmL3NyYyBwcm9wZXJ0eSBzaG91bGQgZ2V0IHRoZSBmdWxsIG5vcm1hbGl6ZWQgVVJMICgjMTAyOTkvIzEyOTE1KVxuXHRqUXVlcnkuZWFjaCggWyBcImhyZWZcIiwgXCJzcmNcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0XHRqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF0gPSB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIDQgKTtcblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSwgSUU5K1xuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IGl0IGFsc28gd29ya3Mgd2l0aCBvcHRncm91cHMsIHNlZSAjNTcwMVxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuLy8gSUU2LzcgY2FsbCBlbmN0eXBlIGVuY29kaW5nXG5pZiAoICFzdXBwb3J0LmVuY3R5cGUgKSB7XG5cdGpRdWVyeS5wcm9wRml4LmVuY3R5cGUgPSBcImVuY29kaW5nXCI7XG59XG5cblxuXG5cbnZhciByY2xhc3MgPSAvW1xcdFxcclxcblxcZl0vZztcblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuYXR0ciggZWxlbSwgXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgKSB7XG5cdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdCggXCIgXCIgKyBjdXJWYWx1ZSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIG9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IGpRdWVyeS50cmltKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmF0dHIoIGVsZW0sIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgKSB7XG5cdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0KCBcIiBcIiArIGN1clZhbHVlICsgXCIgXCIgKS5yZXBsYWNlKCByY2xhc3MsIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBqUXVlcnkudHJpbSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5hdHRyKCBlbGVtLCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIHN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRqUXVlcnkuX2RhdGEoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIFwiZmFsc2VcIixcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRqUXVlcnkuYXR0ciggdGhpcywgXCJjbGFzc1wiLFxuXHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdGpRdWVyeS5fZGF0YSggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgZ2V0Q2xhc3MoIGVsZW0gKSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTFcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IGxvYWQgcmVzaXplIHNjcm9sbCB1bmxvYWQgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGVycm9yIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cblxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSBqUXVlcnkubm93KCk7XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG52YXIgcnZhbGlkdG9rZW5zID0gLygsKXwoXFxbfHspfCh9fF0pfFwiKD86W15cIlxcXFxcXHJcXG5dfFxcXFxbXCJcXFxcXFwvYmZucnRdfFxcXFx1W1xcZGEtZkEtRl17NH0pKlwiXFxzKjo/fHRydWV8ZmFsc2V8bnVsbHwtPyg/ITBcXGQpXFxkKyg/OlxcLlxcZCt8KSg/OltlRV1bKy1dP1xcZCt8KS9nO1xuXG5qUXVlcnkucGFyc2VKU09OID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0Ly8gQXR0ZW1wdCB0byBwYXJzZSB1c2luZyB0aGUgbmF0aXZlIEpTT04gcGFyc2VyIGZpcnN0XG5cdGlmICggd2luZG93LkpTT04gJiYgd2luZG93LkpTT04ucGFyc2UgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xuXHRcdC8vIFdvcmthcm91bmQgZmFpbHVyZSB0byBzdHJpbmctY2FzdCBudWxsIGlucHV0XG5cdFx0cmV0dXJuIHdpbmRvdy5KU09OLnBhcnNlKCBkYXRhICsgXCJcIiApO1xuXHR9XG5cblx0dmFyIHJlcXVpcmVOb25Db21tYSxcblx0XHRkZXB0aCA9IG51bGwsXG5cdFx0c3RyID0galF1ZXJ5LnRyaW0oIGRhdGEgKyBcIlwiICk7XG5cblx0Ly8gR3VhcmQgYWdhaW5zdCBpbnZhbGlkIChhbmQgcG9zc2libHkgZGFuZ2Vyb3VzKSBpbnB1dCBieSBlbnN1cmluZyB0aGF0IG5vdGhpbmcgcmVtYWluc1xuXHQvLyBhZnRlciByZW1vdmluZyB2YWxpZCB0b2tlbnNcblx0cmV0dXJuIHN0ciAmJiAhalF1ZXJ5LnRyaW0oIHN0ci5yZXBsYWNlKCBydmFsaWR0b2tlbnMsIGZ1bmN0aW9uKCB0b2tlbiwgY29tbWEsIG9wZW4sIGNsb3NlICkge1xuXG5cdFx0Ly8gRm9yY2UgdGVybWluYXRpb24gaWYgd2Ugc2VlIGEgbWlzcGxhY2VkIGNvbW1hXG5cdFx0aWYgKCByZXF1aXJlTm9uQ29tbWEgJiYgY29tbWEgKSB7XG5cdFx0XHRkZXB0aCA9IDA7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyZm9ybSBubyBtb3JlIHJlcGxhY2VtZW50cyBhZnRlciByZXR1cm5pbmcgdG8gb3V0ZXJtb3N0IGRlcHRoXG5cdFx0aWYgKCBkZXB0aCA9PT0gMCApIHtcblx0XHRcdHJldHVybiB0b2tlbjtcblx0XHR9XG5cblx0XHQvLyBDb21tYXMgbXVzdCBub3QgZm9sbG93IFwiW1wiLCBcIntcIiwgb3IgXCIsXCJcblx0XHRyZXF1aXJlTm9uQ29tbWEgPSBvcGVuIHx8IGNvbW1hO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIG5ldyBkZXB0aFxuXHRcdC8vIGFycmF5L29iamVjdCBvcGVuIChcIltcIiBvciBcIntcIik6IGRlcHRoICs9IHRydWUgLSBmYWxzZSAoaW5jcmVtZW50KVxuXHRcdC8vIGFycmF5L29iamVjdCBjbG9zZSAoXCJdXCIgb3IgXCJ9XCIpOiBkZXB0aCArPSBmYWxzZSAtIHRydWUgKGRlY3JlbWVudClcblx0XHQvLyBvdGhlciBjYXNlcyAoXCIsXCIgb3IgcHJpbWl0aXZlKTogZGVwdGggKz0gdHJ1ZSAtIHRydWUgKG51bWVyaWMgY2FzdClcblx0XHRkZXB0aCArPSAhY2xvc2UgLSAhb3BlbjtcblxuXHRcdC8vIFJlbW92ZSB0aGlzIHRva2VuXG5cdFx0cmV0dXJuIFwiXCI7XG5cdH0gKSApID9cblx0XHQoIEZ1bmN0aW9uKCBcInJldHVybiBcIiArIHN0ciApICkoKSA6XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgSlNPTjogXCIgKyBkYXRhICk7XG59O1xuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sLCB0bXA7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblx0dHJ5IHtcblx0XHRpZiAoIHdpbmRvdy5ET01QYXJzZXIgKSB7IC8vIFN0YW5kYXJkXG5cdFx0XHR0bXAgPSBuZXcgd2luZG93LkRPTVBhcnNlcigpO1xuXHRcdFx0eG1sID0gdG1wLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdFx0fSBlbHNlIHsgLy8gSUVcblx0XHRcdHhtbCA9IG5ldyB3aW5kb3cuQWN0aXZlWE9iamVjdCggXCJNaWNyb3NvZnQuWE1MRE9NXCIgKTtcblx0XHRcdHhtbC5hc3luYyA9IFwiZmFsc2VcIjtcblx0XHRcdHhtbC5sb2FkWE1MKCBkYXRhICk7XG5cdFx0fVxuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblx0aWYgKCAheG1sIHx8ICF4bWwuZG9jdW1lbnRFbGVtZW50IHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRydHMgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cblx0Ly8gSUUgbGVhdmVzIGFuIFxcciBjaGFyYWN0ZXIgYXQgRU9MXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopXFxyPyQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cdHJ1cmwgPSAvXihbXFx3ListXSs6KSg/OlxcL1xcLyg/OlteXFwvPyNdKkB8KShbXlxcLz8jOl0qKSg/OjooXFxkKyl8KXwpLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIERvY3VtZW50IGxvY2F0aW9uXG5cdGFqYXhMb2NhdGlvbiA9IGxvY2F0aW9uLmhyZWYsXG5cblx0Ly8gU2VnbWVudCBsb2NhdGlvbiBpbnRvIHBhcnRzXG5cdGFqYXhMb2NQYXJ0cyA9IHJ1cmwuZXhlYyggYWpheExvY2F0aW9uLnRvTG93ZXJDYXNlKCkgKSB8fCBbXTtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGUuY2hhckF0KCAwICkgPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIgZGVlcCwga2V5LFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXHR2YXIgZmlyc3REYXRhVHlwZSwgY3QsIGZpbmFsRGF0YVR5cGUsIHR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgc1sgXCJ0aHJvd3NcIiBdICkgeyAvLyBqc2NzOmlnbm9yZSByZXF1aXJlRG90Tm90YXRpb25cblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBhamF4TG9jYXRpb24sXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBhamF4TG9jUGFydHNbIDEgXSApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogalF1ZXJ5LnBhcnNlSlNPTixcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXJcblxuXHRcdFx0Ly8gQ3Jvc3MtZG9tYWluIGRldGVjdGlvbiB2YXJzXG5cdFx0XHRwYXJ0cyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnMgYXMgc3RyaW5nXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBUaGUganFYSFIgc3RhdGVcblx0XHRcdHN0YXRlID0gMCxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpIF0gPSBtYXRjaFsgMiBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2g7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZSA9PT0gMiA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdHZhciBsbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRpZiAoICFzdGF0ZSApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBsbmFtZSBdID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoICFzdGF0ZSApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBzdGF0ZSA8IDIgKSB7XG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFjayBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICkuY29tcGxldGUgPSBjb21wbGV0ZURlZmVycmVkLmFkZDtcblx0XHRqcVhIUi5zdWNjZXNzID0ganFYSFIuZG9uZTtcblx0XHRqcVhIUi5lcnJvciA9IGpxWEhSLmZhaWw7XG5cblx0XHQvLyBSZW1vdmUgaGFzaCBjaGFyYWN0ZXIgKCM3NTMxOiBhbmQgc3RyaW5nIHByb21vdGlvbilcblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkICgjNTg2NjogSUU3IGlzc3VlIHdpdGggcHJvdG9jb2wtbGVzcyB1cmxzKVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGFqYXhMb2NhdGlvbiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcmhhc2gsIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgYWpheExvY1BhcnRzWyAxIF0gKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSBqUXVlcnkudHJpbSggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHdlIGhhdmUgYSBwcm90b2NvbDpob3N0OnBvcnQgbWlzbWF0Y2hcblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHBhcnRzID0gcnVybC5leGVjKCBzLnVybC50b0xvd2VyQ2FzZSgpICk7XG5cdFx0XHRzLmNyb3NzRG9tYWluID0gISEoIHBhcnRzICYmXG5cdFx0XHRcdCggcGFydHNbIDEgXSAhPT0gYWpheExvY1BhcnRzWyAxIF0gfHwgcGFydHNbIDIgXSAhPT0gYWpheExvY1BhcnRzWyAyIF0gfHxcblx0XHRcdFx0XHQoIHBhcnRzWyAzIF0gfHwgKCBwYXJ0c1sgMSBdID09PSBcImh0dHA6XCIgPyBcIjgwXCIgOiBcIjQ0M1wiICkgKSAhPT1cblx0XHRcdFx0XHRcdCggYWpheExvY1BhcnRzWyAzIF0gfHwgKCBhamF4TG9jUGFydHNbIDEgXSA9PT0gXCJodHRwOlwiID8gXCI4MFwiIDogXCI0NDNcIiApICkgKVxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdGNhY2hlVVJMID0gcy51cmw7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gKCBzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhICk7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgYW50aS1jYWNoZSBpbiB1cmwgaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRzLnVybCA9IHJ0cy50ZXN0KCBjYWNoZVVSTCApID9cblxuXHRcdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFscmVhZHkgYSAnXycgcGFyYW1ldGVyLCBzZXQgaXRzIHZhbHVlXG5cdFx0XHRcdFx0Y2FjaGVVUkwucmVwbGFjZSggcnRzLCBcIiQxXz1cIiArIG5vbmNlKysgKSA6XG5cblx0XHRcdFx0XHQvLyBPdGhlcndpc2UgYWRkIG9uZSB0byB0aGUgZW5kXG5cdFx0XHRcdFx0Y2FjaGVVUkwgKyAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgbm9uY2UrKztcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgc3RhdGUgPT09IDIgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBhYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGZvciAoIGkgaW4geyBzdWNjZXNzOiAxLCBlcnJvcjogMSwgY29tcGxldGU6IDEgfSApIHtcblx0XHRcdGpxWEhSWyBpIF0oIHNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIHN0YXRlID09PSAyICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRzdGF0ZSA9IDE7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIGV4Y2VwdGlvbiBhcyBlcnJvciBpZiBub3QgZG9uZVxuXHRcdFx0XHRpZiAoIHN0YXRlIDwgMiApIHtcblx0XHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXG5cdFx0XHRcdC8vIFNpbXBseSByZXRocm93IG90aGVyd2lzZVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBDYWxsZWQgb25jZVxuXHRcdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0ZSBpcyBcImRvbmVcIiBub3dcblx0XHRcdHN0YXRlID0gMjtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gV2UgZXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHRcblx0XHRcdFx0Ly8gdGhlbiBub3JtYWxpemUgc3RhdHVzVGV4dCBhbmQgc3RhdHVzIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIHNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblx0XHRcInRocm93c1wiOiB0cnVlXG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHZhciB3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RDaGlsZCAmJiBlbGVtLmZpcnN0Q2hpbGQubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGlzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wYXJlbnQoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIWpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJib2R5XCIgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdFx0fVxuXHRcdH0gKS5lbmQoKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIGdldERpc3BsYXkoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLnN0eWxlICYmIGVsZW0uc3R5bGUuZGlzcGxheSB8fCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXJIaWRkZW4oIGVsZW0gKSB7XG5cblx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGFyZSBjb25zaWRlcmVkIGhpZGRlblxuXHRpZiAoICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCwgZWxlbSApICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdHdoaWxlICggZWxlbSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdGlmICggZ2V0RGlzcGxheSggZWxlbSApID09PSBcIm5vbmVcIiB8fCBlbGVtLnR5cGUgPT09IFwiaGlkZGVuXCIgKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0ZWxlbSA9IGVsZW0ucGFyZW50Tm9kZTtcblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59XG5cbmpRdWVyeS5leHByLmZpbHRlcnMuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0Ly8gU3VwcG9ydDogT3BlcmEgPD0gMTIuMTJcblx0Ly8gT3BlcmEgcmVwb3J0cyBvZmZzZXRXaWR0aHMgYW5kIG9mZnNldEhlaWdodHMgbGVzcyB0aGFuIHplcm8gb24gc29tZSBlbGVtZW50c1xuXHRyZXR1cm4gc3VwcG9ydC5yZWxpYWJsZUhpZGRlbk9mZnNldHMoKSA/XG5cdFx0KCBlbGVtLm9mZnNldFdpZHRoIDw9IDAgJiYgZWxlbS5vZmZzZXRIZWlnaHQgPD0gMCAmJlxuXHRcdFx0IWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSA6XG5cdFx0XHRmaWx0ZXJIaWRkZW4oIGVsZW0gKTtcbn07XG5cbmpRdWVyeS5leHByLmZpbHRlcnMudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLmZpbHRlcnMuaGlkZGVuKCBlbGVtICk7XG59O1xuXG5cblxuXG52YXIgcjIwID0gLyUyMC9nLFxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIGpRdWVyeS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCByZXR1cm4gaXRzIHZhbHVlXG5cdFx0XHR2YWx1ZSA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApID8gdmFsdWUoKSA6ICggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgKTtcblx0XHR9O1xuXG5cdC8vIFNldCB0cmFkaXRpb25hbCB0byB0cnVlIGZvciBqUXVlcnkgPD0gMS4zLjIgYmVoYXZpb3IuXG5cdGlmICggdHJhZGl0aW9uYWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHR0cmFkaXRpb25hbCA9IGpRdWVyeS5hamF4U2V0dGluZ3MgJiYgalF1ZXJ5LmFqYXhTZXR0aW5ncy50cmFkaXRpb25hbDtcblx0fVxuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggalF1ZXJ5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoXCI6ZGlzYWJsZWRcIikgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdHJldHVybiB2YWwgPT0gbnVsbCA/XG5cdFx0XHRcdG51bGwgOlxuXHRcdFx0XHRqUXVlcnkuaXNBcnJheSggdmFsICkgP1xuXHRcdFx0XHRcdGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHR7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxuLy8gQ3JlYXRlIHRoZSByZXF1ZXN0IG9iamVjdFxuLy8gKFRoaXMgaXMgc3RpbGwgYXR0YWNoZWQgdG8gYWpheFNldHRpbmdzIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5KVxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSB3aW5kb3cuQWN0aXZlWE9iamVjdCAhPT0gdW5kZWZpbmVkID9cblxuXHQvLyBTdXBwb3J0OiBJRTYtSUU4XG5cdGZ1bmN0aW9uKCkge1xuXG5cdFx0Ly8gWEhSIGNhbm5vdCBhY2Nlc3MgbG9jYWwgZmlsZXMsIGFsd2F5cyB1c2UgQWN0aXZlWCBmb3IgdGhhdCBjYXNlXG5cdFx0aWYgKCB0aGlzLmlzTG9jYWwgKSB7XG5cdFx0XHRyZXR1cm4gY3JlYXRlQWN0aXZlWEhSKCk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOS0xMVxuXHRcdC8vIElFIHNlZW1zIHRvIGVycm9yIG9uIGNyb3NzLWRvbWFpbiBQQVRDSCByZXF1ZXN0cyB3aGVuIEFjdGl2ZVggWEhSXG5cdFx0Ly8gaXMgdXNlZC4gSW4gSUUgOSsgYWx3YXlzIHVzZSB0aGUgbmF0aXZlIFhIUi5cblx0XHQvLyBOb3RlOiB0aGlzIGNvbmRpdGlvbiB3b24ndCBjYXRjaCBFZGdlIGFzIGl0IGRvZXNuJ3QgZGVmaW5lXG5cdFx0Ly8gZG9jdW1lbnQuZG9jdW1lbnRNb2RlIGJ1dCBpdCBhbHNvIGRvZXNuJ3Qgc3VwcG9ydCBBY3RpdmVYIHNvIGl0IHdvbid0XG5cdFx0Ly8gcmVhY2ggdGhpcyBjb2RlLlxuXHRcdGlmICggZG9jdW1lbnQuZG9jdW1lbnRNb2RlID4gOCApIHtcblx0XHRcdHJldHVybiBjcmVhdGVTdGFuZGFyZFhIUigpO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBvbGRJRSBYSFIgZG9lcyBub3Qgc3VwcG9ydCBub24tUkZDMjYxNiBtZXRob2RzICgjMTMyNDApXG5cdFx0Ly8gU2VlIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9tczUzNjY0OCh2PXZzLjg1KS5hc3B4XG5cdFx0Ly8gYW5kIGh0dHA6Ly93d3cudzMub3JnL1Byb3RvY29scy9yZmMyNjE2L3JmYzI2MTYtc2VjOS5odG1sI3NlYzlcblx0XHQvLyBBbHRob3VnaCB0aGlzIGNoZWNrIGZvciBzaXggbWV0aG9kcyBpbnN0ZWFkIG9mIGVpZ2h0XG5cdFx0Ly8gc2luY2UgSUUgYWxzbyBkb2VzIG5vdCBzdXBwb3J0IFwidHJhY2VcIiBhbmQgXCJjb25uZWN0XCJcblx0XHRyZXR1cm4gL14oZ2V0fHBvc3R8aGVhZHxwdXR8ZGVsZXRlfG9wdGlvbnMpJC9pLnRlc3QoIHRoaXMudHlwZSApICYmXG5cdFx0XHRjcmVhdGVTdGFuZGFyZFhIUigpIHx8IGNyZWF0ZUFjdGl2ZVhIUigpO1xuXHR9IDpcblxuXHQvLyBGb3IgYWxsIG90aGVyIGJyb3dzZXJzLCB1c2UgdGhlIHN0YW5kYXJkIFhNTEh0dHBSZXF1ZXN0IG9iamVjdFxuXHRjcmVhdGVTdGFuZGFyZFhIUjtcblxudmFyIHhocklkID0gMCxcblx0eGhyQ2FsbGJhY2tzID0ge30sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbi8vIFN1cHBvcnQ6IElFPDEwXG4vLyBPcGVuIHJlcXVlc3RzIG11c3QgYmUgbWFudWFsbHkgYWJvcnRlZCBvbiB1bmxvYWQgKCM1MjgwKVxuLy8gU2VlIGh0dHBzOi8vc3VwcG9ydC5taWNyb3NvZnQuY29tL2tiLzI4NTY3NDYgZm9yIG1vcmUgaW5mb1xuaWYgKCB3aW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdHdpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCBmdW5jdGlvbigpIHtcblx0XHRmb3IgKCB2YXIga2V5IGluIHhockNhbGxiYWNrcyApIHtcblx0XHRcdHhockNhbGxiYWNrc1sga2V5IF0oIHVuZGVmaW5lZCwgdHJ1ZSApO1xuXHRcdH1cblx0fSApO1xufVxuXG4vLyBEZXRlcm1pbmUgc3VwcG9ydCBwcm9wZXJ0aWVzXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG54aHJTdXBwb3J0ZWQgPSBzdXBwb3J0LmFqYXggPSAhIXhoclN1cHBvcnRlZDtcblxuLy8gQ3JlYXRlIHRyYW5zcG9ydCBpZiB0aGUgYnJvd3NlciBjYW4gcHJvdmlkZSBhbiB4aHJcbmlmICggeGhyU3VwcG9ydGVkICkge1xuXG5cdGpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluIHx8IHN1cHBvcnQuY29ycyApIHtcblxuXHRcdFx0dmFyIGNhbGxiYWNrO1xuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpLFxuXHRcdFx0XHRcdFx0aWQgPSArK3hocklkO1xuXG5cdFx0XHRcdFx0Ly8gT3BlbiB0aGUgc29ja2V0XG5cdFx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0XHRcdFx0XHQvLyBJRSdzIEFjdGl2ZVhPYmplY3QgdGhyb3dzIGEgJ1R5cGUgTWlzbWF0Y2gnIGV4Y2VwdGlvbiB3aGVuIHNldHRpbmdcblx0XHRcdFx0XHRcdC8vIHJlcXVlc3QgaGVhZGVyIHRvIGEgbnVsbC12YWx1ZS5cblx0XHRcdFx0XHRcdC8vXG5cdFx0XHRcdFx0XHQvLyBUbyBrZWVwIGNvbnNpc3RlbnQgd2l0aCBvdGhlciBYSFIgaW1wbGVtZW50YXRpb25zLCBjYXN0IHRoZSB2YWx1ZVxuXHRcdFx0XHRcdFx0Ly8gdG8gc3RyaW5nIGFuZCBpZ25vcmUgYHVuZGVmaW5lZGAuXG5cdFx0XHRcdFx0XHRpZiAoIGhlYWRlcnNbIGkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICsgXCJcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3Rcblx0XHRcdFx0XHQvLyBUaGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24gd2hpY2ggaXMgYWN0dWFsbHlcblx0XHRcdFx0XHQvLyBoYW5kbGVkIGluIGpRdWVyeS5hamF4IChzbyBubyB0cnkvY2F0Y2ggaGVyZSlcblx0XHRcdFx0XHR4aHIuc2VuZCggKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhICkgfHwgbnVsbCApO1xuXG5cdFx0XHRcdFx0Ly8gTGlzdGVuZXJcblx0XHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCBfLCBpc0Fib3J0ICkge1xuXHRcdFx0XHRcdFx0dmFyIHN0YXR1cywgc3RhdHVzVGV4dCwgcmVzcG9uc2VzO1xuXG5cdFx0XHRcdFx0XHQvLyBXYXMgbmV2ZXIgY2FsbGVkIGFuZCBpcyBhYm9ydGVkIG9yIGNvbXBsZXRlXG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICYmICggaXNBYm9ydCB8fCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIENsZWFuIHVwXG5cdFx0XHRcdFx0XHRcdGRlbGV0ZSB4aHJDYWxsYmFja3NbIGlkIF07XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0galF1ZXJ5Lm5vb3A7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWJvcnQgbWFudWFsbHkgaWYgbmVlZGVkXG5cdFx0XHRcdFx0XHRcdGlmICggaXNBYm9ydCApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlICE9PSA0ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlcyA9IHt9O1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1cyA9IHhoci5zdGF0dXM7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTwxMFxuXHRcdFx0XHRcdFx0XHRcdC8vIEFjY2Vzc2luZyBiaW5hcnktZGF0YSByZXNwb25zZVRleHQgdGhyb3dzIGFuIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vICgjMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlcy50ZXh0ID0geGhyLnJlc3BvbnNlVGV4dDtcblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGaXJlZm94IHRocm93cyBhbiBleGNlcHRpb24gd2hlbiBhY2Nlc3Npbmdcblx0XHRcdFx0XHRcdFx0XHQvLyBzdGF0dXNUZXh0IGZvciBmYXVsdHkgY3Jvc3MtZG9tYWluIHJlcXVlc3RzXG5cdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdHN0YXR1c1RleHQgPSB4aHIuc3RhdHVzVGV4dDtcblx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gV2Ugbm9ybWFsaXplIHdpdGggV2Via2l0IGdpdmluZyBhbiBlbXB0eSBzdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJcIjtcblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGaWx0ZXIgc3RhdHVzIGZvciBub24gc3RhbmRhcmQgYmVoYXZpb3JzXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJZiB0aGUgcmVxdWVzdCBpcyBsb2NhbCBhbmQgd2UgaGF2ZSBkYXRhOiBhc3N1bWUgYSBzdWNjZXNzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gKHN1Y2Nlc3Mgd2l0aCBubyBkYXRhIHdvbid0IGdldCBub3RpZmllZCwgdGhhdCdzIHRoZSBiZXN0IHdlXG5cdFx0XHRcdFx0XHRcdFx0Ly8gY2FuIGRvIGdpdmVuIGN1cnJlbnQgaW1wbGVtZW50YXRpb25zKVxuXHRcdFx0XHRcdFx0XHRcdGlmICggIXN0YXR1cyAmJiBvcHRpb25zLmlzTG9jYWwgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzdGF0dXMgPSByZXNwb25zZXMudGV4dCA/IDIwMCA6IDQwNDtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIElFIC0gIzE0NTA6IHNvbWV0aW1lcyByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAxMjIzICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdHVzID0gMjA0O1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBDYWxsIGNvbXBsZXRlIGlmIG5lZWRlZFxuXHRcdFx0XHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBzdGF0dXMsIHN0YXR1c1RleHQsIHJlc3BvbnNlcywgeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3Rcblx0XHRcdFx0XHQvLyBgeGhyLnNlbmRgIG1heSByYWlzZSBhbiBleGNlcHRpb24sIGJ1dCBpdCB3aWxsIGJlXG5cdFx0XHRcdFx0Ly8gaGFuZGxlZCBpbiBqUXVlcnkuYWpheCAoc28gbm8gdHJ5L2NhdGNoIGhlcmUpXG5cdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy5hc3luYyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgd2UncmUgaW4gc3luYyBtb2RlIHdlIGZpcmUgdGhlIGNhbGxiYWNrXG5cdFx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyAoSUU2ICYgSUU3KSBpZiBpdCdzIGluIGNhY2hlIGFuZCBoYXMgYmVlblxuXHRcdFx0XHRcdFx0Ly8gcmV0cmlldmVkIGRpcmVjdGx5IHdlIG5lZWQgdG8gZmlyZSB0aGUgY2FsbGJhY2tcblx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBjYWxsYmFjayApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlZ2lzdGVyIHRoZSBjYWxsYmFjaywgYnV0IGRlbGF5IGl0IGluIGNhc2UgYHhoci5zZW5kYCB0aHJvd3Ncblx0XHRcdFx0XHRcdC8vIEFkZCB0byB0aGUgbGlzdCBvZiBhY3RpdmUgeGhyIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IHhockNhbGxiYWNrc1sgaWQgXSA9IGNhbGxiYWNrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdGNhbGxiYWNrKCB1bmRlZmluZWQsIHRydWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIEZ1bmN0aW9ucyB0byBjcmVhdGUgeGhyc1xuZnVuY3Rpb24gY3JlYXRlU3RhbmRhcmRYSFIoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVBY3RpdmVYSFIoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuQWN0aXZlWE9iamVjdCggXCJNaWNyb3NvZnQuWE1MSFRUUFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn1cblxuXG5cblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBnbG9iYWxcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHRcdHMuZ2xvYmFsID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cblx0XHR2YXIgc2NyaXB0LFxuXHRcdFx0aGVhZCA9IGRvY3VtZW50LmhlYWQgfHwgalF1ZXJ5KCBcImhlYWRcIiApWyAwIF0gfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0cmV0dXJuIHtcblxuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNhbGxiYWNrICkge1xuXG5cdFx0XHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdFx0XHRzY3JpcHQuYXN5bmMgPSB0cnVlO1xuXG5cdFx0XHRcdGlmICggcy5zY3JpcHRDaGFyc2V0ICkge1xuXHRcdFx0XHRcdHNjcmlwdC5jaGFyc2V0ID0gcy5zY3JpcHRDaGFyc2V0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0c2NyaXB0LnNyYyA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIEF0dGFjaCBoYW5kbGVycyBmb3IgYWxsIGJyb3dzZXJzXG5cdFx0XHRcdHNjcmlwdC5vbmxvYWQgPSBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oIF8sIGlzQWJvcnQgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGlzQWJvcnQgfHwgIXNjcmlwdC5yZWFkeVN0YXRlIHx8IC9sb2FkZWR8Y29tcGxldGUvLnRlc3QoIHNjcmlwdC5yZWFkeVN0YXRlICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBtZW1vcnkgbGVhayBpbiBJRVxuXHRcdFx0XHRcdFx0c2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgdGhlIHNjcmlwdFxuXHRcdFx0XHRcdFx0aWYgKCBzY3JpcHQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdFx0c2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBEZXJlZmVyZW5jZSB0aGUgc2NyaXB0XG5cdFx0XHRcdFx0XHRzY3JpcHQgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHQvLyBDYWxsYmFjayBpZiBub3QgYWJvcnRcblx0XHRcdFx0XHRcdGlmICggIWlzQWJvcnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrKCAyMDAsIFwic3VjY2Vzc1wiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIENpcmN1bXZlbnQgSUU2IGJ1Z3Mgd2l0aCBiYXNlIGVsZW1lbnRzICgjMjcwOSBhbmQgIzQzNzgpIGJ5IHByZXBlbmRpbmdcblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGhlYWQuaW5zZXJ0QmVmb3JlKCBzY3JpcHQsIGhlYWQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHNjcmlwdCApIHtcblx0XHRcdFx0XHRzY3JpcHQub25sb2FkKCB1bmRlZmluZWQsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBqUXVlcnkuaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIGZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gbWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBzYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIGRhdGE6IHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdHZhciBwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKSxcblx0XHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vLyBLZWVwIGEgY29weSBvZiB0aGUgb2xkIGxvYWQgbWV0aG9kXG52YXIgX2xvYWQgPSBqUXVlcnkuZm4ubG9hZDtcblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0aWYgKCB0eXBlb2YgdXJsICE9PSBcInN0cmluZ1wiICYmIF9sb2FkICkge1xuXHRcdHJldHVybiBfbG9hZC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdH1cblxuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBqUXVlcnkudHJpbSggdXJsLnNsaWNlKCBvZmYsIHVybC5sZW5ndGggKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxuLy8gQXR0YWNoIGEgYnVuY2ggb2YgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBjb21tb24gQUpBWCBldmVudHNcbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmV4cHIuZmlsdGVycy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cblxuLyoqXG4gKiBHZXRzIGEgd2luZG93IGZyb20gYW4gZWxlbWVudFxuICovXG5mdW5jdGlvbiBnZXRXaW5kb3coIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSA/XG5cdFx0ZWxlbSA6XG5cdFx0ZWxlbS5ub2RlVHlwZSA9PT0gOSA/XG5cdFx0XHRlbGVtLmRlZmF1bHRWaWV3IHx8IGVsZW0ucGFyZW50V2luZG93IDpcblx0XHRcdGZhbHNlO1xufVxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIHNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdGpRdWVyeS5pbkFycmF5KCBcImF1dG9cIiwgWyBjdXJDU1NUb3AsIGN1ckNTU0xlZnQgXSApID4gLTE7XG5cblx0XHQvLyBuZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlciB0b3Agb3IgbGVmdFxuXHRcdC8vIGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgZG9jRWxlbSwgd2luLFxuXHRcdFx0Ym94ID0geyB0b3A6IDAsIGxlZnQ6IDAgfSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRkb2MgPSBlbGVtICYmIGVsZW0ub3duZXJEb2N1bWVudDtcblxuXHRcdGlmICggIWRvYyApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdC8vIE1ha2Ugc3VyZSBpdCdzIG5vdCBhIGRpc2Nvbm5lY3RlZCBET00gbm9kZVxuXHRcdGlmICggIWpRdWVyeS5jb250YWlucyggZG9jRWxlbSwgZWxlbSApICkge1xuXHRcdFx0cmV0dXJuIGJveDtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBkb24ndCBoYXZlIGdCQ1IsIGp1c3QgdXNlIDAsMCByYXRoZXIgdGhhbiBlcnJvclxuXHRcdC8vIEJsYWNrQmVycnkgNSwgaU9TIDMgKG9yaWdpbmFsIGlQaG9uZSlcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdGJveCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0fVxuXHRcdHdpbiA9IGdldFdpbmRvdyggZG9jICk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogYm94LnRvcCAgKyAoIHdpbi5wYWdlWU9mZnNldCB8fCBkb2NFbGVtLnNjcm9sbFRvcCApICAtICggZG9jRWxlbS5jbGllbnRUb3AgIHx8IDAgKSxcblx0XHRcdGxlZnQ6IGJveC5sZWZ0ICsgKCB3aW4ucGFnZVhPZmZzZXQgfHwgZG9jRWxlbS5zY3JvbGxMZWZ0ICkgLSAoIGRvY0VsZW0uY2xpZW50TGVmdCB8fCAwIClcblx0XHR9O1xuXHR9LFxuXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHQvLyBGaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gd2luZG93IChwYXJlbnRPZmZzZXQgPSB7dG9wOjAsIGxlZnQ6IDB9LFxuXHRcdC8vIGJlY2F1c2UgaXQgaXMgaXRzIG9ubHkgb2Zmc2V0IHBhcmVudFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gd2UgYXNzdW1lIHRoYXQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlzIGF2YWlsYWJsZSB3aGVuIGNvbXB1dGVkIHBvc2l0aW9uIGlzIGZpeGVkXG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEdldCAqcmVhbCogb2Zmc2V0UGFyZW50XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCgpO1xuXG5cdFx0XHQvLyBHZXQgY29ycmVjdCBvZmZzZXRzXG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXHRcdFx0aWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJodG1sXCIgKSApIHtcblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0gb2Zmc2V0UGFyZW50Lm9mZnNldCgpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb2Zmc2V0UGFyZW50IGJvcmRlcnNcblx0XHRcdHBhcmVudE9mZnNldC50b3AgICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdC8vIG5vdGU6IHdoZW4gYW4gZWxlbWVudCBoYXMgbWFyZ2luOiBhdXRvIHRoZSBvZmZzZXRMZWZ0IGFuZCBtYXJnaW5MZWZ0XG5cdFx0Ly8gYXJlIHRoZSBzYW1lIGluIFNhZmFyaSBjYXVzaW5nIG9mZnNldC5sZWZ0IHRvIGluY29ycmVjdGx5IGJlIDBcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiAgb2Zmc2V0LnRvcCAgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCBvZmZzZXRQYXJlbnQsIFwiaHRtbFwiICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gL1kvLnRlc3QoIHByb3AgKTtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cdFx0XHR2YXIgd2luID0gZ2V0V2luZG93KCBlbGVtICk7XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyAoIHByb3AgaW4gd2luICkgPyB3aW5bIHByb3AgXSA6XG5cdFx0XHRcdFx0d2luLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgbWV0aG9kIF0gOlxuXHRcdFx0XHRcdGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiBqUXVlcnkoIHdpbiApLnNjcm9sbExlZnQoKSxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiBqUXVlcnkoIHdpbiApLnNjcm9sbFRvcCgpXG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoLCBudWxsICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaTw3LTgrLCBDaHJvbWU8MzctNDQrXG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwgd2UganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIGksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBpZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LFxuXHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIG1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIEFzIG9mIDUvOC8yMDEyIHRoaXMgd2lsbCB5aWVsZCBpbmNvcnJlY3QgcmVzdWx0cyBmb3IgTW9iaWxlIFNhZmFyaSwgYnV0IHRoZXJlXG5cdFx0XHRcdFx0Ly8gaXNuJ3QgYSB3aG9sZSBsb3Qgd2UgY2FuIGRvLiBTZWUgcHVsbCByZXF1ZXN0IGF0IHRoaXMgVVJMIGZvciBkaXNjdXNzaW9uOlxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNzY0XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0Ly8gdW5mb3J0dW5hdGVseSwgdGhpcyBjYXVzZXMgYnVnICMzODM4IGluIElFNi84IG9ubHksXG5cdFx0XHRcdFx0Ly8gYnV0IHRoZXJlIGlzIGN1cnJlbnRseSBubyBnb29kLCBzbWFsbCB3YXkgdG8gZml4IGl0LlxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSwgbnVsbCApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9XG59ICk7XG5cbi8vIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgY29udGFpbmVkIGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5qUXVlcnkuZm4uc2l6ZSA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcy5sZW5ndGg7XG59O1xuXG5qUXVlcnkuZm4uYW5kU2VsZiA9IGpRdWVyeS5mbi5hZGRCYWNrO1xuXG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpblxuLy8gQU1EICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cbnJldHVybiBqUXVlcnk7XG59KSk7XG4iLCIvLyA8ZGV0YWlscz4gcG9seWZpbGxcbi8vIGh0dHA6Ly9jYW5pdXNlLmNvbS8jZmVhdD1kZXRhaWxzXG5cbi8vIEZGIFN1cHBvcnQgZm9yIEhUTUw1J3MgPGRldGFpbHM+IGFuZCA8c3VtbWFyeT5cbi8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU5MTczN1xuXG4vLyBodHRwOi8vd3d3LnNpdGVwb2ludC5jb20vZml4aW5nLXRoZS1kZXRhaWxzLWVsZW1lbnQvXG5cbihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0J1xuXG4gIHZhciBOQVRJVkVfREVUQUlMUyA9IHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkZXRhaWxzJykub3BlbiA9PT0gJ2Jvb2xlYW4nXG5cbiAgLy8gQWRkIGV2ZW50IGNvbnN0cnVjdCBmb3IgbW9kZXJuIGJyb3dzZXJzIG9yIElFXG4gIC8vIHdoaWNoIGZpcmVzIHRoZSBjYWxsYmFjayB3aXRoIGEgcHJlLWNvbnZlcnRlZCB0YXJnZXQgcmVmZXJlbmNlXG4gIGZ1bmN0aW9uIGFkZEV2ZW50IChub2RlLCB0eXBlLCBjYWxsYmFjaykge1xuICAgIGlmIChub2RlLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBjYWxsYmFjayhlLCBlLnRhcmdldClcbiAgICAgIH0sIGZhbHNlKVxuICAgIH0gZWxzZSBpZiAobm9kZS5hdHRhY2hFdmVudCkge1xuICAgICAgbm9kZS5hdHRhY2hFdmVudCgnb24nICsgdHlwZSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgY2FsbGJhY2soZSwgZS5zcmNFbGVtZW50KVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICAvLyBIYW5kbGUgY3Jvc3MtbW9kYWwgY2xpY2sgZXZlbnRzXG4gIGZ1bmN0aW9uIGFkZENsaWNrRXZlbnQgKG5vZGUsIGNhbGxiYWNrKSB7XG4gICAgLy8gUHJldmVudCBzcGFjZSgzMikgZnJvbSBzY3JvbGxpbmcgdGhlIHBhZ2VcbiAgICBhZGRFdmVudChub2RlLCAna2V5cHJlc3MnLCBmdW5jdGlvbiAoZSwgdGFyZ2V0KSB7XG4gICAgICBpZiAodGFyZ2V0Lm5vZGVOYW1lID09PSAnU1VNTUFSWScpIHtcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMzIpIHtcbiAgICAgICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGUucmV0dXJuVmFsdWUgPSBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgLy8gV2hlbiB0aGUga2V5IGNvbWVzIHVwIC0gY2hlY2sgaWYgaXQgaXMgZW50ZXIoMTMpIG9yIHNwYWNlKDMyKVxuICAgIGFkZEV2ZW50KG5vZGUsICdrZXl1cCcsIGZ1bmN0aW9uIChlLCB0YXJnZXQpIHtcbiAgICAgIGlmIChlLmtleUNvZGUgPT09IDEzIHx8IGUua2V5Q29kZSA9PT0gMzIpIHsgY2FsbGJhY2soZSwgdGFyZ2V0KSB9XG4gICAgfSlcbiAgICBhZGRFdmVudChub2RlLCAnbW91c2V1cCcsIGZ1bmN0aW9uIChlLCB0YXJnZXQpIHtcbiAgICAgIGNhbGxiYWNrKGUsIHRhcmdldClcbiAgICB9KVxuICB9XG5cbiAgLy8gR2V0IHRoZSBuZWFyZXN0IGFuY2VzdG9yIGVsZW1lbnQgb2YgYSBub2RlIHRoYXQgbWF0Y2hlcyBhIGdpdmVuIHRhZyBuYW1lXG4gIGZ1bmN0aW9uIGdldEFuY2VzdG9yIChub2RlLCBtYXRjaCkge1xuICAgIGRvIHtcbiAgICAgIGlmICghbm9kZSB8fCBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG1hdGNoKSB7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlXG4gICAgfSB3aGlsZSAobm9kZSlcblxuICAgIHJldHVybiBub2RlXG4gIH1cblxuICAvLyBDcmVhdGUgYSBzdGFydGVkIGZsYWcgc28gd2UgY2FuIHByZXZlbnQgdGhlIGluaXRpYWxpc2F0aW9uXG4gIC8vIGZ1bmN0aW9uIGZpcmluZyBmcm9tIGJvdGggRE9NQ29udGVudExvYWRlZCBhbmQgd2luZG93Lm9ubG9hZFxuICB2YXIgc3RhcnRlZCA9IGZhbHNlXG5cbiAgLy8gSW5pdGlhbGlzYXRpb24gZnVuY3Rpb25cbiAgZnVuY3Rpb24gYWRkRGV0YWlsc1BvbHlmaWxsIChsaXN0KSB7XG4gICAgLy8gSWYgdGhpcyBoYXMgYWxyZWFkeSBoYXBwZW5lZCwganVzdCByZXR1cm5cbiAgICAvLyBlbHNlIHNldCB0aGUgZmxhZyBzbyBpdCBkb2Vzbid0IGhhcHBlbiBhZ2FpblxuICAgIGlmIChzdGFydGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgc3RhcnRlZCA9IHRydWVcblxuICAgIC8vIEdldCB0aGUgY29sbGVjdGlvbiBvZiBkZXRhaWxzIGVsZW1lbnRzLCBidXQgaWYgdGhhdCdzIGVtcHR5XG4gICAgLy8gdGhlbiB3ZSBkb24ndCBuZWVkIHRvIGJvdGhlciB3aXRoIHRoZSByZXN0IG9mIHRoZSBzY3JpcHRpbmdcbiAgICBpZiAoKGxpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZGV0YWlscycpKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIGVsc2UgaXRlcmF0ZSB0aHJvdWdoIHRoZW0gdG8gYXBwbHkgdGhlaXIgaW5pdGlhbCBzdGF0ZVxuICAgIHZhciBuID0gbGlzdC5sZW5ndGhcbiAgICB2YXIgaSA9IDBcbiAgICBmb3IgKGk7IGkgPCBuOyBpKyspIHtcbiAgICAgIHZhciBkZXRhaWxzID0gbGlzdFtpXVxuXG4gICAgICAvLyBTYXZlIHNob3J0Y3V0cyB0byB0aGUgaW5uZXIgc3VtbWFyeSBhbmQgY29udGVudCBlbGVtZW50c1xuICAgICAgZGV0YWlscy5fX3N1bW1hcnkgPSBkZXRhaWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzdW1tYXJ5JykuaXRlbSgwKVxuICAgICAgZGV0YWlscy5fX2NvbnRlbnQgPSBkZXRhaWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdkaXYnKS5pdGVtKDApXG5cbiAgICAgIC8vIElmIHRoZSBjb250ZW50IGRvZXNuJ3QgaGF2ZSBhbiBJRCwgYXNzaWduIGl0IG9uZSBub3dcbiAgICAgIC8vIHdoaWNoIHdlJ2xsIG5lZWQgZm9yIHRoZSBzdW1tYXJ5J3MgYXJpYS1jb250cm9scyBhc3NpZ25tZW50XG4gICAgICBpZiAoIWRldGFpbHMuX19jb250ZW50LmlkKSB7XG4gICAgICAgIGRldGFpbHMuX19jb250ZW50LmlkID0gJ2RldGFpbHMtY29udGVudC0nICsgaVxuICAgICAgfVxuXG4gICAgICAvLyBBZGQgQVJJQSByb2xlPVwiZ3JvdXBcIiB0byBkZXRhaWxzXG4gICAgICBkZXRhaWxzLnNldEF0dHJpYnV0ZSgncm9sZScsICdncm91cCcpXG5cbiAgICAgIC8vIEFkZCByb2xlPWJ1dHRvbiB0byBzdW1tYXJ5XG4gICAgICBkZXRhaWxzLl9fc3VtbWFyeS5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnYnV0dG9uJylcblxuICAgICAgLy8gQWRkIGFyaWEtY29udHJvbHNcbiAgICAgIGRldGFpbHMuX19zdW1tYXJ5LnNldEF0dHJpYnV0ZSgnYXJpYS1jb250cm9scycsIGRldGFpbHMuX19jb250ZW50LmlkKVxuXG4gICAgICAvLyBTZXQgdGFiSW5kZXggc28gdGhlIHN1bW1hcnkgaXMga2V5Ym9hcmQgYWNjZXNzaWJsZSBmb3Igbm9uLW5hdGl2ZSBlbGVtZW50c1xuICAgICAgLy8gaHR0cDovL3d3dy5zYWxpZW5jZXMuY29tL2Jyb3dzZXJCdWdzL3RhYkluZGV4Lmh0bWxcbiAgICAgIGlmICghTkFUSVZFX0RFVEFJTFMpIHtcbiAgICAgICAgZGV0YWlscy5fX3N1bW1hcnkudGFiSW5kZXggPSAwXG4gICAgICB9XG5cbiAgICAgIC8vIERldGVjdCBpbml0aWFsIG9wZW4gc3RhdGVcbiAgICAgIHZhciBvcGVuQXR0ciA9IGRldGFpbHMuZ2V0QXR0cmlidXRlKCdvcGVuJykgIT09IG51bGxcbiAgICAgIGlmIChvcGVuQXR0ciA9PT0gdHJ1ZSkge1xuICAgICAgICBkZXRhaWxzLl9fc3VtbWFyeS5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpXG4gICAgICAgIGRldGFpbHMuX19jb250ZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAnZmFsc2UnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGV0YWlscy5fX3N1bW1hcnkuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJylcbiAgICAgICAgZGV0YWlscy5fX2NvbnRlbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJylcbiAgICAgICAgaWYgKCFOQVRJVkVfREVUQUlMUykge1xuICAgICAgICAgIGRldGFpbHMuX19jb250ZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBDcmVhdGUgYSBjaXJjdWxhciByZWZlcmVuY2UgZnJvbSB0aGUgc3VtbWFyeSBiYWNrIHRvIGl0c1xuICAgICAgLy8gcGFyZW50IGRldGFpbHMgZWxlbWVudCwgZm9yIGNvbnZlbmllbmNlIGluIHRoZSBjbGljayBoYW5kbGVyXG4gICAgICBkZXRhaWxzLl9fc3VtbWFyeS5fX2RldGFpbHMgPSBkZXRhaWxzXG5cbiAgICAgIC8vIElmIHRoaXMgaXMgbm90IGEgbmF0aXZlIGltcGxlbWVudGF0aW9uLCBjcmVhdGUgYW4gYXJyb3dcbiAgICAgIC8vIGluc2lkZSB0aGUgc3VtbWFyeVxuICAgICAgaWYgKCFOQVRJVkVfREVUQUlMUykge1xuICAgICAgICB2YXIgdHdpc3R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpXG5cbiAgICAgICAgaWYgKG9wZW5BdHRyID09PSB0cnVlKSB7XG4gICAgICAgICAgdHdpc3R5LmNsYXNzTmFtZSA9ICdhcnJvdyBhcnJvdy1vcGVuJ1xuICAgICAgICAgIHR3aXN0eS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnXFx1MjViYycpKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHR3aXN0eS5jbGFzc05hbWUgPSAnYXJyb3cgYXJyb3ctY2xvc2VkJ1xuICAgICAgICAgIHR3aXN0eS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnXFx1MjViYScpKVxuICAgICAgICB9XG5cbiAgICAgICAgZGV0YWlscy5fX3N1bW1hcnkuX190d2lzdHkgPSBkZXRhaWxzLl9fc3VtbWFyeS5pbnNlcnRCZWZvcmUodHdpc3R5LCBkZXRhaWxzLl9fc3VtbWFyeS5maXJzdENoaWxkKVxuICAgICAgICBkZXRhaWxzLl9fc3VtbWFyeS5fX3R3aXN0eS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERlZmluZSBhIHN0YXRlY2hhbmdlIGZ1bmN0aW9uIHRoYXQgdXBkYXRlcyBhcmlhLWV4cGFuZGVkIGFuZCBzdHlsZS5kaXNwbGF5XG4gICAgLy8gQWxzbyB1cGRhdGUgdGhlIGFycm93IHBvc2l0aW9uXG4gICAgZnVuY3Rpb24gc3RhdGVjaGFuZ2UgKHN1bW1hcnkpIHtcbiAgICAgIHZhciBleHBhbmRlZCA9IHN1bW1hcnkuX19kZXRhaWxzLl9fc3VtbWFyeS5nZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnKSA9PT0gJ3RydWUnXG4gICAgICB2YXIgaGlkZGVuID0gc3VtbWFyeS5fX2RldGFpbHMuX19jb250ZW50LmdldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKSA9PT0gJ3RydWUnXG5cbiAgICAgIHN1bW1hcnkuX19kZXRhaWxzLl9fc3VtbWFyeS5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAoZXhwYW5kZWQgPyAnZmFsc2UnIDogJ3RydWUnKSlcbiAgICAgIHN1bW1hcnkuX19kZXRhaWxzLl9fY29udGVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgKGhpZGRlbiA/ICdmYWxzZScgOiAndHJ1ZScpKVxuXG4gICAgICBpZiAoIU5BVElWRV9ERVRBSUxTKSB7XG4gICAgICAgIHN1bW1hcnkuX19kZXRhaWxzLl9fY29udGVudC5zdHlsZS5kaXNwbGF5ID0gKGV4cGFuZGVkID8gJ25vbmUnIDogJycpXG5cbiAgICAgICAgdmFyIGhhc09wZW5BdHRyID0gc3VtbWFyeS5fX2RldGFpbHMuZ2V0QXR0cmlidXRlKCdvcGVuJykgIT09IG51bGxcbiAgICAgICAgaWYgKCFoYXNPcGVuQXR0cikge1xuICAgICAgICAgIHN1bW1hcnkuX19kZXRhaWxzLnNldEF0dHJpYnV0ZSgnb3BlbicsICdvcGVuJylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdW1tYXJ5Ll9fZGV0YWlscy5yZW1vdmVBdHRyaWJ1dGUoJ29wZW4nKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdW1tYXJ5Ll9fdHdpc3R5KSB7XG4gICAgICAgIHN1bW1hcnkuX190d2lzdHkuZmlyc3RDaGlsZC5ub2RlVmFsdWUgPSAoZXhwYW5kZWQgPyAnXFx1MjViYScgOiAnXFx1MjViYycpXG4gICAgICAgIHN1bW1hcnkuX190d2lzdHkuc2V0QXR0cmlidXRlKCdjbGFzcycsIChleHBhbmRlZCA/ICdhcnJvdyBhcnJvdy1jbG9zZWQnIDogJ2Fycm93IGFycm93LW9wZW4nKSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICAvLyBCaW5kIGEgY2xpY2sgZXZlbnQgdG8gaGFuZGxlIHN1bW1hcnkgZWxlbWVudHNcbiAgICBhZGRDbGlja0V2ZW50KGRvY3VtZW50LCBmdW5jdGlvbiAoZSwgc3VtbWFyeSkge1xuICAgICAgaWYgKCEoc3VtbWFyeSA9IGdldEFuY2VzdG9yKHN1bW1hcnksICdzdW1tYXJ5JykpKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhdGVjaGFuZ2Uoc3VtbWFyeSlcbiAgICB9KVxuICB9XG5cbiAgLy8gQmluZCB0d28gbG9hZCBldmVudHMgZm9yIG1vZGVybiBhbmQgb2xkZXIgYnJvd3NlcnNcbiAgLy8gSWYgdGhlIGZpcnN0IG9uZSBmaXJlcyBpdCB3aWxsIHNldCBhIGZsYWcgdG8gYmxvY2sgdGhlIHNlY29uZCBvbmVcbiAgLy8gYnV0IGlmIGl0J3Mgbm90IHN1cHBvcnRlZCB0aGVuIHRoZSBzZWNvbmQgb25lIHdpbGwgZmlyZVxuICBhZGRFdmVudChkb2N1bWVudCwgJ0RPTUNvbnRlbnRMb2FkZWQnLCBhZGREZXRhaWxzUG9seWZpbGwpXG4gIGFkZEV2ZW50KHdpbmRvdywgJ2xvYWQnLCBhZGREZXRhaWxzUG9seWZpbGwpXG59KSgpXG4iLCIoZnVuY3Rpb24gKCQpIHtcbiAgdmFyICRzdWJtaXQgPSAkKCcjc3VibWl0JylcbiAgdmFyICRuYWEgPSAkKCcjYWNjZXB0LW5hYScpXG4gIHZhciAkYWdyZWVOYWEgPSAkKCcjYWdyZWUtbmFhJylcbiAgdmFyICRlcnJvck1lc3NhZ2VOYWEgPSAkKCc8cCByb2xlPVwiYWxlcnRcIiBjbGFzcz1cImVycm9yLW1lc3NhZ2VcIj5QbGVhc2UgaW5kaWNhdGUgdGhhdCB5b3UgYWdyZWUgdG8gdGhlIHRlcm1zIG9mIHVzZSBzZXQgb3V0IGluIHRoZSBOZXR3b3JrIEFjY2VzcyBBZ3JlZW1lbnQ8L3A+JylcblxuICB2YXIgZGlydHkgPSBmYWxzZVxuXG4gIGZ1bmN0aW9uIHJlc2V0Rm9ybSAoKSB7XG4gICAgJGFncmVlTmFhXG4gICAgICAgIC5jbG9zZXN0KCcuZm9ybS1ncm91cCcpXG4gICAgICAgIC5yZW1vdmVDbGFzcygnZXJyb3InKVxuICAgICAgICAuZmluZCgnLmVycm9yLW1lc3NhZ2UnKVxuICAgICAgICAucmVtb3ZlKClcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUJ1dHRvbiAoKSB7XG4gICAgaWYgKCRuYWEuaXMoJzpjaGVja2VkJykpIHtcbiAgICAgICRzdWJtaXQucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgJGVycm9yTWVzc2FnZU5hYS5yZW1vdmUoKVxuICAgICAgJGFncmVlTmFhLmNsb3Nlc3QoJy5mb3JtLWdyb3VwJykucmVtb3ZlQ2xhc3MoJ2Vycm9yJylcbiAgICB9IGVsc2Uge1xuICAgICAgJHN1Ym1pdC5hdHRyKCdkaXNhYmxlZCcsIHRydWUpXG5cbiAgICAgIGlmIChkaXJ0eSkge1xuICAgICAgICAkYWdyZWVOYWEuY2xvc2VzdCgnLmZvcm0tZ3JvdXAnKS5hcHBlbmQoJGVycm9yTWVzc2FnZU5hYSlcblxuICAgICAgICAkYWdyZWVOYWEuY2xvc2VzdCgnLmZvcm0tZ3JvdXAnKS5hZGRDbGFzcygnZXJyb3InKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlydHkgPSB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgJG5hYS5vbignY2hhbmdlJywgdXBkYXRlQnV0dG9uKVxuICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgcmVzZXRGb3JtKClcbiAgICB1cGRhdGVCdXR0b24oKVxuICB9KVxufSkod2luZG93LmpRdWVyeSlcbiIsIihmdW5jdGlvbiAoJCkge1xuICB2YXIgY291bnQgPSAwXG4gIHZhciBpbnRlcnZhbCA9IDUwMDBcbiAgdmFyIG1heFRyaWVzID0gMTJcblxuICAvLyBUaGUgYmVoYXZpb3VyIGlzIGJvdW5kIHRvIHRoaXMgZGF0YSBhdHRyaWJ1dGUuIElmIGl0J3Mgbm90IHByZXNlbnQsIGJhaWwgb3V0XG4gIGlmICghJCgnW2RhdGEtY29uZmlybWluZy1kZWVkXScpLmxlbmd0aCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLy8gQ2FsbCBvdXIgbWFpbiBlbmRwb2ludCB2aWEgYWpheFxuICAvLyBUaGlzIGtpY2tzIG9mZiB0aGUgY2FsbCB0byBkZWVkIGFwaVxuICAkLmFqYXgoe1xuICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgY2FjaGU6IGZhbHNlLFxuICAgIGRhdGE6IHtcbiAgICAgIGF1dGhfY29kZTogJCgnaW5wdXRbbmFtZT1cImF1dGhfY29kZVwiXScpLnZhbCgpXG4gICAgfSxcbiAgICB1cmw6ICd2ZXJpZnktYXV0aC1jb2RlJyxcbiAgICB0aW1lb3V0OiBpbnRlcnZhbCAqIG1heFRyaWVzLCAvLyBNYWtlIGl0IHdhaXQgZm9yIHRoZSBmdWxsIGR1cmF0aW9uXG4gICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIGlmIChkYXRhLmVycm9yKSB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IGRhdGEucmVkaXJlY3RcbiAgICAgIH1cbiAgICB9XG4gIH0pXG5cbiAgLy8gRnVuY3Rpb24gdG8gY2hlY2sgdGhlIHN0YXR1cyBvZiB0aGUgcmVxdWVzdCBwZXJpb2RpY2FsbHlcbiAgZnVuY3Rpb24gY2hlY2tEZWVkSXNTaWduZWQgKCkge1xuICAgIGNvdW50KytcblxuICAgIC8vIENhbGwgb3VyIGNoZWNraW5nIGVuZHBvaW50IHZpYSBhamF4XG4gICAgJC5hamF4KHtcbiAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgY2FjaGU6IGZhbHNlLFxuICAgICAgdXJsOiAnY29uZmlybS1tb3J0Z2FnZS1pcy1zaWduZWQnLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgLy8gSWYgaXQncyByZWFkeSwgcmVkaXJlY3QsIG90aGVyd2lzZSBnbyByb3VuZCBhZ2FpblxuICAgICAgICBpZiAoZGF0YS5yZXN1bHQpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBkYXRhLnJlZGlyZWN0XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgZXJyb3Igb2NjdXJzIHJlZGlyZWN0IHRvIGVycm9yIHBhZ2VcbiAgICAgICAgaWYgKGRhdGEuZXJyb3IpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBkYXRhLnJlZGlyZWN0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgaWYgKGNvdW50IDwgbWF4VHJpZXMpIHtcbiAgICAgIHNldFRpbWVvdXQoY2hlY2tEZWVkSXNTaWduZWQsIGludGVydmFsKVxuICAgIH0gZWxzZSB7XG4gICAgICB3aW5kb3cubG9jYXRpb24gPSAnc2VydmljZS11bmF2YWlsYWJsZS9kZWVkLW5vdC1jb25maXJtZWQnXG4gICAgfVxuICB9XG5cbiAgLy8gRXZlcnkgNSBzZWNvbmRzIGNoZWNrIGFnYWluXG4gIHNldFRpbWVvdXQoY2hlY2tEZWVkSXNTaWduZWQsIGludGVydmFsKVxufSkod2luZG93LmpRdWVyeSlcbiIsIjsoZnVuY3Rpb24gKGdsb2JhbCkge1xuICAndXNlIHN0cmljdCdcblxuICB2YXIgJCA9IGdsb2JhbC5qUXVlcnlcbiAgdmFyIEdPVlVLID0gZ2xvYmFsLkdPVlVLIHx8IHt9XG5cbiAgdmFyIFNlbGVjdGlvbkJ1dHRvbnMgPSBmdW5jdGlvbiAoZWxtc09yU2VsZWN0b3IsIG9wdHMpIHtcbiAgICB0aGlzLnNlbGVjdGVkQ2xhc3MgPSAnc2VsZWN0ZWQnXG4gICAgdGhpcy5mb2N1c2VkQ2xhc3MgPSAnZm9jdXNlZCdcbiAgICB0aGlzLnJhZGlvQ2xhc3MgPSAnc2VsZWN0aW9uLWJ1dHRvbi1yYWRpbydcbiAgICB0aGlzLmNoZWNrYm94Q2xhc3MgPSAnc2VsZWN0aW9uLWJ1dHRvbi1jaGVja2JveCdcbiAgICBpZiAob3B0cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAkLmVhY2gob3B0cywgZnVuY3Rpb24gKG9wdGlvbk5hbWUsIG9wdGlvbk9iaikge1xuICAgICAgICB0aGlzW29wdGlvbk5hbWVdID0gb3B0aW9uT2JqXG4gICAgICB9LmJpbmQodGhpcykpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZWxtc09yU2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLnNlbGVjdG9yID0gZWxtc09yU2VsZWN0b3JcbiAgICAgIHRoaXMuc2V0SW5pdGlhbFN0YXRlKCQodGhpcy5zZWxlY3RvcikpXG4gICAgfSBlbHNlIGlmIChlbG1zT3JTZWxlY3RvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLiRlbG1zID0gZWxtc09yU2VsZWN0b3JcbiAgICAgIHRoaXMuc2V0SW5pdGlhbFN0YXRlKHRoaXMuJGVsbXMpXG4gICAgfVxuICAgIHRoaXMuYWRkRXZlbnRzKClcbiAgfVxuICBTZWxlY3Rpb25CdXR0b25zLnByb3RvdHlwZS5hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLiRlbG1zICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5hZGRFbGVtZW50TGV2ZWxFdmVudHMoKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFkZERvY3VtZW50TGV2ZWxFdmVudHMoKVxuICAgIH1cbiAgfVxuICBTZWxlY3Rpb25CdXR0b25zLnByb3RvdHlwZS5zZXRJbml0aWFsU3RhdGUgPSBmdW5jdGlvbiAoJGVsbXMpIHtcbiAgICAkZWxtcy5lYWNoKGZ1bmN0aW9uIChpZHgsIGVsbSkge1xuICAgICAgdmFyICRlbG0gPSAkKGVsbSlcblxuICAgICAgdmFyIGxhYmVsQ2xhc3MgPSAkZWxtLmF0dHIoJ3R5cGUnKSA9PT0gJ3JhZGlvJyA/IHRoaXMucmFkaW9DbGFzcyA6IHRoaXMuY2hlY2tib3hDbGFzc1xuICAgICAgJGVsbS5wYXJlbnQoJ2xhYmVsJykuYWRkQ2xhc3MobGFiZWxDbGFzcylcbiAgICAgIGlmICgkZWxtLmlzKCc6Y2hlY2tlZCcpKSB7XG4gICAgICAgIHRoaXMubWFya1NlbGVjdGVkKCRlbG0pXG4gICAgICB9XG4gICAgfS5iaW5kKHRoaXMpKVxuICB9XG4gIFNlbGVjdGlvbkJ1dHRvbnMucHJvdG90eXBlLm1hcmtGb2N1c2VkID0gZnVuY3Rpb24gKCRlbG0sIHN0YXRlKSB7XG4gICAgaWYgKHN0YXRlID09PSAnZm9jdXNlZCcpIHtcbiAgICAgICRlbG0ucGFyZW50KCdsYWJlbCcpLmFkZENsYXNzKHRoaXMuZm9jdXNlZENsYXNzKVxuICAgIH0gZWxzZSB7XG4gICAgICAkZWxtLnBhcmVudCgnbGFiZWwnKS5yZW1vdmVDbGFzcyh0aGlzLmZvY3VzZWRDbGFzcylcbiAgICB9XG4gIH1cbiAgU2VsZWN0aW9uQnV0dG9ucy5wcm90b3R5cGUubWFya1NlbGVjdGVkID0gZnVuY3Rpb24gKCRlbG0pIHtcbiAgICB2YXIgcmFkaW9OYW1lXG5cbiAgICBpZiAoJGVsbS5hdHRyKCd0eXBlJykgPT09ICdyYWRpbycpIHtcbiAgICAgIHJhZGlvTmFtZSA9ICRlbG0uYXR0cignbmFtZScpXG4gICAgICAkKCRlbG1bMF0uZm9ybSkuZmluZCgnaW5wdXRbbmFtZT1cIicgKyByYWRpb05hbWUgKyAnXCJdJylcbiAgICAgICAgLnBhcmVudCgnbGFiZWwnKVxuICAgICAgICAucmVtb3ZlQ2xhc3ModGhpcy5zZWxlY3RlZENsYXNzKVxuICAgICAgJGVsbS5wYXJlbnQoJ2xhYmVsJykuYWRkQ2xhc3ModGhpcy5zZWxlY3RlZENsYXNzKVxuICAgIH0gZWxzZSB7IC8vIGNoZWNrYm94XG4gICAgICBpZiAoJGVsbS5pcygnOmNoZWNrZWQnKSkge1xuICAgICAgICAkZWxtLnBhcmVudCgnbGFiZWwnKS5hZGRDbGFzcyh0aGlzLnNlbGVjdGVkQ2xhc3MpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkZWxtLnBhcmVudCgnbGFiZWwnKS5yZW1vdmVDbGFzcyh0aGlzLnNlbGVjdGVkQ2xhc3MpXG4gICAgICB9XG4gICAgfVxuICB9XG4gIFNlbGVjdGlvbkJ1dHRvbnMucHJvdG90eXBlLmFkZEVsZW1lbnRMZXZlbEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmNsaWNrSGFuZGxlciA9IHRoaXMuZ2V0Q2xpY2tIYW5kbGVyKClcbiAgICB0aGlzLmZvY3VzSGFuZGxlciA9IHRoaXMuZ2V0Rm9jdXNIYW5kbGVyKHsgJ2xldmVsJzogJ2VsZW1lbnQnIH0pXG5cbiAgICB0aGlzLiRlbG1zXG4gICAgICAub24oJ2NsaWNrJywgdGhpcy5jbGlja0hhbmRsZXIpXG4gICAgICAub24oJ2ZvY3VzIGJsdXInLCB0aGlzLmZvY3VzSGFuZGxlcilcbiAgfVxuICBTZWxlY3Rpb25CdXR0b25zLnByb3RvdHlwZS5hZGREb2N1bWVudExldmVsRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY2xpY2tIYW5kbGVyID0gdGhpcy5nZXRDbGlja0hhbmRsZXIoKVxuICAgIHRoaXMuZm9jdXNIYW5kbGVyID0gdGhpcy5nZXRGb2N1c0hhbmRsZXIoeyAnbGV2ZWwnOiAnZG9jdW1lbnQnIH0pXG5cbiAgICAkKGRvY3VtZW50KVxuICAgICAgLm9uKCdjbGljaycsIHRoaXMuc2VsZWN0b3IsIHRoaXMuY2xpY2tIYW5kbGVyKVxuICAgICAgLm9uKCdmb2N1cyBibHVyJywgdGhpcy5zZWxlY3RvciwgdGhpcy5mb2N1c0hhbmRsZXIpXG4gIH1cbiAgU2VsZWN0aW9uQnV0dG9ucy5wcm90b3R5cGUuZ2V0Q2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZSkge1xuICAgICAgdGhpcy5tYXJrU2VsZWN0ZWQoJChlLnRhcmdldCkpXG4gICAgfS5iaW5kKHRoaXMpXG4gIH1cbiAgU2VsZWN0aW9uQnV0dG9ucy5wcm90b3R5cGUuZ2V0Rm9jdXNIYW5kbGVyID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgICB2YXIgZm9jdXNFdmVudCA9IChvcHRzLmxldmVsID09PSAnZG9jdW1lbnQnKSA/ICdmb2N1c2luJyA6ICdmb2N1cydcblxuICAgIHJldHVybiBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIHN0YXRlID0gKGUudHlwZSA9PT0gZm9jdXNFdmVudCkgPyAnZm9jdXNlZCcgOiAnYmx1cnJlZCdcblxuICAgICAgdGhpcy5tYXJrRm9jdXNlZCgkKGUudGFyZ2V0KSwgc3RhdGUpXG4gICAgfS5iaW5kKHRoaXMpXG4gIH1cbiAgU2VsZWN0aW9uQnV0dG9ucy5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuc2VsZWN0b3IgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAkKGRvY3VtZW50KVxuICAgICAgICAub2ZmKCdjbGljaycsIHRoaXMuc2VsZWN0b3IsIHRoaXMuY2xpY2tIYW5kbGVyKVxuICAgICAgICAub2ZmKCdmb2N1cyBibHVyJywgdGhpcy5zZWxlY3RvciwgdGhpcy5mb2N1c0hhbmRsZXIpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJGVsbXNcbiAgICAgICAgLm9mZignY2xpY2snLCB0aGlzLmNsaWNrSGFuZGxlcilcbiAgICAgICAgLm9mZignZm9jdXMgYmx1cicsIHRoaXMuZm9jdXNIYW5kbGVyKVxuICAgIH1cbiAgfVxuXG4gIEdPVlVLLlNlbGVjdGlvbkJ1dHRvbnMgPSBTZWxlY3Rpb25CdXR0b25zXG4gIGdsb2JhbC5HT1ZVSyA9IEdPVlVLXG59KSh3aW5kb3cpXG4iLCJpbXBvcnQgJ2dvdnVrX2Zyb250ZW5kX3Rvb2xraXQvamF2YXNjcmlwdHMvZ292dWsvc2VsZWN0aW9uLWJ1dHRvbnMnXG5cbm5ldyBHT1ZVSy5TZWxlY3Rpb25CdXR0b25zKCcuYmxvY2stbGFiZWwgaW5wdXRbdHlwZT1cInJhZGlvXCJdLCAuYmxvY2stbGFiZWwgaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXcsbm8tdW5kZWYiXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkb2N1bWVudCIsInciLCJFcnJvciIsIndpbmRvdyIsInRoaXMiLCJub0dsb2JhbCIsImlzQXJyYXlMaWtlIiwib2JqIiwibGVuZ3RoIiwidHlwZSIsImpRdWVyeSIsImlzV2luZG93Iiwid2lubm93IiwiZWxlbWVudHMiLCJxdWFsaWZpZXIiLCJub3QiLCJpc0Z1bmN0aW9uIiwiZ3JlcCIsImVsZW0iLCJpIiwiY2FsbCIsIm5vZGVUeXBlIiwicmlzU2ltcGxlIiwidGVzdCIsImZpbHRlciIsImluQXJyYXkiLCJzaWJsaW5nIiwiY3VyIiwiZGlyIiwiY3JlYXRlT3B0aW9ucyIsIm9wdGlvbnMiLCJvYmplY3QiLCJlYWNoIiwibWF0Y2giLCJybm90d2hpdGUiLCJfIiwiZmxhZyIsImRldGFjaCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY29tcGxldGVkIiwiZGV0YWNoRXZlbnQiLCJldmVudCIsInJlYWR5U3RhdGUiLCJyZWFkeSIsImRhdGFBdHRyIiwia2V5IiwiZGF0YSIsInVuZGVmaW5lZCIsIm5hbWUiLCJyZXBsYWNlIiwicm11bHRpRGFzaCIsInRvTG93ZXJDYXNlIiwiZ2V0QXR0cmlidXRlIiwicmJyYWNlIiwicGFyc2VKU09OIiwiZSIsImlzRW1wdHlEYXRhT2JqZWN0IiwiaXNFbXB0eU9iamVjdCIsImludGVybmFsRGF0YSIsInB2dCIsImFjY2VwdERhdGEiLCJyZXQiLCJ0aGlzQ2FjaGUiLCJpbnRlcm5hbEtleSIsImV4cGFuZG8iLCJpc05vZGUiLCJjYWNoZSIsImlkIiwiZGVsZXRlZElkcyIsInBvcCIsImd1aWQiLCJ0b0pTT04iLCJub29wIiwiZXh0ZW5kIiwiY2FtZWxDYXNlIiwiaW50ZXJuYWxSZW1vdmVEYXRhIiwiaXNBcnJheSIsImNvbmNhdCIsIm1hcCIsInNwbGl0IiwiY2xlYW5EYXRhIiwic3VwcG9ydCIsImRlbGV0ZUV4cGFuZG8iLCJhZGp1c3RDU1MiLCJwcm9wIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJjc3MiLCJpbml0aWFsIiwidW5pdCIsImNzc051bWJlciIsImluaXRpYWxJblVuaXQiLCJyY3NzTnVtIiwiZXhlYyIsInN0eWxlIiwic3RhcnQiLCJlbmQiLCJjcmVhdGVTYWZlRnJhZ21lbnQiLCJsaXN0Iiwibm9kZU5hbWVzIiwic2FmZUZyYWciLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY3JlYXRlRWxlbWVudCIsImdldEFsbCIsImNvbnRleHQiLCJ0YWciLCJlbGVtcyIsImZvdW5kIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY2hpbGROb2RlcyIsIm5vZGVOYW1lIiwicHVzaCIsIm1lcmdlIiwic2V0R2xvYmFsRXZhbCIsInJlZkVsZW1lbnRzIiwiX2RhdGEiLCJmaXhEZWZhdWx0Q2hlY2tlZCIsInJjaGVja2FibGVUeXBlIiwiZGVmYXVsdENoZWNrZWQiLCJjaGVja2VkIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwiaiIsImNvbnRhaW5zIiwidG1wIiwidGJvZHkiLCJ3cmFwIiwibCIsInNhZmUiLCJub2RlcyIsInJodG1sIiwiYXBwZW5kQ2hpbGQiLCJydGFnTmFtZSIsIndyYXBNYXAiLCJfZGVmYXVsdCIsImlubmVySFRNTCIsImh0bWxQcmVmaWx0ZXIiLCJsYXN0Q2hpbGQiLCJsZWFkaW5nV2hpdGVzcGFjZSIsInJsZWFkaW5nV2hpdGVzcGFjZSIsImNyZWF0ZVRleHROb2RlIiwicnRib2R5IiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwidGV4dENvbnRlbnQiLCJhcHBlbmRDaGVja2VkIiwib3duZXJEb2N1bWVudCIsInJzY3JpcHRUeXBlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJhY3RpdmVFbGVtZW50IiwiZXJyIiwib24iLCJ0eXBlcyIsInNlbGVjdG9yIiwiZm4iLCJvbmUiLCJvcmlnRm4iLCJvZmYiLCJhcHBseSIsImFyZ3VtZW50cyIsImFkZCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImNvbnRlbnQiLCJkaXNhYmxlU2NyaXB0IiwiZmluZCIsImF0dHIiLCJyZXN0b3JlU2NyaXB0IiwicnNjcmlwdFR5cGVNYXNrZWQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjbG9uZUNvcHlFdmVudCIsInNyYyIsImRlc3QiLCJoYXNEYXRhIiwib2xkRGF0YSIsImN1ckRhdGEiLCJldmVudHMiLCJoYW5kbGUiLCJmaXhDbG9uZU5vZGVJc3N1ZXMiLCJub0Nsb25lRXZlbnQiLCJyZW1vdmVFdmVudCIsInRleHQiLCJwYXJlbnROb2RlIiwib3V0ZXJIVE1MIiwiaHRtbDVDbG9uZSIsInRyaW0iLCJ2YWx1ZSIsImRlZmF1bHRTZWxlY3RlZCIsInNlbGVjdGVkIiwiZGVmYXVsdFZhbHVlIiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiYXJncyIsImNhbGxiYWNrIiwiZmlyc3QiLCJub2RlIiwiaGFzU2NyaXB0cyIsImRvYyIsImZyYWdtZW50IiwiaU5vQ2xvbmUiLCJjaGVja0Nsb25lIiwicmNoZWNrZWQiLCJpbmRleCIsInNlbGYiLCJlcSIsImh0bWwiLCJjbG9uZSIsIl9ldmFsVXJsIiwiZ2xvYmFsRXZhbCIsInJjbGVhblNjcmlwdCIsInJlbW92ZSIsImtlZXBEYXRhIiwiYWN0dWFsRGlzcGxheSIsImFwcGVuZFRvIiwiYm9keSIsImRpc3BsYXkiLCJkZWZhdWx0RGlzcGxheSIsImVsZW1kaXNwbGF5IiwiaWZyYW1lIiwiZG9jdW1lbnRFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImNvbnRlbnREb2N1bWVudCIsIndyaXRlIiwiY2xvc2UiLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsImdldCIsInZlbmRvclByb3BOYW1lIiwiZW1wdHlTdHlsZSIsImNhcE5hbWUiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwiY3NzUHJlZml4ZXMiLCJzaG93SGlkZSIsInNob3ciLCJoaWRkZW4iLCJ2YWx1ZXMiLCJpc0hpZGRlbiIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJtYXRjaGVzIiwicm51bXNwbGl0IiwiTWF0aCIsIm1heCIsImF1Z21lbnRXaWR0aE9ySGVpZ2h0IiwiZXh0cmEiLCJpc0JvcmRlckJveCIsInN0eWxlcyIsInZhbCIsImNzc0V4cGFuZCIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94Iiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJnZXRTdHlsZXMiLCJib3hTaXppbmciLCJjdXJDU1MiLCJybnVtbm9ucHgiLCJib3hTaXppbmdSZWxpYWJsZSIsInBhcnNlRmxvYXQiLCJUd2VlbiIsImVhc2luZyIsInByb3RvdHlwZSIsImluaXQiLCJjcmVhdGVGeE5vdyIsInNldFRpbWVvdXQiLCJmeE5vdyIsIm5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwid2hpY2giLCJhdHRycyIsImhlaWdodCIsIm9wYWNpdHkiLCJ3aWR0aCIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJkZWZhdWx0UHJlZmlsdGVyIiwicHJvcHMiLCJvcHRzIiwidG9nZ2xlIiwiaG9va3MiLCJvbGRmaXJlIiwiY2hlY2tEaXNwbGF5IiwiYW5pbSIsIm9yaWciLCJkYXRhU2hvdyIsInF1ZXVlIiwiX3F1ZXVlSG9va3MiLCJ1bnF1ZXVlZCIsImVtcHR5IiwiZmlyZSIsImFsd2F5cyIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwiaW5saW5lQmxvY2tOZWVkc0xheW91dCIsInpvb20iLCJzaHJpbmtXcmFwQmxvY2tzIiwicmZ4dHlwZXMiLCJkb25lIiwiaGlkZSIsIl9yZW1vdmVEYXRhIiwicHJvcEZpbHRlciIsInNwZWNpYWxFYXNpbmciLCJjc3NIb29rcyIsImV4cGFuZCIsInByb3BlcnRpZXMiLCJyZXN1bHQiLCJzdG9wcGVkIiwicHJlZmlsdGVycyIsImRlZmVycmVkIiwiRGVmZXJyZWQiLCJ0aWNrIiwiY3VycmVudFRpbWUiLCJyZW1haW5pbmciLCJzdGFydFRpbWUiLCJkdXJhdGlvbiIsInRlbXAiLCJwZXJjZW50IiwidHdlZW5zIiwicnVuIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwicHJvbWlzZSIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsInN0b3AiLCJnb3RvRW5kIiwicmVqZWN0V2l0aCIsInByb3h5IiwiZngiLCJ0aW1lciIsInByb2dyZXNzIiwiY29tcGxldGUiLCJmYWlsIiwiZ2V0Q2xhc3MiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJmdW5jIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJ1bnNoaWZ0IiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3QiLCJpbnNwZWN0ZWQiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0Iiwic2Vla2luZ1RyYW5zcG9ydCIsInRyYW5zcG9ydHMiLCJhamF4RXh0ZW5kIiwidGFyZ2V0IiwiZGVlcCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsInMiLCJyZXNwb25zZXMiLCJmaXJzdERhdGFUeXBlIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiY29udGVudHMiLCJzaGlmdCIsIm1pbWVUeXBlIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJjb252ZXJ0ZXJzIiwiYWpheENvbnZlcnQiLCJyZXNwb25zZSIsImlzU3VjY2VzcyIsImNvbnYyIiwiY3VycmVudCIsImNvbnYiLCJwcmV2IiwicmVzcG9uc2VGaWVsZHMiLCJkYXRhRmlsdGVyIiwic3RhdGUiLCJlcnJvciIsImdldERpc3BsYXkiLCJmaWx0ZXJIaWRkZW4iLCJidWlsZFBhcmFtcyIsInByZWZpeCIsInRyYWRpdGlvbmFsIiwidiIsInJicmFja2V0IiwiY3JlYXRlU3RhbmRhcmRYSFIiLCJYTUxIdHRwUmVxdWVzdCIsImNyZWF0ZUFjdGl2ZVhIUiIsIkFjdGl2ZVhPYmplY3QiLCJnZXRXaW5kb3ciLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsImluZGV4T2YiLCJjbGFzczJ0eXBlIiwidG9TdHJpbmciLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsInZlcnNpb24iLCJydHJpbSIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiYWxsIiwibGV0dGVyIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJ0b0FycmF5IiwibnVtIiwicHVzaFN0YWNrIiwicHJldk9iamVjdCIsImxhc3QiLCJsZW4iLCJzb3J0Iiwic3BsaWNlIiwiY29weUlzQXJyYXkiLCJjb3B5IiwiaXNQbGFpbk9iamVjdCIsInJhbmRvbSIsImlzUmVhZHkiLCJtc2ciLCJBcnJheSIsImlzTnVtZXJpYyIsInJlYWxTdHJpbmdPYmoiLCJvd25GaXJzdCIsImV4ZWNTY3JpcHQiLCJzdHJpbmciLCJtYWtlQXJyYXkiLCJhcnIiLCJyZXN1bHRzIiwiT2JqZWN0Iiwic2Vjb25kIiwiaW52ZXJ0IiwiY2FsbGJhY2tJbnZlcnNlIiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJEYXRlIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJTaXp6bGUiLCJzZWVkIiwibSIsIm5pZCIsIm5pZHNlbGVjdCIsImdyb3VwcyIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsInByZWZlcnJlZERvYyIsInNldERvY3VtZW50IiwiZG9jdW1lbnRJc0hUTUwiLCJycXVpY2tFeHByIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwiY29tcGlsZXJDYWNoZSIsInJidWdneVFTQSIsInJlc2NhcGUiLCJzZXRBdHRyaWJ1dGUiLCJ0b2tlbml6ZSIsInJpZGVudGlmaWVyIiwidG9TZWxlY3RvciIsImpvaW4iLCJyc2libGluZyIsInRlc3RDb250ZXh0IiwicXNhRXJyb3IiLCJzZWxlY3QiLCJjcmVhdGVDYWNoZSIsImtleXMiLCJFeHByIiwiY2FjaGVMZW5ndGgiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJkaXYiLCJhZGRIYW5kbGUiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImEiLCJiIiwiZGlmZiIsInNvdXJjZUluZGV4IiwiTUFYX05FR0FUSVZFIiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsInNldEZpbHRlcnMiLCJ0b2tlbnMiLCJhZGRDb21iaW5hdG9yIiwibWF0Y2hlciIsImNvbWJpbmF0b3IiLCJiYXNlIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwieG1sIiwib2xkQ2FjaGUiLCJ1bmlxdWVDYWNoZSIsIm91dGVyQ2FjaGUiLCJuZXdDYWNoZSIsImRpcnJ1bnMiLCJ1bmlxdWVJRCIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJtdWx0aXBsZUNvbnRleHRzIiwiY29udGV4dHMiLCJjb25kZW5zZSIsInVubWF0Y2hlZCIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwcmVGaWx0ZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsInJlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsIm91dGVybW9zdENvbnRleHQiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJzZXRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJkaXJydW5zVW5pcXVlIiwidW5pcXVlU29ydCIsImdldFRleHQiLCJpc1hNTCIsImNvbXBpbGUiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJkb2NFbGVtIiwicmJ1Z2d5TWF0Y2hlcyIsImNsYXNzQ2FjaGUiLCJ0b2tlbkNhY2hlIiwic29ydE9yZGVyIiwicHVzaF9uYXRpdmUiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsIlJlZ0V4cCIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJhdHRyaWJ1dGVRdW90ZXMiLCJycHNldWRvIiwibWF0Y2hFeHByIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJlc2NhcGVkIiwiZXNjYXBlZFdoaXRlc3BhY2UiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwidW5sb2FkSGFuZGxlciIsImVscyIsImhhc0NvbXBhcmUiLCJwYXJlbnQiLCJ0b3AiLCJhdHRhY2hFdmVudCIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJhdHRySWQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwiaW5wdXQiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiYWRvd24iLCJidXAiLCJjb21wYXJlIiwic29ydERldGFjaGVkIiwiYXVwIiwiYXAiLCJicCIsImV4cHIiLCJzcGVjaWZpZWQiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCI+IiwiICIsIisiLCJ+IiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwicGF0dGVybiIsIm9wZXJhdG9yIiwiY2hlY2siLCJ3aGF0Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsIm5vZGVJbmRleCIsInVzZUNhY2hlIiwicHNldWRvIiwiaWR4IiwibWF0Y2hlZCIsImhhcyIsImlubmVyVGV4dCIsImxhbmciLCJlbGVtTGFuZyIsImhhc2giLCJsb2NhdGlvbiIsInJvb3QiLCJmb2N1cyIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiZW5hYmxlZCIsImRpc2FibGVkIiwic2VsZWN0ZWRJbmRleCIsImhlYWRlciIsImJ1dHRvbiIsImV2ZW4iLCJvZGQiLCJsdCIsImd0IiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5Iiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwidG9rZW4iLCJjb21waWxlZCIsImRpdjEiLCJ1bmlxdWUiLCJpc1hNTERvYyIsInVudGlsIiwidHJ1bmNhdGUiLCJpcyIsInNpYmxpbmdzIiwibiIsInJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwicm9vdGpRdWVyeSIsInBhcnNlSFRNTCIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJjaGlsZHJlbiIsIm5leHQiLCJ0YXJnZXRzIiwiY2xvc2VzdCIsInBvcyIsInByZXZBbGwiLCJhZGRCYWNrIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJyZXZlcnNlIiwiQ2FsbGJhY2tzIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJmaXJpbmdJbmRleCIsIm9uY2UiLCJzdG9wT25GYWxzZSIsImRpc2FibGUiLCJsb2NrIiwiZmlyZVdpdGgiLCJ0dXBsZXMiLCJ0aGVuIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwibm90aWZ5IiwicmVzb2x2ZSIsInJlamVjdCIsInBpcGUiLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzdWJvcmRpbmF0ZSIsInByb2dyZXNzVmFsdWVzIiwicHJvZ3Jlc3NDb250ZXh0cyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJ1cGRhdGVGdW5jIiwicmVhZHlMaXN0IiwicmVhZHlXYWl0IiwiaG9sZFJlYWR5IiwiaG9sZCIsIndhaXQiLCJ0cmlnZ2VySGFuZGxlciIsImRvU2Nyb2xsIiwiZnJhbWVFbGVtZW50IiwiZG9TY3JvbGxDaGVjayIsImNvbnRhaW5lciIsImNzc1RleHQiLCJub0RhdGEiLCJhcHBsZXQgIiwiZW1iZWQgIiwib2JqZWN0ICIsInJlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJzZXR0ZXIiLCJjbGVhclF1ZXVlIiwiY291bnQiLCJkZWZlciIsInNocmlua1dyYXBCbG9ja3NWYWwiLCJwbnVtIiwic291cmNlIiwiZWwiLCJhY2Nlc3MiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJodG1sU2VyaWFsaXplIiwiY2xvbmVOb2RlIiwibm9DbG9uZUNoZWNrZWQiLCJvcHRpb24iLCJsZWdlbmQiLCJhcmVhIiwicGFyYW0iLCJ0aGVhZCIsInRyIiwiY29sIiwidGQiLCJvcHRncm91cCIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJldmVudE5hbWUiLCJjaGFuZ2UiLCJmb2N1c2luIiwicmZvcm1FbGVtcyIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicmZvY3VzTW9ycGgiLCJydHlwZW5hbWVzcGFjZSIsInQiLCJoYW5kbGVPYmpJbiIsInNwZWNpYWwiLCJldmVudEhhbmRsZSIsImhhbmRsZU9iaiIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwibmFtZXNwYWNlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInRyaWdnZXIiLCJvbmx5SGFuZGxlcnMiLCJvbnR5cGUiLCJidWJibGVUeXBlIiwiZXZlbnRQYXRoIiwiRXZlbnQiLCJpc1RyaWdnZXIiLCJybmFtZXNwYWNlIiwibm9CdWJibGUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZml4IiwiaGFuZGxlclF1ZXVlIiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInN0b3BQcm9wYWdhdGlvbiIsInBvc3REaXNwYXRjaCIsInNlbCIsImlzTmFOIiwib3JpZ2luYWxFdmVudCIsImZpeEhvb2siLCJmaXhIb29rcyIsIm1vdXNlSG9va3MiLCJrZXlIb29rcyIsInNyY0VsZW1lbnQiLCJtZXRhS2V5Iiwib3JpZ2luYWwiLCJjaGFyQ29kZSIsImtleUNvZGUiLCJldmVudERvYyIsImZyb21FbGVtZW50IiwicGFnZVgiLCJjbGllbnRYIiwic2Nyb2xsTGVmdCIsImNsaWVudExlZnQiLCJwYWdlWSIsImNsaWVudFkiLCJzY3JvbGxUb3AiLCJjbGllbnRUb3AiLCJyZWxhdGVkVGFyZ2V0IiwidG9FbGVtZW50IiwibG9hZCIsImJsdXIiLCJjbGljayIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwic2ltdWxhdGUiLCJpc1NpbXVsYXRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJ0aW1lU3RhbXAiLCJjYW5jZWxCdWJibGUiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsInJlbGF0ZWQiLCJmb3JtIiwiX3N1Ym1pdEJ1YmJsZSIsInByb3BlcnR5TmFtZSIsIl9qdXN0Q2hhbmdlZCIsImF0dGFjaGVzIiwicmlubGluZWpRdWVyeSIsInJub3NoaW1jYWNoZSIsInJ4aHRtbFRhZyIsInJub0lubmVyaHRtbCIsInNhZmVGcmFnbWVudCIsImZyYWdtZW50RGl2IiwiZGF0YUFuZEV2ZW50cyIsImRlZXBEYXRhQW5kRXZlbnRzIiwiZGVzdEVsZW1lbnRzIiwic3JjRWxlbWVudHMiLCJpblBhZ2UiLCJmb3JjZUFjY2VwdERhdGEiLCJhcHBlbmQiLCJwcmVwZW5kIiwiaW5zZXJ0QmVmb3JlIiwiYmVmb3JlIiwiYWZ0ZXIiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsImluc2VydCIsIkhUTUwiLCJCT0RZIiwicm1hcmdpbiIsInN3YXAiLCJvbGQiLCJjb21wdXRlU3R5bGVUZXN0cyIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwicmVsaWFibGVNYXJnaW5MZWZ0VmFsIiwicGl4ZWxNYXJnaW5SaWdodFZhbCIsInJlbGlhYmxlTWFyZ2luUmlnaHRWYWwiLCJnZXRDb21wdXRlZFN0eWxlIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwicmVsaWFibGVIaWRkZW5PZmZzZXRzVmFsIiwiZ2V0Q2xpZW50UmVjdHMiLCJib3JkZXJDb2xsYXBzZSIsImNzc0Zsb2F0IiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJNb3pCb3hTaXppbmciLCJXZWJraXRCb3hTaXppbmciLCJyZWxpYWJsZUhpZGRlbk9mZnNldHMiLCJwaXhlbE1hcmdpblJpZ2h0IiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luUmlnaHQiLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJycG9zaXRpb24iLCJ2aWV3Iiwib3BlbmVyIiwiY29tcHV0ZWQiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImN1cnJlbnRTdHlsZSIsImxlZnQiLCJycyIsInJzTGVmdCIsInJ1bnRpbWVTdHlsZSIsInBpeGVsTGVmdCIsInJhbHBoYSIsInJvcGFjaXR5IiwicmRpc3BsYXlzd2FwIiwiY3NzU2hvdyIsInBvc2l0aW9uIiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJjb2x1bW5Db3VudCIsImZpbGxPcGFjaXR5IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwibGluZUhlaWdodCIsIm9yZGVyIiwib3JwaGFucyIsIndpZG93cyIsInpJbmRleCIsImNzc1Byb3BzIiwiZmxvYXQiLCJvcmlnTmFtZSIsInNldCIsImlzRmluaXRlIiwiJDEiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwic3VmZml4IiwiZXhwYW5kZWQiLCJwYXJ0cyIsInByb3BIb29rcyIsImVhc2VkIiwic3RlcCIsImxpbmVhciIsInAiLCJzd2luZyIsImNvcyIsIlBJIiwidGltZXJJZCIsInJydW4iLCIqIiwidHdlZW5lciIsInByZWZpbHRlciIsInNwZWVkIiwib3B0Iiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwiaW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJnZXRTZXRBdHRyaWJ1dGUiLCJocmVmTm9ybWFsaXplZCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsImVuY3R5cGUiLCJvcHREaXNhYmxlZCIsInJhZGlvVmFsdWUiLCJycmV0dXJuIiwicnNwYWNlcyIsInZhbEhvb2tzIiwib3B0aW9uU2V0Iiwic2Nyb2xsSGVpZ2h0Iiwibm9kZUhvb2siLCJib29sSG9vayIsInJ1c2VEZWZhdWx0IiwiZ2V0U2V0SW5wdXQiLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJwcm9wTmFtZSIsImF0dHJOYW1lcyIsInByb3BGaXgiLCJnZXR0ZXIiLCJzZXRBdHRyaWJ1dGVOb2RlIiwiY3JlYXRlQXR0cmlidXRlIiwiY29vcmRzIiwiY29udGVudGVkaXRhYmxlIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJyZW1vdmVQcm9wIiwidGFiaW5kZXgiLCJwYXJzZUludCIsImZvciIsImNsYXNzIiwicmNsYXNzIiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiY3VyVmFsdWUiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJjbGFzc05hbWVzIiwiaGFzQ2xhc3MiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0Iiwibm9uY2UiLCJycXVlcnkiLCJydmFsaWR0b2tlbnMiLCJKU09OIiwicGFyc2UiLCJyZXF1aXJlTm9uQ29tbWEiLCJkZXB0aCIsInN0ciIsImNvbW1hIiwib3BlbiIsIkZ1bmN0aW9uIiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJhc3luYyIsImxvYWRYTUwiLCJyaGFzaCIsInJ0cyIsInJoZWFkZXJzIiwicmxvY2FsUHJvdG9jb2wiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwicnVybCIsImFsbFR5cGVzIiwiYWpheExvY2F0aW9uIiwiYWpheExvY1BhcnRzIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm9jZXNzRGF0YSIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsImpzb24iLCIqIHRleHQiLCJ0ZXh0IGh0bWwiLCJ0ZXh0IGpzb24iLCJ0ZXh0IHhtbCIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4Iiwic3RhdHVzIiwibmF0aXZlU3RhdHVzVGV4dCIsImhlYWRlcnMiLCJzdWNjZXNzIiwibW9kaWZpZWQiLCJzdGF0dXNUZXh0IiwidGltZW91dFRpbWVyIiwidHJhbnNwb3J0IiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwiaWZNb2RpZmllZCIsImNhY2hlVVJMIiwiY2FsbGJhY2tDb250ZXh0Iiwic3RhdHVzQ29kZSIsImZpcmVHbG9iYWxzIiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInJlc3BvbnNlSGVhZGVycyIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnNOYW1lcyIsInN0ckFib3J0IiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsImxuYW1lIiwib3ZlcnJpZGVNaW1lVHlwZSIsImNvZGUiLCJhYm9ydCIsImZpbmFsVGV4dCIsIm1ldGhvZCIsImNyb3NzRG9tYWluIiwiaGFzQ29udGVudCIsImJlZm9yZVNlbmQiLCJzZW5kIiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsInRocm93cyIsIndyYXBBbGwiLCJ3cmFwSW5uZXIiLCJ1bndyYXAiLCJ2aXNpYmxlIiwicjIwIiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInhociIsImRvY3VtZW50TW9kZSIsInhocklkIiwieGhyQ2FsbGJhY2tzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwiaXNBYm9ydCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVGV4dCIsInNjcmlwdCIsInRleHQgc2NyaXB0IiwiaGVhZCIsInNjcmlwdENoYXJzZXQiLCJjaGFyc2V0Iiwib25sb2FkIiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwiX2xvYWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjYWxjdWxhdGVQb3NpdGlvbiIsImN1ckVsZW0iLCJ1c2luZyIsIndpbiIsImJveCIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJiaW5kIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwic2l6ZSIsImFuZFNlbGYiLCJkZWZpbmUiLCJhbWQiLCJfalF1ZXJ5IiwiXyQiLCIkIiwibm9Db25mbGljdCIsImFkZEV2ZW50IiwiYWRkQ2xpY2tFdmVudCIsImdldEFuY2VzdG9yIiwiYWRkRGV0YWlsc1BvbHlmaWxsIiwic3RhdGVjaGFuZ2UiLCJzdW1tYXJ5IiwiX19kZXRhaWxzIiwiX19zdW1tYXJ5IiwiX19jb250ZW50IiwiTkFUSVZFX0RFVEFJTFMiLCJoYXNPcGVuQXR0ciIsIl9fdHdpc3R5Iiwic3RhcnRlZCIsImRldGFpbHMiLCJpdGVtIiwib3BlbkF0dHIiLCJ0d2lzdHkiLCJyZXNldEZvcm0iLCIkYWdyZWVOYWEiLCJ1cGRhdGVCdXR0b24iLCIkbmFhIiwiJHN1Ym1pdCIsIiRlcnJvck1lc3NhZ2VOYWEiLCJkaXJ0eSIsImNoZWNrRGVlZElzU2lnbmVkIiwicmVkaXJlY3QiLCJtYXhUcmllcyIsImF1dGhfY29kZSIsIkdPVlVLIiwiU2VsZWN0aW9uQnV0dG9ucyIsImVsbXNPclNlbGVjdG9yIiwic2VsZWN0ZWRDbGFzcyIsImZvY3VzZWRDbGFzcyIsInJhZGlvQ2xhc3MiLCJjaGVja2JveENsYXNzIiwib3B0aW9uTmFtZSIsIm9wdGlvbk9iaiIsInNldEluaXRpYWxTdGF0ZSIsIiRlbG1zIiwiYWRkRXZlbnRzIiwiYWRkRWxlbWVudExldmVsRXZlbnRzIiwiYWRkRG9jdW1lbnRMZXZlbEV2ZW50cyIsImVsbSIsIiRlbG0iLCJsYWJlbENsYXNzIiwibWFya1NlbGVjdGVkIiwibWFya0ZvY3VzZWQiLCJyYWRpb05hbWUiLCJjbGlja0hhbmRsZXIiLCJnZXRDbGlja0hhbmRsZXIiLCJmb2N1c0hhbmRsZXIiLCJnZXRGb2N1c0hhbmRsZXIiLCJsZXZlbCIsImZvY3VzRXZlbnQiLCJkZXN0cm95Il0sIm1hcHBpbmdzIjoiQ0FjQyxTQUFVQSxFQUFRQyxHQUVLLGdCQUFYQyxTQUFpRCxnQkFBbkJBLFFBQU9DLFFBUWhERCxPQUFPQyxRQUFVSCxFQUFPSSxTQUN2QkgsRUFBU0QsR0FBUSxHQUNqQixTQUFVSyxHQUNULElBQU1BLEVBQUVELFNBQ1AsS0FBTSxJQUFJRSxPQUFPLDJDQUVsQixPQUFPTCxHQUFTSSxJQUdsQkosRUFBU0QsSUFJUyxtQkFBWE8sUUFBeUJBLE9BQVNDLE9BQU0sU0FBVUQsRUFBUUUsR0E2Z0JuRSxRQUFTQyxHQUFhQyxHQU1yQixHQUFJQyxLQUFXRCxHQUFPLFVBQVlBLElBQU9BLEVBQUlDLE9BQzVDQyxFQUFPQyxHQUFPRCxLQUFNRixFQUVyQixPQUFjLGFBQVRFLElBQXVCQyxHQUFPQyxTQUFVSixLQUk3QixVQUFURSxHQUErQixJQUFYRCxHQUNSLGdCQUFYQSxJQUF1QkEsRUFBUyxHQUFPQSxFQUFTLElBQU9ELElBNG9FaEUsUUFBU0ssR0FBUUMsRUFBVUMsRUFBV0MsR0FDckMsR0FBS0wsR0FBT00sV0FBWUYsR0FDdkIs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"}